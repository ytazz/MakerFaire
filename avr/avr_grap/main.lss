
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001536  000015ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f6  00800126  00800126  000015f0  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c98  00000000  00000000  00003f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004bbc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000850  00000000  00000000  00004beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c06f  00000000  00000000  0000543b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003767  00000000  00000000  000114aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007b4e  00000000  00000000  00014c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001508  00000000  00000000  0001c760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000044ee  00000000  00000000  0001dc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007b21  00000000  00000000  00022156  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000898  00000000  00000000  00029c77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9c c0       	rjmp	.+312    	; 0x13a <__ctors_end>
       2:	00 00       	nop
       4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
       6:	00 00       	nop
       8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_3>
      10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
      12:	00 00       	nop
      14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
      16:	00 00       	nop
      18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
      22:	00 00       	nop
      24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
      26:	00 00       	nop
      28:	64 c3       	rjmp	.+1736   	; 0x6f2 <__vector_10>
      2a:	00 00       	nop
      2c:	2d c4       	rjmp	.+2138   	; 0x888 <__vector_11>
      2e:	00 00       	nop
      30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
      32:	00 00       	nop
      34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
      36:	00 00       	nop
      38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
      42:	00 00       	nop
      44:	a1 c0       	rjmp	.+322    	; 0x188 <__bad_interrupt>
      46:	00 00       	nop
      48:	9f c0       	rjmp	.+318    	; 0x188 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
      52:	00 00       	nop
      54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
      56:	00 00       	nop
      58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_23>
      60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
      66:	00 00       	nop
      68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
      72:	00 00       	nop
      74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
      76:	00 00       	nop
      78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
      7e:	00 00       	nop
      80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
      82:	00 00       	nop
      84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
      86:	00 00       	nop
      88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
      92:	00 00       	nop
      94:	79 c0       	rjmp	.+242    	; 0x188 <__bad_interrupt>
      96:	00 00       	nop
      98:	77 c0       	rjmp	.+238    	; 0x188 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	75 c0       	rjmp	.+234    	; 0x188 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	73 c0       	rjmp	.+230    	; 0x188 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c7       	rjmp	.+4070   	; 0x108c <__vector_41>
      a6:	00 00       	nop
      a8:	6f c0       	rjmp	.+222    	; 0x188 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <__ctors_start>:
     138:	27 09       	sbc	r18, r7

0000013a <__ctors_end>:
     13a:	11 24       	eor	r1, r1
     13c:	1f be       	out	0x3f, r1	; 63
     13e:	cf ef       	ldi	r28, 0xFF	; 255
     140:	da e0       	ldi	r29, 0x0A	; 10
     142:	de bf       	out	0x3e, r29	; 62
     144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
     146:	11 e0       	ldi	r17, 0x01	; 1
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	e6 e3       	ldi	r30, 0x36	; 54
     14e:	f5 e1       	ldi	r31, 0x15	; 21
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x10>
     152:	05 90       	lpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a6 32       	cpi	r26, 0x26	; 38
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0xc>

0000015c <__do_clear_bss>:
     15c:	22 e0       	ldi	r18, 0x02	; 2
     15e:	a6 e2       	ldi	r26, 0x26	; 38
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	ac 31       	cpi	r26, 0x1C	; 28
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	ca e3       	ldi	r28, 0x3A	; 58
     170:	d1 e0       	ldi	r29, 0x01	; 1
     172:	04 c0       	rjmp	.+8      	; 0x17c <__do_global_ctors+0x10>
     174:	22 97       	sbiw	r28, 0x02	; 2
     176:	fe 01       	movw	r30, r28
     178:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__tablejump__>
     17c:	c8 33       	cpi	r28, 0x38	; 56
     17e:	d1 07       	cpc	r29, r17
     180:	c9 f7       	brne	.-14     	; 0x174 <__do_global_ctors+0x8>
     182:	65 d0       	rcall	.+202    	; 0x24e <main>
     184:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <_exit>

00000188 <__bad_interrupt>:
     188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <EVENT_USB_Device_Connect>:
	LEDW_OFF;
	if(cnt % 2 == 0) LEDM_ON;
	if(cnt % 4 == 0) LEDR_ON;
	if(cnt % 4 == 1) LEDG_ON;
	if(cnt % 4 == 2) LEDB_ON;
	if(cnt % 4 == 3) LEDW_ON;
     18a:	08 95       	ret

0000018c <EVENT_USB_Device_Disconnect>:
     18c:	08 95       	ret

0000018e <EVENT_USB_Device_ConfigurationChanged>:
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	43 c5       	rjmp	.+2694   	; 0xc1a <CDC_Device_ConfigureEndpoints>

00000194 <EVENT_USB_Device_ControlRequest>:
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	36 c6       	rjmp	.+3180   	; 0xe06 <CDC_Device_ProcessControlRequest>

0000019a <EVENT_CDC_Device_ControLineStateChanged>:
     19a:	08 95       	ret

0000019c <IrTransmissionProc>:
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	0e 94 c0 09 	call	0x1380	; 0x1380 <RotEncoderGetVal>
     1a4:	9c 01       	movw	r18, r24
     1a6:	22 0f       	add	r18, r18
     1a8:	33 1f       	adc	r19, r19
     1aa:	28 0f       	add	r18, r24
     1ac:	39 1f       	adc	r19, r25
     1ae:	21 30       	cpi	r18, 0x01	; 1
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	38 07       	cpc	r19, r24
     1b4:	2c f0       	brlt	.+10     	; 0x1c0 <IrTransmissionProc+0x24>
     1b6:	21 30       	cpi	r18, 0x01	; 1
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	38 07       	cpc	r19, r24
     1bc:	24 f4       	brge	.+8      	; 0x1c6 <IrTransmissionProc+0x2a>
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <IrTransmissionProc+0x2e>
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	3f ef       	ldi	r19, 0xFF	; 255
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <IrTransmissionProc+0x2e>
     1c6:	2f ef       	ldi	r18, 0xFF	; 255
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	1d 99       	sbic	0x03, 5	; 3
     1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <IrTransmissionProc+0x38>
     1ce:	8c 9a       	sbi	0x11, 4	; 17
     1d0:	e9 01       	movw	r28, r18
     1d2:	03 c0       	rjmp	.+6      	; 0x1da <IrTransmissionProc+0x3e>
     1d4:	8c 98       	cbi	0x11, 4	; 17
     1d6:	c0 e0       	ldi	r28, 0x00	; 0
     1d8:	d0 e0       	ldi	r29, 0x00	; 0
     1da:	1e 99       	sbic	0x03, 6	; 3
     1dc:	06 c0       	rjmp	.+12     	; 0x1ea <IrTransmissionProc+0x4e>
     1de:	cc 27       	eor	r28, r28
     1e0:	dd 27       	eor	r29, r29
     1e2:	c2 1b       	sub	r28, r18
     1e4:	d3 0b       	sbc	r29, r19
     1e6:	8e 9a       	sbi	0x11, 6	; 17
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <IrTransmissionProc+0x50>
     1ea:	8e 98       	cbi	0x11, 6	; 17
     1ec:	80 91 26 01 	lds	r24, 0x0126
     1f0:	90 91 27 01 	lds	r25, 0x0127
     1f4:	8c 17       	cp	r24, r28
     1f6:	9d 07       	cpc	r25, r29
     1f8:	39 f0       	breq	.+14     	; 0x208 <IrTransmissionProc+0x6c>
     1fa:	ce 01       	movw	r24, r28
     1fc:	0e 94 0d 09 	call	0x121a	; 0x121a <IrSend>
     200:	d0 93 27 01 	sts	0x0127, r29
     204:	c0 93 26 01 	sts	0x0126, r28
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <SetupHardware>:
#endif
	}
}

void SetupHardware(void)
{
     20e:	cf 93       	push	r28
	MCUSR &= ~(1 << WDRF);
     210:	84 b7       	in	r24, 0x34	; 52
     212:	87 7f       	andi	r24, 0xF7	; 247
     214:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     216:	88 e1       	ldi	r24, 0x18	; 24
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	80 93 60 00 	sts	0x0060, r24
     220:	10 92 60 00 	sts	0x0060, r1
     224:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     226:	c0 e8       	ldi	r28, 0x80	; 128
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	c0 93 61 00 	sts	0x0061, r28
     232:	80 93 61 00 	sts	0x0061, r24
     236:	0f be       	out	0x3f, r0	; 63

	clock_prescale_set(clock_div_1);

	USB_Init();
     238:	3f d2       	rcall	.+1150   	; 0x6b8 <USB_Init>

	// disable JTAG on borad
	MCUCR = 0x80; MCUCR = 0x80;
     23a:	c5 bf       	out	0x35, r28	; 53
     23c:	c5 bf       	out	0x35, r28	; 53

#if IR_RECEIVER
	IrReceiveSetup();
	InitMotor();
#else
	IrSendSetup();
     23e:	c4 d7       	rcall	.+3976   	; 0x11c8 <IrSendSetup>
	Led7Seg_Init();
     240:	0e 94 2a 09 	call	0x1254	; 0x1254 <Led7Seg_Init>
	InitRotEncoder();
     244:	0e 94 b0 09 	call	0x1360	; 0x1360 <InitRotEncoder>
#endif

	// ------------------------------------------------------------

	sbi(DDRC, 7);	// BOARD LED
     248:	3f 9a       	sbi	0x07, 7	; 7
	ADCSRA |= _BV(ADPS0);  // prescaler 128 -> ADC clock 125kHz
	ADCSRA |= _BV(ADPS1);
	ADCSRA |= _BV(ADPS2);
	ADCSRA |= _BV(ADEN); // A/D enable
#endif
}
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <main>:
#endif
}

int main(void)
{
	SetupHardware();
     24e:	df df       	rcall	.-66     	; 0x20e <SetupHardware>
	
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     250:	6d ef       	ldi	r22, 0xFD	; 253
     252:	71 e0       	ldi	r23, 0x01	; 1
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	c2 d5       	rcall	.+2948   	; 0xdde <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     25a:	78 94       	sei
	GlobalInterruptEnable();

	int  cnt;
	char str[256];
	for(cnt = 0; ; cnt++){
		char c = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	7c d5       	rcall	.+2808   	; 0xd5a <CDC_Device_ReceiveByte>
     262:	ec 01       	movw	r28, r24
		if(isalpha(c)){
     264:	dd 27       	eor	r29, r29
     266:	ce 01       	movw	r24, r28
     268:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <isalpha>
     26c:	89 2b       	or	r24, r25
     26e:	59 f0       	breq	.+22     	; 0x286 <main+0x38>
			fputc(c   , &USBSerialStream);
     270:	6d ef       	ldi	r22, 0xFD	; 253
     272:	71 e0       	ldi	r23, 0x01	; 1
     274:	ce 01       	movw	r24, r28
     276:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <fputc>
			fputc('\n', &USBSerialStream);
     27a:	6d ef       	ldi	r22, 0xFD	; 253
     27c:	71 e0       	ldi	r23, 0x01	; 1
     27e:	8a e0       	ldi	r24, 0x0A	; 10
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <fputc>
		//fputs(str, &USBSerialStream);
			
#if IR_RECEIVER
		IrReceiveProc();
#else
		IrTransmissionProc();
     286:	8a df       	rcall	.-236    	; 0x19c <IrTransmissionProc>
#endif

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	50 d5       	rcall	.+2720   	; 0xd2e <CDC_Device_USBTask>
		USB_USBTask();
     28e:	a9 d4       	rcall	.+2386   	; 0xbe2 <USB_USBTask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     290:	8f e6       	ldi	r24, 0x6F	; 111
     292:	97 e1       	ldi	r25, 0x17	; 23
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <main+0x46>
     298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x4c>
     29a:	00 00       	nop
#if IR_RECEIVER
		_delay_ms(100);
#else
		_delay_us(1500);
#endif
	}
     29c:	df cf       	rjmp	.-66     	; 0x25c <main+0xe>

0000029e <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     29e:	29 2f       	mov	r18, r25
     2a0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2a2:	22 30       	cpi	r18, 0x02	; 2
     2a4:	31 05       	cpc	r19, r1
     2a6:	39 f0       	breq	.+14     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x18>
     2a8:	23 30       	cpi	r18, 0x03	; 3
     2aa:	31 05       	cpc	r19, r1
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x22>
     2ae:	21 30       	cpi	r18, 0x01	; 1
     2b0:	31 05       	cpc	r19, r1
     2b2:	21 f1       	breq	.+72     	; 0x2fc <CALLBACK_USB_GetDescriptor+0x5e>
     2b4:	28 c0       	rjmp	.+80     	; 0x306 <CALLBACK_USB_GetDescriptor+0x68>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2b6:	ee e3       	ldi	r30, 0x3E	; 62
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     2ba:	88 ee       	ldi	r24, 0xE8	; 232
     2bc:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     2be:	27 c0       	rjmp	.+78     	; 0x30e <CALLBACK_USB_GetDescriptor+0x70>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     2c0:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	91 05       	cpc	r25, r1
     2c6:	61 f0       	breq	.+24     	; 0x2e0 <CALLBACK_USB_GetDescriptor+0x42>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	91 05       	cpc	r25, r1
     2cc:	81 f0       	breq	.+32     	; 0x2ee <CALLBACK_USB_GetDescriptor+0x50>
     2ce:	89 2b       	or	r24, r25
     2d0:	d1 f4       	brne	.+52     	; 0x306 <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     2d2:	e4 ee       	ldi	r30, 0xE4	; 228
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	e4 91       	lpm	r30, Z
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     2da:	84 ee       	ldi	r24, 0xE4	; 228
     2dc:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     2de:	17 c0       	rjmp	.+46     	; 0x30e <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     2e0:	ea ec       	ldi	r30, 0xCA	; 202
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	e4 91       	lpm	r30, Z
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     2e8:	8a ec       	ldi	r24, 0xCA	; 202
     2ea:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     2ec:	10 c0       	rjmp	.+32     	; 0x30e <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     2ee:	ec ea       	ldi	r30, 0xAC	; 172
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	e4 91       	lpm	r30, Z
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     2f6:	8c ea       	ldi	r24, 0xAC	; 172
     2f8:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     2fa:	09 c0       	rjmp	.+18     	; 0x30e <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     2fc:	e2 e1       	ldi	r30, 0x12	; 18
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     300:	86 e2       	ldi	r24, 0x26	; 38
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	04 c0       	rjmp	.+8      	; 0x30e <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     306:	e0 e0       	ldi	r30, 0x00	; 0
     308:	f0 e0       	ldi	r31, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     30e:	da 01       	movw	r26, r20
     310:	8d 93       	st	X+, r24
     312:	9c 93       	st	X, r25
	return Size;
}
     314:	cf 01       	movw	r24, r30
     316:	08 95       	ret

00000318 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     318:	40 91 16 02 	lds	r20, 0x0216
     31c:	50 91 17 02 	lds	r21, 0x0217
     320:	46 17       	cp	r20, r22
     322:	57 07       	cpc	r21, r23
     324:	48 f0       	brcs	.+18     	; 0x338 <Endpoint_Write_Control_Stream_LE+0x20>
     326:	61 15       	cp	r22, r1
     328:	71 05       	cpc	r23, r1
     32a:	39 f4       	brne	.+14     	; 0x33a <Endpoint_Write_Control_Stream_LE+0x22>
     32c:	40 91 e8 00 	lds	r20, 0x00E8
     330:	4e 77       	andi	r20, 0x7E	; 126
     332:	40 93 e8 00 	sts	0x00E8, r20
     336:	01 c0       	rjmp	.+2      	; 0x33a <Endpoint_Write_Control_Stream_LE+0x22>
     338:	ba 01       	movw	r22, r20
     33a:	fc 01       	movw	r30, r24
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	33 c0       	rjmp	.+102    	; 0x3a6 <Endpoint_Write_Control_Stream_LE+0x8e>
     340:	80 91 0f 02 	lds	r24, 0x020F
     344:	88 23       	and	r24, r24
     346:	09 f4       	brne	.+2      	; 0x34a <Endpoint_Write_Control_Stream_LE+0x32>
     348:	44 c0       	rjmp	.+136    	; 0x3d2 <Endpoint_Write_Control_Stream_LE+0xba>
     34a:	85 30       	cpi	r24, 0x05	; 5
     34c:	09 f4       	brne	.+2      	; 0x350 <Endpoint_Write_Control_Stream_LE+0x38>
     34e:	43 c0       	rjmp	.+134    	; 0x3d6 <Endpoint_Write_Control_Stream_LE+0xbe>
     350:	80 91 e8 00 	lds	r24, 0x00E8
     354:	83 fd       	sbrc	r24, 3
     356:	41 c0       	rjmp	.+130    	; 0x3da <Endpoint_Write_Control_Stream_LE+0xc2>
     358:	80 91 e8 00 	lds	r24, 0x00E8
     35c:	82 fd       	sbrc	r24, 2
     35e:	33 c0       	rjmp	.+102    	; 0x3c6 <Endpoint_Write_Control_Stream_LE+0xae>
     360:	80 91 e8 00 	lds	r24, 0x00E8
     364:	80 ff       	sbrs	r24, 0
     366:	1f c0       	rjmp	.+62     	; 0x3a6 <Endpoint_Write_Control_Stream_LE+0x8e>
     368:	90 91 f3 00 	lds	r25, 0x00F3
     36c:	80 91 f2 00 	lds	r24, 0x00F2
     370:	39 2f       	mov	r19, r25
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	a9 01       	movw	r20, r18
     376:	48 2b       	or	r20, r24
     378:	ca 01       	movw	r24, r20
     37a:	06 c0       	rjmp	.+12     	; 0x388 <Endpoint_Write_Control_Stream_LE+0x70>
     37c:	41 91       	ld	r20, Z+
     37e:	40 93 f1 00 	sts	0x00F1, r20
     382:	61 50       	subi	r22, 0x01	; 1
     384:	71 09       	sbc	r23, r1
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	61 15       	cp	r22, r1
     38a:	71 05       	cpc	r23, r1
     38c:	19 f0       	breq	.+6      	; 0x394 <Endpoint_Write_Control_Stream_LE+0x7c>
     38e:	88 30       	cpi	r24, 0x08	; 8
     390:	91 05       	cpc	r25, r1
     392:	a0 f3       	brcs	.-24     	; 0x37c <Endpoint_Write_Control_Stream_LE+0x64>
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	08 97       	sbiw	r24, 0x08	; 8
     398:	09 f0       	breq	.+2      	; 0x39c <Endpoint_Write_Control_Stream_LE+0x84>
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	80 91 e8 00 	lds	r24, 0x00E8
     3a0:	8e 77       	andi	r24, 0x7E	; 126
     3a2:	80 93 e8 00 	sts	0x00E8, r24
     3a6:	61 15       	cp	r22, r1
     3a8:	71 05       	cpc	r23, r1
     3aa:	51 f6       	brne	.-108    	; 0x340 <Endpoint_Write_Control_Stream_LE+0x28>
     3ac:	41 11       	cpse	r20, r1
     3ae:	c8 cf       	rjmp	.-112    	; 0x340 <Endpoint_Write_Control_Stream_LE+0x28>
     3b0:	0a c0       	rjmp	.+20     	; 0x3c6 <Endpoint_Write_Control_Stream_LE+0xae>
     3b2:	80 91 0f 02 	lds	r24, 0x020F
     3b6:	88 23       	and	r24, r24
     3b8:	61 f0       	breq	.+24     	; 0x3d2 <Endpoint_Write_Control_Stream_LE+0xba>
     3ba:	85 30       	cpi	r24, 0x05	; 5
     3bc:	61 f0       	breq	.+24     	; 0x3d6 <Endpoint_Write_Control_Stream_LE+0xbe>
     3be:	80 91 e8 00 	lds	r24, 0x00E8
     3c2:	83 fd       	sbrc	r24, 3
     3c4:	0a c0       	rjmp	.+20     	; 0x3da <Endpoint_Write_Control_Stream_LE+0xc2>
     3c6:	80 91 e8 00 	lds	r24, 0x00E8
     3ca:	82 ff       	sbrs	r24, 2
     3cc:	f2 cf       	rjmp	.-28     	; 0x3b2 <Endpoint_Write_Control_Stream_LE+0x9a>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	08 95       	ret
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	08 95       	ret
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	08 95       	ret
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	08 95       	ret

000003de <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3de:	40 91 16 02 	lds	r20, 0x0216
     3e2:	50 91 17 02 	lds	r21, 0x0217
     3e6:	46 17       	cp	r20, r22
     3e8:	57 07       	cpc	r21, r23
     3ea:	48 f0       	brcs	.+18     	; 0x3fe <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     3ec:	61 15       	cp	r22, r1
     3ee:	71 05       	cpc	r23, r1
     3f0:	39 f4       	brne	.+14     	; 0x400 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3f2:	40 91 e8 00 	lds	r20, 0x00E8
     3f6:	4e 77       	andi	r20, 0x7E	; 126
     3f8:	40 93 e8 00 	sts	0x00E8, r20
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3fe:	ba 01       	movw	r22, r20
     400:	fc 01       	movw	r30, r24
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	34 c0       	rjmp	.+104    	; 0x46e <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     406:	80 91 0f 02 	lds	r24, 0x020F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     40a:	88 23       	and	r24, r24
     40c:	09 f4       	brne	.+2      	; 0x410 <Endpoint_Write_Control_PStream_LE+0x32>
     40e:	45 c0       	rjmp	.+138    	; 0x49a <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     410:	85 30       	cpi	r24, 0x05	; 5
     412:	09 f4       	brne	.+2      	; 0x416 <Endpoint_Write_Control_PStream_LE+0x38>
     414:	44 c0       	rjmp	.+136    	; 0x49e <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     416:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     41a:	83 fd       	sbrc	r24, 3
     41c:	42 c0       	rjmp	.+132    	; 0x4a2 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     41e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     422:	82 fd       	sbrc	r24, 2
     424:	34 c0       	rjmp	.+104    	; 0x48e <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     426:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     42a:	80 ff       	sbrs	r24, 0
     42c:	20 c0       	rjmp	.+64     	; 0x46e <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     42e:	90 91 f3 00 	lds	r25, 0x00F3
     432:	80 91 f2 00 	lds	r24, 0x00F2
     436:	39 2f       	mov	r19, r25
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	a9 01       	movw	r20, r18
     43c:	48 2b       	or	r20, r24
     43e:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     440:	07 c0       	rjmp	.+14     	; 0x450 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     442:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     444:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     448:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     44a:	61 50       	subi	r22, 0x01	; 1
     44c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     44e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     450:	61 15       	cp	r22, r1
     452:	71 05       	cpc	r23, r1
     454:	19 f0       	breq	.+6      	; 0x45c <Endpoint_Write_Control_PStream_LE+0x7e>
     456:	88 30       	cpi	r24, 0x08	; 8
     458:	91 05       	cpc	r25, r1
     45a:	98 f3       	brcs	.-26     	; 0x442 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     45c:	41 e0       	ldi	r20, 0x01	; 1
     45e:	08 97       	sbiw	r24, 0x08	; 8
     460:	09 f0       	breq	.+2      	; 0x464 <Endpoint_Write_Control_PStream_LE+0x86>
     462:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     464:	80 91 e8 00 	lds	r24, 0x00E8
     468:	8e 77       	andi	r24, 0x7E	; 126
     46a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     46e:	61 15       	cp	r22, r1
     470:	71 05       	cpc	r23, r1
     472:	49 f6       	brne	.-110    	; 0x406 <Endpoint_Write_Control_PStream_LE+0x28>
     474:	41 11       	cpse	r20, r1
     476:	c7 cf       	rjmp	.-114    	; 0x406 <Endpoint_Write_Control_PStream_LE+0x28>
     478:	0a c0       	rjmp	.+20     	; 0x48e <Endpoint_Write_Control_PStream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     47a:	80 91 0f 02 	lds	r24, 0x020F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     47e:	88 23       	and	r24, r24
     480:	61 f0       	breq	.+24     	; 0x49a <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     482:	85 30       	cpi	r24, 0x05	; 5
     484:	61 f0       	breq	.+24     	; 0x49e <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     486:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     48a:	83 fd       	sbrc	r24, 3
     48c:	0a c0       	rjmp	.+20     	; 0x4a2 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     48e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     492:	82 ff       	sbrs	r24, 2
     494:	f2 cf       	rjmp	.-28     	; 0x47a <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4a4:	08 95       	ret

000004a6 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     4a6:	98 2f       	mov	r25, r24
     4a8:	2c c0       	rjmp	.+88     	; 0x502 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     4aa:	90 93 e9 00 	sts	0x00E9, r25
     4ae:	98 17       	cp	r25, r24
     4b0:	39 f0       	breq	.+14     	; 0x4c0 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     4b2:	70 91 ec 00 	lds	r23, 0x00EC
     4b6:	20 91 ed 00 	lds	r18, 0x00ED
     4ba:	50 91 f0 00 	lds	r21, 0x00F0
     4be:	03 c0       	rjmp	.+6      	; 0x4c6 <Endpoint_ConfigureEndpoint_Prv+0x20>
     4c0:	24 2f       	mov	r18, r20
     4c2:	76 2f       	mov	r23, r22
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	21 fd       	sbrc	r18, 1
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <Endpoint_ConfigureEndpoint_Prv+0x28>
     4ca:	9f 5f       	subi	r25, 0xFF	; 255
     4cc:	1a c0       	rjmp	.+52     	; 0x502 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     4ce:	30 91 eb 00 	lds	r19, 0x00EB
     4d2:	3e 7f       	andi	r19, 0xFE	; 254
     4d4:	30 93 eb 00 	sts	0x00EB, r19
     4d8:	30 91 ed 00 	lds	r19, 0x00ED
     4dc:	3d 7f       	andi	r19, 0xFD	; 253
     4de:	30 93 ed 00 	sts	0x00ED, r19
     4e2:	30 91 eb 00 	lds	r19, 0x00EB
     4e6:	31 60       	ori	r19, 0x01	; 1
     4e8:	30 93 eb 00 	sts	0x00EB, r19
     4ec:	70 93 ec 00 	sts	0x00EC, r23
     4f0:	20 93 ed 00 	sts	0x00ED, r18
     4f4:	50 93 f0 00 	sts	0x00F0, r21
     4f8:	20 91 ee 00 	lds	r18, 0x00EE
     4fc:	27 fd       	sbrc	r18, 7
     4fe:	e5 cf       	rjmp	.-54     	; 0x4ca <Endpoint_ConfigureEndpoint_Prv+0x24>
     500:	07 c0       	rjmp	.+14     	; 0x510 <Endpoint_ConfigureEndpoint_Prv+0x6a>
     502:	97 30       	cpi	r25, 0x07	; 7
     504:	90 f2       	brcs	.-92     	; 0x4aa <Endpoint_ConfigureEndpoint_Prv+0x4>
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	80 93 e9 00 	sts	0x00E9, r24
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	08 95       	ret
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	08 95       	ret

00000514 <Endpoint_ConfigureEndpointTable>:
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	06 2f       	mov	r16, r22
     51e:	ec 01       	movw	r28, r24
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	2f c0       	rjmp	.+94     	; 0x582 <Endpoint_ConfigureEndpointTable+0x6e>
     524:	98 81       	ld	r25, Y
     526:	91 11       	cpse	r25, r1
     528:	03 c0       	rjmp	.+6      	; 0x530 <Endpoint_ConfigureEndpointTable+0x1c>
     52a:	1f 5f       	subi	r17, 0xFF	; 255
     52c:	25 96       	adiw	r28, 0x05	; 5
     52e:	29 c0       	rjmp	.+82     	; 0x582 <Endpoint_ConfigureEndpointTable+0x6e>
     530:	2c 81       	ldd	r18, Y+4	; 0x04
     532:	e9 81       	ldd	r30, Y+1	; 0x01
     534:	fa 81       	ldd	r31, Y+2	; 0x02
     536:	7b 81       	ldd	r23, Y+3	; 0x03
     538:	89 2f       	mov	r24, r25
     53a:	8f 70       	andi	r24, 0x0F	; 15
     53c:	87 30       	cpi	r24, 0x07	; 7
     53e:	10 f0       	brcs	.+4      	; 0x544 <Endpoint_ConfigureEndpointTable+0x30>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	22 c0       	rjmp	.+68     	; 0x588 <Endpoint_ConfigureEndpointTable+0x74>
     544:	22 30       	cpi	r18, 0x02	; 2
     546:	10 f0       	brcs	.+4      	; 0x54c <Endpoint_ConfigureEndpointTable+0x38>
     548:	56 e0       	ldi	r21, 0x06	; 6
     54a:	01 c0       	rjmp	.+2      	; 0x54e <Endpoint_ConfigureEndpointTable+0x3a>
     54c:	52 e0       	ldi	r21, 0x02	; 2
     54e:	28 e0       	ldi	r18, 0x08	; 8
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	03 c0       	rjmp	.+6      	; 0x55c <Endpoint_ConfigureEndpointTable+0x48>
     556:	4f 5f       	subi	r20, 0xFF	; 255
     558:	22 0f       	add	r18, r18
     55a:	33 1f       	adc	r19, r19
     55c:	2e 17       	cp	r18, r30
     55e:	3f 07       	cpc	r19, r31
     560:	d0 f3       	brcs	.-12     	; 0x556 <Endpoint_ConfigureEndpointTable+0x42>
     562:	42 95       	swap	r20
     564:	40 7f       	andi	r20, 0xF0	; 240
     566:	45 2b       	or	r20, r21
     568:	69 2f       	mov	r22, r25
     56a:	66 1f       	adc	r22, r22
     56c:	66 27       	eor	r22, r22
     56e:	66 1f       	adc	r22, r22
     570:	90 e4       	ldi	r25, 0x40	; 64
     572:	79 9f       	mul	r23, r25
     574:	90 01       	movw	r18, r0
     576:	11 24       	eor	r1, r1
     578:	62 2b       	or	r22, r18
     57a:	95 df       	rcall	.-214    	; 0x4a6 <Endpoint_ConfigureEndpoint_Prv>
     57c:	81 11       	cpse	r24, r1
     57e:	d5 cf       	rjmp	.-86     	; 0x52a <Endpoint_ConfigureEndpointTable+0x16>
     580:	df cf       	rjmp	.-66     	; 0x540 <Endpoint_ConfigureEndpointTable+0x2c>
     582:	10 13       	cpse	r17, r16
     584:	cf cf       	rjmp	.-98     	; 0x524 <Endpoint_ConfigureEndpointTable+0x10>
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     592:	80 91 10 02 	lds	r24, 0x0210
     596:	87 fd       	sbrc	r24, 7
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     59a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     59e:	80 ff       	sbrs	r24, 0
     5a0:	0e c0       	rjmp	.+28     	; 0x5be <Endpoint_ClearStatusStage+0x2c>
     5a2:	12 c0       	rjmp	.+36     	; 0x5c8 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5a4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     5a8:	82 fd       	sbrc	r24, 2
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     5ac:	80 91 0f 02 	lds	r24, 0x020F
     5b0:	81 11       	cpse	r24, r1
     5b2:	f8 cf       	rjmp	.-16     	; 0x5a4 <Endpoint_ClearStatusStage+0x12>
     5b4:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5b6:	80 91 e8 00 	lds	r24, 0x00E8
     5ba:	8b 77       	andi	r24, 0x7B	; 123
     5bc:	08 c0       	rjmp	.+16     	; 0x5ce <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     5be:	80 91 0f 02 	lds	r24, 0x020F
     5c2:	81 11       	cpse	r24, r1
     5c4:	ea cf       	rjmp	.-44     	; 0x59a <Endpoint_ClearStatusStage+0x8>
     5c6:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5c8:	80 91 e8 00 	lds	r24, 0x00E8
     5cc:	8e 77       	andi	r24, 0x7E	; 126
     5ce:	80 93 e8 00 	sts	0x00E8, r24
     5d2:	08 95       	ret

000005d4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     5d4:	80 91 e4 00 	lds	r24, 0x00E4
     5d8:	90 91 e5 00 	lds	r25, 0x00E5
     5dc:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     5de:	20 91 ec 00 	lds	r18, 0x00EC
     5e2:	20 fd       	sbrc	r18, 0
     5e4:	1f c0       	rjmp	.+62     	; 0x624 <Endpoint_WaitUntilReady+0x50>
     5e6:	23 c0       	rjmp	.+70     	; 0x62e <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5e8:	20 91 0f 02 	lds	r18, 0x020F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5ec:	22 23       	and	r18, r18
     5ee:	91 f0       	breq	.+36     	; 0x614 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5f0:	25 30       	cpi	r18, 0x05	; 5
     5f2:	91 f0       	breq	.+36     	; 0x618 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     5f4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     5f8:	25 fd       	sbrc	r18, 5
     5fa:	10 c0       	rjmp	.+32     	; 0x61c <Endpoint_WaitUntilReady+0x48>
     5fc:	20 91 e4 00 	lds	r18, 0x00E4
     600:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     604:	28 17       	cp	r18, r24
     606:	39 07       	cpc	r19, r25
     608:	51 f3       	breq	.-44     	; 0x5de <Endpoint_WaitUntilReady+0xa>
     60a:	41 50       	subi	r20, 0x01	; 1
     60c:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     60e:	39 f7       	brne	.-50     	; 0x5de <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     624:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     628:	20 ff       	sbrs	r18, 0
     62a:	de cf       	rjmp	.-68     	; 0x5e8 <Endpoint_WaitUntilReady+0x14>
     62c:	f9 cf       	rjmp	.-14     	; 0x620 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     62e:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     632:	22 ff       	sbrs	r18, 2
     634:	d9 cf       	rjmp	.-78     	; 0x5e8 <Endpoint_WaitUntilReady+0x14>
     636:	f4 cf       	rjmp	.-24     	; 0x620 <Endpoint_WaitUntilReady+0x4c>

00000638 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     640:	4b d0       	rcall	.+150    	; 0x6d8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     642:	52 d0       	rcall	.+164    	; 0x6e8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     644:	c8 ed       	ldi	r28, 0xD8	; 216
     646:	d0 e0       	ldi	r29, 0x00	; 0
     648:	88 81       	ld	r24, Y
     64a:	8f 77       	andi	r24, 0x7F	; 127
     64c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     64e:	88 81       	ld	r24, Y
     650:	80 68       	ori	r24, 0x80	; 128
     652:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     654:	88 81       	ld	r24, Y
     656:	8f 7d       	andi	r24, 0xDF	; 223
     658:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     65a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     65c:	10 92 0f 02 	sts	0x020F, r1
	USB_Device_ConfigurationNumber  = 0;
     660:	10 92 0b 02 	sts	0x020B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     664:	10 92 0d 02 	sts	0x020D, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     668:	10 92 0c 02 	sts	0x020C, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     66c:	00 ee       	ldi	r16, 0xE0	; 224
     66e:	10 e0       	ldi	r17, 0x00	; 0
     670:	f8 01       	movw	r30, r16
     672:	80 81       	ld	r24, Z
     674:	8b 7f       	andi	r24, 0xFB	; 251
     676:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     678:	88 81       	ld	r24, Y
     67a:	81 60       	ori	r24, 0x01	; 1
     67c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     67e:	42 e0       	ldi	r20, 0x02	; 2
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	10 df       	rcall	.-480    	; 0x4a6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     686:	e1 ee       	ldi	r30, 0xE1	; 225
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	8e 7f       	andi	r24, 0xFE	; 254
     68e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     690:	e2 ee       	ldi	r30, 0xE2	; 226
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	81 60       	ori	r24, 0x01	; 1
     698:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     69a:	80 81       	ld	r24, Z
     69c:	88 60       	ori	r24, 0x08	; 8
     69e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     6a0:	f8 01       	movw	r30, r16
     6a2:	80 81       	ld	r24, Z
     6a4:	8e 7f       	andi	r24, 0xFE	; 254
     6a6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     6a8:	88 81       	ld	r24, Y
     6aa:	80 61       	ori	r24, 0x10	; 16
     6ac:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	08 95       	ret

000006b8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     6b8:	e8 ed       	ldi	r30, 0xD8	; 216
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	8f 7e       	andi	r24, 0xEF	; 239
     6c0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     6c2:	e7 ed       	ldi	r30, 0xD7	; 215
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	81 60       	ori	r24, 0x01	; 1
     6ca:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     6cc:	84 e0       	ldi	r24, 0x04	; 4
     6ce:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 0e 02 	sts	0x020E, r24

	USB_ResetInterface();
     6d6:	b0 cf       	rjmp	.-160    	; 0x638 <USB_ResetInterface>

000006d8 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     6d8:	e8 ed       	ldi	r30, 0xD8	; 216
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     6e2:	10 92 e2 00 	sts	0x00E2, r1
     6e6:	08 95       	ret

000006e8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     6e8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     6ec:	10 92 e1 00 	sts	0x00E1, r1
     6f0:	08 95       	ret

000006f2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	2f 93       	push	r18
     6fe:	3f 93       	push	r19
     700:	4f 93       	push	r20
     702:	5f 93       	push	r21
     704:	6f 93       	push	r22
     706:	7f 93       	push	r23
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
     70c:	af 93       	push	r26
     70e:	bf 93       	push	r27
     710:	ef 93       	push	r30
     712:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     714:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     718:	82 ff       	sbrs	r24, 2
     71a:	0a c0       	rjmp	.+20     	; 0x730 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     71c:	80 91 e2 00 	lds	r24, 0x00E2
     720:	82 ff       	sbrs	r24, 2
     722:	06 c0       	rjmp	.+12     	; 0x730 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     724:	80 91 e1 00 	lds	r24, 0x00E1
     728:	8b 7f       	andi	r24, 0xFB	; 251
     72a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     72e:	58 d2       	rcall	.+1200   	; 0xbe0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     730:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     734:	80 ff       	sbrs	r24, 0
     736:	1d c0       	rjmp	.+58     	; 0x772 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     738:	80 91 d8 00 	lds	r24, 0x00D8
     73c:	80 ff       	sbrs	r24, 0
     73e:	19 c0       	rjmp	.+50     	; 0x772 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     740:	80 91 da 00 	lds	r24, 0x00DA
     744:	8e 7f       	andi	r24, 0xFE	; 254
     746:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     74a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     74e:	80 ff       	sbrs	r24, 0
     750:	0c c0       	rjmp	.+24     	; 0x76a <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     752:	80 e1       	ldi	r24, 0x10	; 16
     754:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     756:	82 e1       	ldi	r24, 0x12	; 18
     758:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     75a:	09 b4       	in	r0, 0x29	; 41
     75c:	00 fe       	sbrs	r0, 0
     75e:	fd cf       	rjmp	.-6      	; 0x75a <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	80 93 0f 02 	sts	0x020F, r24
			EVENT_USB_Device_Connect();
     766:	11 dd       	rcall	.-1502   	; 0x18a <EVENT_USB_Device_Connect>
     768:	04 c0       	rjmp	.+8      	; 0x772 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     76a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     76c:	10 92 0f 02 	sts	0x020F, r1
			EVENT_USB_Device_Disconnect();
     770:	0d dd       	rcall	.-1510   	; 0x18c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     772:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     776:	80 ff       	sbrs	r24, 0
     778:	18 c0       	rjmp	.+48     	; 0x7aa <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     77a:	80 91 e2 00 	lds	r24, 0x00E2
     77e:	80 ff       	sbrs	r24, 0
     780:	14 c0       	rjmp	.+40     	; 0x7aa <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     782:	80 91 e2 00 	lds	r24, 0x00E2
     786:	8e 7f       	andi	r24, 0xFE	; 254
     788:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     78c:	80 91 e2 00 	lds	r24, 0x00E2
     790:	80 61       	ori	r24, 0x10	; 16
     792:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     796:	80 91 d8 00 	lds	r24, 0x00D8
     79a:	80 62       	ori	r24, 0x20	; 32
     79c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7a0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     7a2:	85 e0       	ldi	r24, 0x05	; 5
     7a4:	80 93 0f 02 	sts	0x020F, r24
		EVENT_USB_Device_Suspend();
     7a8:	1b d2       	rcall	.+1078   	; 0xbe0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     7aa:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     7ae:	84 ff       	sbrs	r24, 4
     7b0:	2f c0       	rjmp	.+94     	; 0x810 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     7b2:	80 91 e2 00 	lds	r24, 0x00E2
     7b6:	84 ff       	sbrs	r24, 4
     7b8:	2b c0       	rjmp	.+86     	; 0x810 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     7ba:	80 e1       	ldi	r24, 0x10	; 16
     7bc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     7be:	82 e1       	ldi	r24, 0x12	; 18
     7c0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     7c2:	09 b4       	in	r0, 0x29	; 41
     7c4:	00 fe       	sbrs	r0, 0
     7c6:	fd cf       	rjmp	.-6      	; 0x7c2 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7c8:	80 91 d8 00 	lds	r24, 0x00D8
     7cc:	8f 7d       	andi	r24, 0xDF	; 223
     7ce:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     7d2:	80 91 e1 00 	lds	r24, 0x00E1
     7d6:	8f 7e       	andi	r24, 0xEF	; 239
     7d8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     7dc:	80 91 e2 00 	lds	r24, 0x00E2
     7e0:	8f 7e       	andi	r24, 0xEF	; 239
     7e2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7e6:	80 91 e2 00 	lds	r24, 0x00E2
     7ea:	81 60       	ori	r24, 0x01	; 1
     7ec:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     7f0:	80 91 0b 02 	lds	r24, 0x020B
     7f4:	88 23       	and	r24, r24
     7f6:	11 f0       	breq	.+4      	; 0x7fc <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     7f8:	84 e0       	ldi	r24, 0x04	; 4
     7fa:	07 c0       	rjmp	.+14     	; 0x80a <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     7fc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     800:	87 ff       	sbrs	r24, 7
     802:	02 c0       	rjmp	.+4      	; 0x808 <__vector_10+0x116>
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	01 c0       	rjmp	.+2      	; 0x80a <__vector_10+0x118>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 0f 02 	sts	0x020F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     80e:	e8 d1       	rcall	.+976    	; 0xbe0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     810:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     814:	83 ff       	sbrs	r24, 3
     816:	27 c0       	rjmp	.+78     	; 0x866 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     818:	80 91 e2 00 	lds	r24, 0x00E2
     81c:	83 ff       	sbrs	r24, 3
     81e:	23 c0       	rjmp	.+70     	; 0x866 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     820:	80 91 e1 00 	lds	r24, 0x00E1
     824:	87 7f       	andi	r24, 0xF7	; 247
     826:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	80 93 0f 02 	sts	0x020F, r24
		USB_Device_ConfigurationNumber = 0;
     830:	10 92 0b 02 	sts	0x020B, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     834:	80 91 e1 00 	lds	r24, 0x00E1
     838:	8e 7f       	andi	r24, 0xFE	; 254
     83a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     83e:	80 91 e2 00 	lds	r24, 0x00E2
     842:	8e 7f       	andi	r24, 0xFE	; 254
     844:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     848:	80 91 e2 00 	lds	r24, 0x00E2
     84c:	80 61       	ori	r24, 0x10	; 16
     84e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     852:	42 e0       	ldi	r20, 0x02	; 2
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	26 de       	rcall	.-948    	; 0x4a6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     85a:	80 91 f0 00 	lds	r24, 0x00F0
     85e:	88 60       	ori	r24, 0x08	; 8
     860:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     864:	bd d1       	rcall	.+890    	; 0xbe0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     866:	ff 91       	pop	r31
     868:	ef 91       	pop	r30
     86a:	bf 91       	pop	r27
     86c:	af 91       	pop	r26
     86e:	9f 91       	pop	r25
     870:	8f 91       	pop	r24
     872:	7f 91       	pop	r23
     874:	6f 91       	pop	r22
     876:	5f 91       	pop	r21
     878:	4f 91       	pop	r20
     87a:	3f 91       	pop	r19
     87c:	2f 91       	pop	r18
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1
     892:	2f 93       	push	r18
     894:	3f 93       	push	r19
     896:	4f 93       	push	r20
     898:	5f 93       	push	r21
     89a:	6f 93       	push	r22
     89c:	7f 93       	push	r23
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	af 93       	push	r26
     8a4:	bf 93       	push	r27
     8a6:	cf 93       	push	r28
     8a8:	ef 93       	push	r30
     8aa:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     8ac:	80 91 e9 00 	lds	r24, 0x00E9
     8b0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     8b2:	90 91 ec 00 	lds	r25, 0x00EC
     8b6:	90 ff       	sbrs	r25, 0
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <__vector_11+0x36>
     8ba:	90 e8       	ldi	r25, 0x80	; 128
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__vector_11+0x38>
     8be:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     8c0:	c9 2f       	mov	r28, r25
     8c2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8c4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     8c8:	80 91 f0 00 	lds	r24, 0x00F0
     8cc:	87 7f       	andi	r24, 0xF7	; 247
     8ce:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     8d2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     8d4:	1c d0       	rcall	.+56     	; 0x90e <USB_Device_ProcessControlRequest>
     8d6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     8da:	80 91 f0 00 	lds	r24, 0x00F0
     8de:	88 60       	ori	r24, 0x08	; 8
     8e0:	80 93 f0 00 	sts	0x00F0, r24
     8e4:	cf 70       	andi	r28, 0x0F	; 15
     8e6:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	cf 91       	pop	r28
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	7f 91       	pop	r23
     8fa:	6f 91       	pop	r22
     8fc:	5f 91       	pop	r21
     8fe:	4f 91       	pop	r20
     900:	3f 91       	pop	r19
     902:	2f 91       	pop	r18
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	0f 90       	pop	r0
     90a:	1f 90       	pop	r1
     90c:	18 95       	reti

0000090e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	ac 97       	sbiw	r28, 0x2c	; 44
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     924:	e0 e1       	ldi	r30, 0x10	; 16
     926:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     928:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     92c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     92e:	22 e0       	ldi	r18, 0x02	; 2
     930:	e8 31       	cpi	r30, 0x18	; 24
     932:	f2 07       	cpc	r31, r18
     934:	c9 f7       	brne	.-14     	; 0x928 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     936:	2e dc       	rcall	.-1956   	; 0x194 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     938:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     93c:	83 ff       	sbrs	r24, 3
     93e:	38 c1       	rjmp	.+624    	; 0xbb0 <__stack+0xb1>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     940:	80 91 10 02 	lds	r24, 0x0210

		switch (USB_ControlRequest.bRequest)
     944:	90 91 11 02 	lds	r25, 0x0211
     948:	95 30       	cpi	r25, 0x05	; 5
     94a:	09 f4       	brne	.+2      	; 0x94e <USB_Device_ProcessControlRequest+0x40>
     94c:	89 c0       	rjmp	.+274    	; 0xa60 <USB_Device_ProcessControlRequest+0x152>
     94e:	38 f4       	brcc	.+14     	; 0x95e <USB_Device_ProcessControlRequest+0x50>
     950:	91 30       	cpi	r25, 0x01	; 1
     952:	c9 f1       	breq	.+114    	; 0x9c6 <USB_Device_ProcessControlRequest+0xb8>
     954:	70 f0       	brcs	.+28     	; 0x972 <USB_Device_ProcessControlRequest+0x64>
     956:	93 30       	cpi	r25, 0x03	; 3
     958:	09 f0       	breq	.+2      	; 0x95c <USB_Device_ProcessControlRequest+0x4e>
     95a:	2a c1       	rjmp	.+596    	; 0xbb0 <__stack+0xb1>
     95c:	34 c0       	rjmp	.+104    	; 0x9c6 <USB_Device_ProcessControlRequest+0xb8>
     95e:	98 30       	cpi	r25, 0x08	; 8
     960:	09 f4       	brne	.+2      	; 0x964 <USB_Device_ProcessControlRequest+0x56>
     962:	f8 c0       	rjmp	.+496    	; 0xb54 <__stack+0x55>
     964:	99 30       	cpi	r25, 0x09	; 9
     966:	09 f4       	brne	.+2      	; 0x96a <USB_Device_ProcessControlRequest+0x5c>
     968:	07 c1       	rjmp	.+526    	; 0xb78 <__stack+0x79>
     96a:	96 30       	cpi	r25, 0x06	; 6
     96c:	09 f0       	breq	.+2      	; 0x970 <USB_Device_ProcessControlRequest+0x62>
     96e:	20 c1       	rjmp	.+576    	; 0xbb0 <__stack+0xb1>
     970:	9d c0       	rjmp	.+314    	; 0xaac <USB_Device_ProcessControlRequest+0x19e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     972:	80 38       	cpi	r24, 0x80	; 128
     974:	21 f0       	breq	.+8      	; 0x97e <USB_Device_ProcessControlRequest+0x70>
     976:	82 38       	cpi	r24, 0x82	; 130
     978:	09 f0       	breq	.+2      	; 0x97c <USB_Device_ProcessControlRequest+0x6e>
     97a:	1a c1       	rjmp	.+564    	; 0xbb0 <__stack+0xb1>
     97c:	08 c0       	rjmp	.+16     	; 0x98e <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     97e:	80 91 0c 02 	lds	r24, 0x020C
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     982:	90 91 0d 02 	lds	r25, 0x020D
     986:	99 23       	and	r25, r25
     988:	a1 f0       	breq	.+40     	; 0x9b2 <USB_Device_ProcessControlRequest+0xa4>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <USB_Device_ProcessControlRequest+0xa4>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     98e:	80 91 14 02 	lds	r24, 0x0214
     992:	90 91 15 02 	lds	r25, 0x0215
     996:	8f 70       	andi	r24, 0x0F	; 15
     998:	99 27       	eor	r25, r25

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     99a:	87 30       	cpi	r24, 0x07	; 7
     99c:	08 f0       	brcs	.+2      	; 0x9a0 <USB_Device_ProcessControlRequest+0x92>
     99e:	08 c1       	rjmp	.+528    	; 0xbb0 <__stack+0xb1>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9a0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9a4:	80 91 eb 00 	lds	r24, 0x00EB
     9a8:	85 fb       	bst	r24, 5
     9aa:	88 27       	eor	r24, r24
     9ac:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9ae:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9b2:	90 91 e8 00 	lds	r25, 0x00E8
     9b6:	97 7f       	andi	r25, 0xF7	; 247
     9b8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9bc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     9c0:	10 92 f1 00 	sts	0x00F1, r1
     9c4:	d2 c0       	rjmp	.+420    	; 0xb6a <__stack+0x6b>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9c6:	88 23       	and	r24, r24
     9c8:	19 f0       	breq	.+6      	; 0x9d0 <USB_Device_ProcessControlRequest+0xc2>
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <USB_Device_ProcessControlRequest+0xc2>
     9ce:	f0 c0       	rjmp	.+480    	; 0xbb0 <__stack+0xb1>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     9d0:	8f 71       	andi	r24, 0x1F	; 31
     9d2:	21 f0       	breq	.+8      	; 0x9dc <USB_Device_ProcessControlRequest+0xce>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	09 f0       	breq	.+2      	; 0x9da <USB_Device_ProcessControlRequest+0xcc>
     9d8:	eb c0       	rjmp	.+470    	; 0xbb0 <__stack+0xb1>
     9da:	0b c0       	rjmp	.+22     	; 0x9f2 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     9dc:	80 91 12 02 	lds	r24, 0x0212
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	09 f0       	breq	.+2      	; 0x9e6 <USB_Device_ProcessControlRequest+0xd8>
     9e4:	e5 c0       	rjmp	.+458    	; 0xbb0 <__stack+0xb1>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     9e6:	93 30       	cpi	r25, 0x03	; 3
     9e8:	09 f0       	breq	.+2      	; 0x9ec <USB_Device_ProcessControlRequest+0xde>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	80 93 0d 02 	sts	0x020D, r24
     9f0:	31 c0       	rjmp	.+98     	; 0xa54 <USB_Device_ProcessControlRequest+0x146>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     9f2:	80 91 12 02 	lds	r24, 0x0212
     9f6:	81 11       	cpse	r24, r1
     9f8:	2d c0       	rjmp	.+90     	; 0xa54 <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     9fa:	80 91 14 02 	lds	r24, 0x0214
     9fe:	90 91 15 02 	lds	r25, 0x0215
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a06:	28 2f       	mov	r18, r24
     a08:	21 50       	subi	r18, 0x01	; 1
     a0a:	26 30       	cpi	r18, 0x06	; 6
     a0c:	08 f0       	brcs	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x102>
     a0e:	d0 c0       	rjmp	.+416    	; 0xbb0 <__stack+0xb1>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a10:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a14:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a18:	20 ff       	sbrs	r18, 0
     a1a:	1c c0       	rjmp	.+56     	; 0xa54 <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a1c:	20 91 11 02 	lds	r18, 0x0211
     a20:	23 30       	cpi	r18, 0x03	; 3
     a22:	21 f4       	brne	.+8      	; 0xa2c <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a24:	80 91 eb 00 	lds	r24, 0x00EB
     a28:	80 62       	ori	r24, 0x20	; 32
     a2a:	12 c0       	rjmp	.+36     	; 0xa50 <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a2c:	90 91 eb 00 	lds	r25, 0x00EB
     a30:	90 61       	ori	r25, 0x10	; 16
     a32:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a36:	21 e0       	ldi	r18, 0x01	; 1
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <USB_Device_ProcessControlRequest+0x130>
     a3c:	22 0f       	add	r18, r18
     a3e:	8a 95       	dec	r24
     a40:	ea f7       	brpl	.-6      	; 0xa3c <USB_Device_ProcessControlRequest+0x12e>
     a42:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
     a46:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a4a:	80 91 eb 00 	lds	r24, 0x00EB
     a4e:	88 60       	ori	r24, 0x08	; 8
     a50:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a54:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a58:	80 91 e8 00 	lds	r24, 0x00E8
     a5c:	87 7f       	andi	r24, 0xF7	; 247
     a5e:	88 c0       	rjmp	.+272    	; 0xb70 <__stack+0x71>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a60:	81 11       	cpse	r24, r1
     a62:	a6 c0       	rjmp	.+332    	; 0xbb0 <__stack+0xb1>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     a64:	80 91 12 02 	lds	r24, 0x0212
     a68:	90 91 13 02 	lds	r25, 0x0213
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	99 27       	eor	r25, r25
     a70:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     a72:	90 91 e3 00 	lds	r25, 0x00E3
     a76:	90 78       	andi	r25, 0x80	; 128
     a78:	98 2b       	or	r25, r24
     a7a:	90 93 e3 00 	sts	0x00E3, r25
     a7e:	80 91 e8 00 	lds	r24, 0x00E8
     a82:	87 7f       	andi	r24, 0xF7	; 247
     a84:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     a88:	84 dd       	rcall	.-1272   	; 0x592 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a8a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     a8e:	80 ff       	sbrs	r24, 0
     a90:	fc cf       	rjmp	.-8      	; 0xa8a <USB_Device_ProcessControlRequest+0x17c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     a92:	80 91 e3 00 	lds	r24, 0x00E3
     a96:	80 68       	ori	r24, 0x80	; 128
     a98:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     a9c:	11 23       	and	r17, r17
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <USB_Device_ProcessControlRequest+0x196>
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x198>
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	80 93 0f 02 	sts	0x020F, r24
     aaa:	82 c0       	rjmp	.+260    	; 0xbb0 <__stack+0xb1>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     aac:	80 58       	subi	r24, 0x80	; 128
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0x1a6>
     ab2:	7e c0       	rjmp	.+252    	; 0xbb0 <__stack+0xb1>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ab4:	80 91 12 02 	lds	r24, 0x0212
     ab8:	90 91 13 02 	lds	r25, 0x0213
     abc:	8c 3d       	cpi	r24, 0xDC	; 220
     abe:	23 e0       	ldi	r18, 0x03	; 3
     ac0:	92 07       	cpc	r25, r18
     ac2:	71 f5       	brne	.+92     	; 0xb20 <__stack+0x21>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ac8:	8a e2       	ldi	r24, 0x2A	; 42
     aca:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     acc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ace:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     ad0:	de 01       	movw	r26, r28
     ad2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ad4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     ad6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ad8:	51 e2       	ldi	r21, 0x21	; 33
     ada:	e3 2f       	mov	r30, r19
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	50 93 57 00 	sts	0x0057, r21
     ae2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     ae4:	20 ff       	sbrs	r18, 0
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <USB_Device_ProcessControlRequest+0x1e0>
					{
						SerialByte >>= 4;
     ae8:	e2 95       	swap	r30
     aea:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     aec:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     aee:	ef 70       	andi	r30, 0x0F	; 15
     af0:	8e 2f       	mov	r24, r30
     af2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     af4:	ea 30       	cpi	r30, 0x0A	; 10
     af6:	10 f0       	brcs	.+4      	; 0xafc <USB_Device_ProcessControlRequest+0x1ee>
     af8:	c7 96       	adiw	r24, 0x37	; 55
     afa:	01 c0       	rjmp	.+2      	; 0xafe <USB_Device_ProcessControlRequest+0x1f0>
     afc:	c0 96       	adiw	r24, 0x30	; 48
     afe:	8d 93       	st	X+, r24
     b00:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b02:	2f 5f       	subi	r18, 0xFF	; 255
     b04:	24 31       	cpi	r18, 0x14	; 20
     b06:	49 f7       	brne	.-46     	; 0xada <USB_Device_ProcessControlRequest+0x1cc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b08:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b0a:	80 91 e8 00 	lds	r24, 0x00E8
     b0e:	87 7f       	andi	r24, 0xF7	; 247
     b10:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b14:	6a e2       	ldi	r22, 0x2A	; 42
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	fd db       	rcall	.-2054   	; 0x318 <Endpoint_Write_Control_Stream_LE>
     b1e:	14 c0       	rjmp	.+40     	; 0xb48 <__stack+0x49>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b20:	60 91 14 02 	lds	r22, 0x0214
     b24:	70 91 15 02 	lds	r23, 0x0215
     b28:	ae 01       	movw	r20, r28
     b2a:	45 5d       	subi	r20, 0xD5	; 213
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	b7 db       	rcall	.-2194   	; 0x29e <CALLBACK_USB_GetDescriptor>
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	09 f4       	brne	.+2      	; 0xb36 <__stack+0x37>
     b34:	3d c0       	rjmp	.+122    	; 0xbb0 <__stack+0xb1>
     b36:	20 91 e8 00 	lds	r18, 0x00E8
     b3a:	27 7f       	andi	r18, 0xF7	; 247
     b3c:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b40:	bc 01       	movw	r22, r24
     b42:	8b a5       	ldd	r24, Y+43	; 0x2b
     b44:	9c a5       	ldd	r25, Y+44	; 0x2c
     b46:	4b dc       	rcall	.-1898   	; 0x3de <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b48:	80 91 e8 00 	lds	r24, 0x00E8
     b4c:	8b 77       	andi	r24, 0x7B	; 123
     b4e:	80 93 e8 00 	sts	0x00E8, r24
     b52:	2e c0       	rjmp	.+92     	; 0xbb0 <__stack+0xb1>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b54:	80 38       	cpi	r24, 0x80	; 128
     b56:	61 f5       	brne	.+88     	; 0xbb0 <__stack+0xb1>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b58:	80 91 e8 00 	lds	r24, 0x00E8
     b5c:	87 7f       	andi	r24, 0xF7	; 247
     b5e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b62:	80 91 0b 02 	lds	r24, 0x020B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b66:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b6a:	80 91 e8 00 	lds	r24, 0x00E8
     b6e:	8e 77       	andi	r24, 0x7E	; 126
     b70:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     b74:	0e dd       	rcall	.-1508   	; 0x592 <Endpoint_ClearStatusStage>
     b76:	1c c0       	rjmp	.+56     	; 0xbb0 <__stack+0xb1>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b78:	81 11       	cpse	r24, r1
     b7a:	1a c0       	rjmp	.+52     	; 0xbb0 <__stack+0xb1>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     b7c:	90 91 12 02 	lds	r25, 0x0212
     b80:	92 30       	cpi	r25, 0x02	; 2
     b82:	b0 f4       	brcc	.+44     	; 0xbb0 <__stack+0xb1>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b84:	80 91 e8 00 	lds	r24, 0x00E8
     b88:	87 7f       	andi	r24, 0xF7	; 247
     b8a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     b8e:	90 93 0b 02 	sts	0x020B, r25

	Endpoint_ClearStatusStage();
     b92:	ff dc       	rcall	.-1538   	; 0x592 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     b94:	80 91 0b 02 	lds	r24, 0x020B
     b98:	81 11       	cpse	r24, r1
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__stack+0xa5>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b9c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ba0:	87 ff       	sbrs	r24, 7
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <__stack+0xa9>
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <__stack+0xab>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 0f 02 	sts	0x020F, r24

	EVENT_USB_Device_ConfigurationChanged();
     bae:	ef da       	rcall	.-2594   	; 0x18e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bb0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     bb4:	83 ff       	sbrs	r24, 3
     bb6:	0a c0       	rjmp	.+20     	; 0xbcc <__stack+0xcd>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bb8:	80 91 e8 00 	lds	r24, 0x00E8
     bbc:	87 7f       	andi	r24, 0xF7	; 247
     bbe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bc2:	80 91 eb 00 	lds	r24, 0x00EB
     bc6:	80 62       	ori	r24, 0x20	; 32
     bc8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     bcc:	ac 96       	adiw	r28, 0x2c	; 44
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     be0:	08 95       	ret

00000be2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     be2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     be4:	80 91 0f 02 	lds	r24, 0x020F
     be8:	88 23       	and	r24, r24
     bea:	a9 f0       	breq	.+42     	; 0xc16 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bec:	80 91 e9 00 	lds	r24, 0x00E9
     bf0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bf2:	90 91 ec 00 	lds	r25, 0x00EC
     bf6:	90 ff       	sbrs	r25, 0
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <USB_USBTask+0x1c>
     bfa:	90 e8       	ldi	r25, 0x80	; 128
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <USB_USBTask+0x1e>
     bfe:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c00:	c9 2f       	mov	r28, r25
     c02:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c04:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c08:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c0c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c0e:	7f de       	rcall	.-770    	; 0x90e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c10:	cf 70       	andi	r28, 0x0F	; 15
     c12:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
     c20:	40 96       	adiw	r24, 0x10	; 16
     c22:	fc 01       	movw	r30, r24
     c24:	8b e0       	ldi	r24, 0x0B	; 11
     c26:	df 01       	movw	r26, r30
     c28:	1d 92       	st	X+, r1
     c2a:	8a 95       	dec	r24
     c2c:	e9 f7       	brne	.-6      	; 0xc28 <CDC_Device_ConfigureEndpoints+0xe>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	8c 83       	std	Y+4, r24	; 0x04
     c32:	89 87       	std	Y+9, r24	; 0x09
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	8e 87       	std	Y+14, r24	; 0x0e
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	ce 01       	movw	r24, r28
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	6a dc       	rcall	.-1836   	; 0x514 <Endpoint_ConfigureEndpointTable>
     c40:	88 23       	and	r24, r24
     c42:	61 f0       	breq	.+24     	; 0xc5c <CDC_Device_ConfigureEndpoints+0x42>
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	ce 01       	movw	r24, r28
     c48:	06 96       	adiw	r24, 0x06	; 6
     c4a:	64 dc       	rcall	.-1848   	; 0x514 <Endpoint_ConfigureEndpointTable>
     c4c:	88 23       	and	r24, r24
     c4e:	31 f0       	breq	.+12     	; 0xc5c <CDC_Device_ConfigureEndpoints+0x42>
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	ce 01       	movw	r24, r28
     c54:	0b 96       	adiw	r24, 0x0b	; 11
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	5c cc       	rjmp	.-1864   	; 0x514 <Endpoint_ConfigureEndpointTable>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <CDC_Device_SendByte>:
     c64:	cf 93       	push	r28
     c66:	c6 2f       	mov	r28, r22
     c68:	20 91 0f 02 	lds	r18, 0x020F
     c6c:	24 30       	cpi	r18, 0x04	; 4
     c6e:	f1 f4       	brne	.+60     	; 0xcac <CDC_Device_SendByte+0x48>
     c70:	fc 01       	movw	r30, r24
     c72:	44 89       	ldd	r20, Z+20	; 0x14
     c74:	55 89       	ldd	r21, Z+21	; 0x15
     c76:	66 89       	ldd	r22, Z+22	; 0x16
     c78:	77 89       	ldd	r23, Z+23	; 0x17
     c7a:	45 2b       	or	r20, r21
     c7c:	46 2b       	or	r20, r22
     c7e:	47 2b       	or	r20, r23
     c80:	a9 f0       	breq	.+42     	; 0xcac <CDC_Device_SendByte+0x48>
     c82:	81 81       	ldd	r24, Z+1	; 0x01
     c84:	8f 70       	andi	r24, 0x0F	; 15
     c86:	80 93 e9 00 	sts	0x00E9, r24
     c8a:	80 91 e8 00 	lds	r24, 0x00E8
     c8e:	85 ff       	sbrs	r24, 5
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <CDC_Device_SendByte+0x36>
     c92:	c0 93 f1 00 	sts	0x00F1, r28
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0a c0       	rjmp	.+20     	; 0xcae <CDC_Device_SendByte+0x4a>
     c9a:	80 91 e8 00 	lds	r24, 0x00E8
     c9e:	8e 77       	andi	r24, 0x7E	; 126
     ca0:	80 93 e8 00 	sts	0x00E8, r24
     ca4:	97 dc       	rcall	.-1746   	; 0x5d4 <Endpoint_WaitUntilReady>
     ca6:	88 23       	and	r24, r24
     ca8:	a1 f3       	breq	.-24     	; 0xc92 <CDC_Device_SendByte+0x2e>
     caa:	01 c0       	rjmp	.+2      	; 0xcae <CDC_Device_SendByte+0x4a>
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <CDC_Device_putchar>:
     cb2:	fb 01       	movw	r30, r22
     cb4:	68 2f       	mov	r22, r24
     cb6:	84 85       	ldd	r24, Z+12	; 0x0c
     cb8:	95 85       	ldd	r25, Z+13	; 0x0d
     cba:	d4 df       	rcall	.-88     	; 0xc64 <CDC_Device_SendByte>
     cbc:	88 23       	and	r24, r24
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <CDC_Device_putchar+0x14>
     cc0:	2f ef       	ldi	r18, 0xFF	; 255
     cc2:	3f ef       	ldi	r19, 0xFF	; 255
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <CDC_Device_putchar+0x18>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	c9 01       	movw	r24, r18
     ccc:	08 95       	ret

00000cce <CDC_Device_Flush>:
     cce:	20 91 0f 02 	lds	r18, 0x020F
     cd2:	24 30       	cpi	r18, 0x04	; 4
     cd4:	51 f5       	brne	.+84     	; 0xd2a <CDC_Device_Flush+0x5c>
     cd6:	fc 01       	movw	r30, r24
     cd8:	44 89       	ldd	r20, Z+20	; 0x14
     cda:	55 89       	ldd	r21, Z+21	; 0x15
     cdc:	66 89       	ldd	r22, Z+22	; 0x16
     cde:	77 89       	ldd	r23, Z+23	; 0x17
     ce0:	45 2b       	or	r20, r21
     ce2:	46 2b       	or	r20, r22
     ce4:	47 2b       	or	r20, r23
     ce6:	09 f1       	breq	.+66     	; 0xd2a <CDC_Device_Flush+0x5c>
     ce8:	81 81       	ldd	r24, Z+1	; 0x01
     cea:	8f 70       	andi	r24, 0x0F	; 15
     cec:	80 93 e9 00 	sts	0x00E9, r24
     cf0:	30 91 f3 00 	lds	r19, 0x00F3
     cf4:	20 91 f2 00 	lds	r18, 0x00F2
     cf8:	93 2f       	mov	r25, r19
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	82 2b       	or	r24, r18
     cfe:	89 2b       	or	r24, r25
     d00:	11 f4       	brne	.+4      	; 0xd06 <CDC_Device_Flush+0x38>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	08 95       	ret
     d06:	90 91 e8 00 	lds	r25, 0x00E8
     d0a:	80 91 e8 00 	lds	r24, 0x00E8
     d0e:	8e 77       	andi	r24, 0x7E	; 126
     d10:	80 93 e8 00 	sts	0x00E8, r24
     d14:	95 fd       	sbrc	r25, 5
     d16:	f5 cf       	rjmp	.-22     	; 0xd02 <CDC_Device_Flush+0x34>
     d18:	5d dc       	rcall	.-1862   	; 0x5d4 <Endpoint_WaitUntilReady>
     d1a:	81 11       	cpse	r24, r1
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <CDC_Device_Flush+0x5e>
     d1e:	90 91 e8 00 	lds	r25, 0x00E8
     d22:	9e 77       	andi	r25, 0x7E	; 126
     d24:	90 93 e8 00 	sts	0x00E8, r25
     d28:	08 95       	ret
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	08 95       	ret

00000d2e <CDC_Device_USBTask>:
     d2e:	20 91 0f 02 	lds	r18, 0x020F
     d32:	24 30       	cpi	r18, 0x04	; 4
     d34:	89 f4       	brne	.+34     	; 0xd58 <CDC_Device_USBTask+0x2a>
     d36:	fc 01       	movw	r30, r24
     d38:	44 89       	ldd	r20, Z+20	; 0x14
     d3a:	55 89       	ldd	r21, Z+21	; 0x15
     d3c:	66 89       	ldd	r22, Z+22	; 0x16
     d3e:	77 89       	ldd	r23, Z+23	; 0x17
     d40:	45 2b       	or	r20, r21
     d42:	46 2b       	or	r20, r22
     d44:	47 2b       	or	r20, r23
     d46:	41 f0       	breq	.+16     	; 0xd58 <CDC_Device_USBTask+0x2a>
     d48:	21 81       	ldd	r18, Z+1	; 0x01
     d4a:	2f 70       	andi	r18, 0x0F	; 15
     d4c:	20 93 e9 00 	sts	0x00E9, r18
     d50:	20 91 e8 00 	lds	r18, 0x00E8
     d54:	20 fd       	sbrc	r18, 0
     d56:	bb cf       	rjmp	.-138    	; 0xcce <CDC_Device_Flush>
     d58:	08 95       	ret

00000d5a <CDC_Device_ReceiveByte>:
     d5a:	20 91 0f 02 	lds	r18, 0x020F
     d5e:	24 30       	cpi	r18, 0x04	; 4
     d60:	19 f0       	breq	.+6      	; 0xd68 <CDC_Device_ReceiveByte+0xe>
     d62:	2f ef       	ldi	r18, 0xFF	; 255
     d64:	3f ef       	ldi	r19, 0xFF	; 255
     d66:	2e c0       	rjmp	.+92     	; 0xdc4 <CDC_Device_ReceiveByte+0x6a>
     d68:	fc 01       	movw	r30, r24
     d6a:	44 89       	ldd	r20, Z+20	; 0x14
     d6c:	55 89       	ldd	r21, Z+21	; 0x15
     d6e:	66 89       	ldd	r22, Z+22	; 0x16
     d70:	77 89       	ldd	r23, Z+23	; 0x17
     d72:	45 2b       	or	r20, r21
     d74:	46 2b       	or	r20, r22
     d76:	47 2b       	or	r20, r23
     d78:	a1 f3       	breq	.-24     	; 0xd62 <CDC_Device_ReceiveByte+0x8>
     d7a:	86 81       	ldd	r24, Z+6	; 0x06
     d7c:	8f 70       	andi	r24, 0x0F	; 15
     d7e:	80 93 e9 00 	sts	0x00E9, r24
     d82:	80 91 e8 00 	lds	r24, 0x00E8
     d86:	82 ff       	sbrs	r24, 2
     d88:	ec cf       	rjmp	.-40     	; 0xd62 <CDC_Device_ReceiveByte+0x8>
     d8a:	30 91 f3 00 	lds	r19, 0x00F3
     d8e:	20 91 f2 00 	lds	r18, 0x00F2
     d92:	93 2f       	mov	r25, r19
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	82 2b       	or	r24, r18
     d98:	89 2b       	or	r24, r25
     d9a:	21 f0       	breq	.+8      	; 0xda4 <CDC_Device_ReceiveByte+0x4a>
     d9c:	20 91 f1 00 	lds	r18, 0x00F1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <CDC_Device_ReceiveByte+0x4e>
     da4:	2f ef       	ldi	r18, 0xFF	; 255
     da6:	3f ef       	ldi	r19, 0xFF	; 255
     da8:	50 91 f3 00 	lds	r21, 0x00F3
     dac:	40 91 f2 00 	lds	r20, 0x00F2
     db0:	95 2f       	mov	r25, r21
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	84 2b       	or	r24, r20
     db6:	89 2b       	or	r24, r25
     db8:	29 f4       	brne	.+10     	; 0xdc4 <CDC_Device_ReceiveByte+0x6a>
     dba:	80 91 e8 00 	lds	r24, 0x00E8
     dbe:	8b 77       	andi	r24, 0x7B	; 123
     dc0:	80 93 e8 00 	sts	0x00E8, r24
     dc4:	c9 01       	movw	r24, r18
     dc6:	08 95       	ret

00000dc8 <CDC_Device_getchar>:
     dc8:	fc 01       	movw	r30, r24
     dca:	84 85       	ldd	r24, Z+12	; 0x0c
     dcc:	95 85       	ldd	r25, Z+13	; 0x0d
     dce:	c5 df       	rcall	.-118    	; 0xd5a <CDC_Device_ReceiveByte>
     dd0:	9c 01       	movw	r18, r24
     dd2:	97 ff       	sbrs	r25, 7
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <CDC_Device_getchar+0x12>
     dd6:	2e ef       	ldi	r18, 0xFE	; 254
     dd8:	3f ef       	ldi	r19, 0xFF	; 255
     dda:	c9 01       	movw	r24, r18
     ddc:	08 95       	ret

00000dde <CDC_Device_CreateStream>:
     dde:	fb 01       	movw	r30, r22
     de0:	2e e0       	ldi	r18, 0x0E	; 14
     de2:	db 01       	movw	r26, r22
     de4:	1d 92       	st	X+, r1
     de6:	2a 95       	dec	r18
     de8:	e9 f7       	brne	.-6      	; 0xde4 <CDC_Device_CreateStream+0x6>
     dea:	23 e0       	ldi	r18, 0x03	; 3
     dec:	23 83       	std	Z+3, r18	; 0x03
     dee:	29 e5       	ldi	r18, 0x59	; 89
     df0:	36 e0       	ldi	r19, 0x06	; 6
     df2:	31 87       	std	Z+9, r19	; 0x09
     df4:	20 87       	std	Z+8, r18	; 0x08
     df6:	24 ee       	ldi	r18, 0xE4	; 228
     df8:	36 e0       	ldi	r19, 0x06	; 6
     dfa:	33 87       	std	Z+11, r19	; 0x0b
     dfc:	22 87       	std	Z+10, r18	; 0x0a
     dfe:	95 87       	std	Z+13, r25	; 0x0d
     e00:	84 87       	std	Z+12, r24	; 0x0c
     e02:	08 95       	ret

00000e04 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     e04:	08 95       	ret

00000e06 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e0c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e10:	83 ff       	sbrs	r24, 3
     e12:	a7 c0       	rjmp	.+334    	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e14:	88 81       	ld	r24, Y
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	20 91 14 02 	lds	r18, 0x0214
     e1c:	30 91 15 02 	lds	r19, 0x0215
     e20:	28 17       	cp	r18, r24
     e22:	39 07       	cpc	r19, r25
     e24:	09 f0       	breq	.+2      	; 0xe28 <CDC_Device_ProcessControlRequest+0x22>
     e26:	9d c0       	rjmp	.+314    	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
     e28:	80 91 11 02 	lds	r24, 0x0211
     e2c:	81 32       	cpi	r24, 0x21	; 33
     e2e:	61 f0       	breq	.+24     	; 0xe48 <CDC_Device_ProcessControlRequest+0x42>
     e30:	20 f4       	brcc	.+8      	; 0xe3a <CDC_Device_ProcessControlRequest+0x34>
     e32:	80 32       	cpi	r24, 0x20	; 32
     e34:	09 f0       	breq	.+2      	; 0xe38 <CDC_Device_ProcessControlRequest+0x32>
     e36:	95 c0       	rjmp	.+298    	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
     e38:	3d c0       	rjmp	.+122    	; 0xeb4 <CDC_Device_ProcessControlRequest+0xae>
     e3a:	82 32       	cpi	r24, 0x22	; 34
     e3c:	09 f4       	brne	.+2      	; 0xe40 <CDC_Device_ProcessControlRequest+0x3a>
     e3e:	6d c0       	rjmp	.+218    	; 0xf1a <CDC_Device_ProcessControlRequest+0x114>
     e40:	83 32       	cpi	r24, 0x23	; 35
     e42:	09 f0       	breq	.+2      	; 0xe46 <CDC_Device_ProcessControlRequest+0x40>
     e44:	8e c0       	rjmp	.+284    	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
     e46:	7d c0       	rjmp	.+250    	; 0xf42 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e48:	80 91 10 02 	lds	r24, 0x0210
     e4c:	81 3a       	cpi	r24, 0xA1	; 161
     e4e:	09 f0       	breq	.+2      	; 0xe52 <CDC_Device_ProcessControlRequest+0x4c>
     e50:	88 c0       	rjmp	.+272    	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e52:	80 91 e8 00 	lds	r24, 0x00E8
     e56:	87 7f       	andi	r24, 0xF7	; 247
     e58:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e5c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     e60:	80 ff       	sbrs	r24, 0
     e62:	fc cf       	rjmp	.-8      	; 0xe5c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e64:	4c 89       	ldd	r20, Y+20	; 0x14
     e66:	5d 89       	ldd	r21, Y+21	; 0x15
     e68:	6e 89       	ldd	r22, Y+22	; 0x16
     e6a:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     e6c:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     e70:	bb 27       	eor	r27, r27
     e72:	a7 2f       	mov	r26, r23
     e74:	96 2f       	mov	r25, r22
     e76:	85 2f       	mov	r24, r21
     e78:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     e7c:	cb 01       	movw	r24, r22
     e7e:	aa 27       	eor	r26, r26
     e80:	bb 27       	eor	r27, r27
     e82:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     e86:	47 2f       	mov	r20, r23
     e88:	55 27       	eor	r21, r21
     e8a:	66 27       	eor	r22, r22
     e8c:	77 27       	eor	r23, r23
     e8e:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     e92:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e94:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     e98:	89 8d       	ldd	r24, Y+25	; 0x19
     e9a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     e9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ea0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ea4:	80 91 e8 00 	lds	r24, 0x00E8
     ea8:	8e 77       	andi	r24, 0x7E	; 126
     eaa:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     eb2:	6f cb       	rjmp	.-2338   	; 0x592 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     eb4:	80 91 10 02 	lds	r24, 0x0210
     eb8:	81 32       	cpi	r24, 0x21	; 33
     eba:	09 f0       	breq	.+2      	; 0xebe <CDC_Device_ProcessControlRequest+0xb8>
     ebc:	52 c0       	rjmp	.+164    	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ebe:	80 91 e8 00 	lds	r24, 0x00E8
     ec2:	87 7f       	andi	r24, 0xF7	; 247
     ec4:	80 93 e8 00 	sts	0x00E8, r24
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     eca:	80 91 0f 02 	lds	r24, 0x020F
     ece:	88 23       	and	r24, r24
     ed0:	09 f4       	brne	.+2      	; 0xed4 <CDC_Device_ProcessControlRequest+0xce>
     ed2:	47 c0       	rjmp	.+142    	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     ed8:	82 ff       	sbrs	r24, 2
     eda:	f7 cf       	rjmp	.-18     	; 0xeca <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     edc:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     ee0:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     ee4:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     ee8:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     eec:	3c 8b       	std	Y+20, r19	; 0x14
     eee:	2d 8b       	std	Y+21, r18	; 0x15
     ef0:	9e 8b       	std	Y+22, r25	; 0x16
     ef2:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ef4:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     ef8:	88 8f       	std	Y+24, r24	; 0x18
     efa:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     efe:	89 8f       	std	Y+25, r24	; 0x19
     f00:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f04:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f06:	80 91 e8 00 	lds	r24, 0x00E8
     f0a:	8b 77       	andi	r24, 0x7B	; 123
     f0c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f10:	40 db       	rcall	.-2432   	; 0x592 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f12:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f18:	75 cf       	rjmp	.-278    	; 0xe04 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f1a:	80 91 10 02 	lds	r24, 0x0210
     f1e:	81 32       	cpi	r24, 0x21	; 33
     f20:	01 f5       	brne	.+64     	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f22:	80 91 e8 00 	lds	r24, 0x00E8
     f26:	87 7f       	andi	r24, 0xF7	; 247
     f28:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f2c:	32 db       	rcall	.-2460   	; 0x592 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f2e:	80 91 12 02 	lds	r24, 0x0212
     f32:	90 91 13 02 	lds	r25, 0x0213
     f36:	99 8b       	std	Y+17, r25	; 0x11
     f38:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f3a:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f40:	2c c9       	rjmp	.-3496   	; 0x19a <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f42:	80 91 10 02 	lds	r24, 0x0210
     f46:	81 32       	cpi	r24, 0x21	; 33
     f48:	61 f4       	brne	.+24     	; 0xf62 <CDC_Device_ProcessControlRequest+0x15c>
     f4a:	80 91 e8 00 	lds	r24, 0x00E8
     f4e:	87 7f       	andi	r24, 0xF7	; 247
     f50:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f54:	1e db       	rcall	.-2500   	; 0x592 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f56:	60 91 12 02 	lds	r22, 0x0212
     f5a:	ce 01       	movw	r24, r28
			}

			break;
	}
}
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f60:	51 cf       	rjmp	.-350    	; 0xe04 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <_Z16TIMER_CONFIG_KHZi>:
#include "IRremoteInt.h"
#include "GrapCommon.h"

void TIMER_CONFIG_KHZ(int val)
{
	const uint16_t pwmval = SYSCLOCK / 2000 / (val);	/* The period is halved since Phase and Frequency Correct PWM mode */
     f68:	9c 01       	movw	r18, r24
     f6a:	44 27       	eor	r20, r20
     f6c:	37 fd       	sbrc	r19, 7
     f6e:	40 95       	com	r20
     f70:	54 2f       	mov	r21, r20
     f72:	60 e4       	ldi	r22, 0x40	; 64
     f74:	7f e1       	ldi	r23, 0x1F	; 31
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	7b d2       	rcall	.+1270   	; 0x1472 <__udivmodsi4>
     f7c:	c9 01       	movw	r24, r18
	TCCR4A                = (1<<PWM4A);	/* PWM mode based on comparator OCR4A */
     f7e:	42 e0       	ldi	r20, 0x02	; 2
     f80:	40 93 c0 00 	sts	0x00C0, r20
	TCCR4B                = _BV(CS40);	/* Prescaler 1/1 */
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	40 93 c1 00 	sts	0x00C1, r20
	TCCR4C                = 0;			/* OC4D is disabled (Normal GPIO) */
     f8a:	10 92 c2 00 	sts	0x00C2, r1
	TCCR4D                = (1<<WGM40);	/* Phase and Frequency Correct PWM */
     f8e:	40 93 c3 00 	sts	0x00C3, r20
	TCCR4E                = 0;
     f92:	10 92 c4 00 	sts	0x00C4, r1
	TC4H                  = pwmval >> 8;	/* TOP (High byte temporary buffer) */
     f96:	ef eb       	ldi	r30, 0xBF	; 191
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	30 83       	st	Z, r19
	OCR4C                 = pwmval;		/* TOP */
     f9c:	20 93 d1 00 	sts	0x00D1, r18
	TC4H                  = (pwmval / 3) >> 8;	/* duty ratio 1/3 (High byte temporary buffer) */
     fa0:	63 e0       	ldi	r22, 0x03	; 3
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	3f d2       	rcall	.+1150   	; 0x1424 <__udivmodhi4>
     fa6:	70 83       	st	Z, r23
	OCR4A                 = (pwmval / 3) & 255;	/* duty ratio 1/3 */
     fa8:	60 93 cf 00 	sts	0x00CF, r22
     fac:	08 95       	ret

00000fae <_ZN6IRsend11enableIROutEi>:
// To turn the output on and off, we leave the PWM running, but connect and disconnect the output pin.
// A few hours staring at the ATmega documentation and this will all make sense.
// See my Secrets of Arduino PWM at http://arcfn.com/2009/07/secrets-of-arduino-pwm.html for details.
//
void  IRsend::enableIROut (int khz)
{
     fae:	cb 01       	movw	r24, r22
// FIXME: implement ESP32 support, see IR_TIMER_USE_ESP32 in boarddefs.h
#ifndef ESP32
	// Disable the Timer2 Interrupt (which is used for receiving IR)
	TIMER_DISABLE_INTR; //Timer2 Overflow Interrupt
     fb0:	10 92 72 00 	sts	0x0072, r1
	// COM2A = 00: disconnect OC2A
	// COM2B = 00: disconnect OC2B; to send signal set to 10: OC2B non-inverted
	// WGM2 = 101: phase-correct PWM with OCRA as top
	// CS2  = 000: no prescaling
	// The top value for the timer.  The modulation frequency will be SYSCLOCK / 2 / OCR2A.
	TIMER_CONFIG_KHZ(khz);
     fb4:	d9 cf       	rjmp	.-78     	; 0xf68 <_Z16TIMER_CONFIG_KHZi>

00000fb6 <_ZN6IRsend4sendEmi>:
#endif
}

//+=============================================================================
void  IRsend::send (unsigned long data,  int nbits)
{
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
	// Header
	mark(IR_HDR_MARK);
     fba:	80 91 c0 00 	lds	r24, 0x00C0
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	80 93 c0 00 	sts	0x00C0, r24
     fc4:	8f e7       	ldi	r24, 0x7F	; 127
     fc6:	95 e2       	ldi	r25, 0x25	; 37
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <_ZN6IRsend4sendEmi+0x12>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <_ZN6IRsend4sendEmi+0x18>
     fce:	00 00       	nop
	space(IR_HDR_SPACE);
     fd0:	80 91 c0 00 	lds	r24, 0x00C0
     fd4:	8f 7b       	andi	r24, 0xBF	; 191
     fd6:	80 93 c0 00 	sts	0x00C0, r24
     fda:	ef e5       	ldi	r30, 0x5F	; 95
     fdc:	f9 e0       	ldi	r31, 0x09	; 9
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <_ZN6IRsend4sendEmi+0x28>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <_ZN6IRsend4sendEmi+0x2e>
     fe4:	00 00       	nop

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
     fe6:	21 50       	subi	r18, 0x01	; 1
     fe8:	31 09       	sbc	r19, r1
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a0 e0       	ldi	r26, 0x00	; 0
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <_ZN6IRsend4sendEmi+0x46>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	aa 1f       	adc	r26, r26
     ffa:	bb 1f       	adc	r27, r27
     ffc:	2a 95       	dec	r18
     ffe:	d2 f7       	brpl	.-12     	; 0xff4 <_ZN6IRsend4sendEmi+0x3e>
    1000:	2e c0       	rjmp	.+92     	; 0x105e <_ZN6IRsend4sendEmi+0xa8>
		if (data & mask) {
    1002:	8c 01       	movw	r16, r24
    1004:	9d 01       	movw	r18, r26
    1006:	04 23       	and	r16, r20
    1008:	15 23       	and	r17, r21
    100a:	26 23       	and	r18, r22
    100c:	37 23       	and	r19, r23
    100e:	01 2b       	or	r16, r17
    1010:	02 2b       	or	r16, r18
    1012:	03 2b       	or	r16, r19
    1014:	51 f0       	breq	.+20     	; 0x102a <_ZN6IRsend4sendEmi+0x74>
			mark(IR_ONE_MARK);
    1016:	20 91 c0 00 	lds	r18, 0x00C0
    101a:	20 64       	ori	r18, 0x40	; 64
    101c:	20 93 c0 00 	sts	0x00C0, r18
    1020:	ef eb       	ldi	r30, 0xBF	; 191
    1022:	f2 e1       	ldi	r31, 0x12	; 18
    1024:	31 97       	sbiw	r30, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <_ZN6IRsend4sendEmi+0x6e>
    1028:	09 c0       	rjmp	.+18     	; 0x103c <_ZN6IRsend4sendEmi+0x86>
			space(IR_HDR_SPACE);
		} else {
			mark(IR_ZERO_MARK);
    102a:	20 91 c0 00 	lds	r18, 0x00C0
    102e:	20 64       	ori	r18, 0x40	; 64
    1030:	20 93 c0 00 	sts	0x00C0, r18
    1034:	ef e5       	ldi	r30, 0x5F	; 95
    1036:	f9 e0       	ldi	r31, 0x09	; 9
    1038:	31 97       	sbiw	r30, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <_ZN6IRsend4sendEmi+0x82>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <_ZN6IRsend4sendEmi+0x88>
    103e:	00 00       	nop
			space(IR_HDR_SPACE);
    1040:	20 91 c0 00 	lds	r18, 0x00C0
    1044:	2f 7b       	andi	r18, 0xBF	; 191
    1046:	20 93 c0 00 	sts	0x00C0, r18
    104a:	ef e5       	ldi	r30, 0x5F	; 95
    104c:	f9 e0       	ldi	r31, 0x09	; 9
    104e:	31 97       	sbiw	r30, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <_ZN6IRsend4sendEmi+0x98>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <_ZN6IRsend4sendEmi+0x9e>
    1054:	00 00       	nop
	// Header
	mark(IR_HDR_MARK);
	space(IR_HDR_SPACE);

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
    1056:	b6 95       	lsr	r27
    1058:	a7 95       	ror	r26
    105a:	97 95       	ror	r25
    105c:	87 95       	ror	r24
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	a1 05       	cpc	r26, r1
    1062:	b1 05       	cpc	r27, r1
    1064:	71 f6       	brne	.-100    	; 0x1002 <_ZN6IRsend4sendEmi+0x4c>
			space(IR_HDR_SPACE);
		}
	}

	// We will have ended with LED off
	mark(IR_ZERO_MARK);
    1066:	80 91 c0 00 	lds	r24, 0x00C0
    106a:	80 64       	ori	r24, 0x40	; 64
    106c:	80 93 c0 00 	sts	0x00C0, r24
    1070:	8f e5       	ldi	r24, 0x5F	; 95
    1072:	99 e0       	ldi	r25, 0x09	; 9
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <_ZN6IRsend4sendEmi+0xbe>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <_ZN6IRsend4sendEmi+0xc4>
    107a:	00 00       	nop

	TIMER_DISABLE_PWM;
    107c:	80 91 c0 00 	lds	r24, 0x00C0
    1080:	8f 7b       	andi	r24, 0xBF	; 191
    1082:	80 93 c0 00 	sts	0x00C0, r24
}
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <__vector_41>:
#ifdef IR_TIMER_USE_ESP32
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	2f 93       	push	r18
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	ef 93       	push	r30
    109e:	ff 93       	push	r31
	TIMER_RESET;

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	uint8_t  irdata = (IR_RECEIVE_SIGNAL == 0) ? SPACE : MARK;
    10a0:	2c b1       	in	r18, 0x0c	; 12
    10a2:	26 fb       	bst	r18, 6
    10a4:	22 27       	eor	r18, r18
    10a6:	20 f9       	bld	r18, 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	28 27       	eor	r18, r24

	irparams.timer++;  // One more 50uS tick
    10ac:	80 91 2a 01 	lds	r24, 0x012A
    10b0:	90 91 2b 01 	lds	r25, 0x012B
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	90 93 2b 01 	sts	0x012B, r25
    10ba:	80 93 2a 01 	sts	0x012A, r24
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
    10be:	80 91 29 01 	lds	r24, 0x0129
    10c2:	85 36       	cpi	r24, 0x65	; 101
    10c4:	18 f0       	brcs	.+6      	; 0x10cc <__vector_41+0x40>
    10c6:	86 e0       	ldi	r24, 0x06	; 6
    10c8:	80 93 28 01 	sts	0x0128, r24

	switch(irparams.rcvstate) {
    10cc:	80 91 28 01 	lds	r24, 0x0128
    10d0:	84 30       	cpi	r24, 0x04	; 4
    10d2:	b9 f1       	breq	.+110    	; 0x1142 <__vector_41+0xb6>
    10d4:	30 f4       	brcc	.+12     	; 0x10e2 <__vector_41+0x56>
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	59 f0       	breq	.+22     	; 0x10f0 <__vector_41+0x64>
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <__vector_41+0x54>
    10de:	64 c0       	rjmp	.+200    	; 0x11a8 <__vector_41+0x11c>
    10e0:	16 c0       	rjmp	.+44     	; 0x110e <__vector_41+0x82>
    10e2:	85 30       	cpi	r24, 0x05	; 5
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <__vector_41+0x5c>
    10e6:	53 c0       	rjmp	.+166    	; 0x118e <__vector_41+0x102>
    10e8:	86 30       	cpi	r24, 0x06	; 6
    10ea:	09 f0       	breq	.+2      	; 0x10ee <__vector_41+0x62>
    10ec:	5d c0       	rjmp	.+186    	; 0x11a8 <__vector_41+0x11c>
    10ee:	56 c0       	rjmp	.+172    	; 0x119c <__vector_41+0x110>
		//......................................................................
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
    10f0:	21 11       	cpse	r18, r1
    10f2:	5e c0       	rjmp	.+188    	; 0x11b0 <__vector_41+0x124>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
    10f4:	80 91 2a 01 	lds	r24, 0x012A
    10f8:	90 91 2b 01 	lds	r25, 0x012B
    10fc:	84 36       	cpi	r24, 0x64	; 100
    10fe:	91 05       	cpc	r25, r1
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__vector_41+0x78>
    1102:	47 c0       	rjmp	.+142    	; 0x1192 <__vector_41+0x106>
					irparams.timer = 0;

				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
    1104:	10 92 f6 01 	sts	0x01F6, r1
					irparams.rawlen                    = 0;
    1108:	10 92 29 01 	sts	0x0129, r1
    110c:	1c c0       	rjmp	.+56     	; 0x1146 <__vector_41+0xba>
				}
			}
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
    110e:	21 30       	cpi	r18, 0x01	; 1
    1110:	09 f0       	breq	.+2      	; 0x1114 <__vector_41+0x88>
    1112:	4c c0       	rjmp	.+152    	; 0x11ac <__vector_41+0x120>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    1114:	20 91 29 01 	lds	r18, 0x0129
    1118:	e2 2f       	mov	r30, r18
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 91 2a 01 	lds	r24, 0x012A
    1120:	90 91 2b 01 	lds	r25, 0x012B
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	e4 5d       	subi	r30, 0xD4	; 212
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	80 83       	st	Z, r24
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	20 93 29 01 	sts	0x0129, r18
				irparams.timer                     = 0;
    1136:	10 92 2b 01 	sts	0x012B, r1
    113a:	10 92 2a 01 	sts	0x012A, r1
				irparams.rcvstate                  = STATE_SPACE;
    113e:	84 e0       	ldi	r24, 0x04	; 4
    1140:	23 c0       	rjmp	.+70     	; 0x1188 <__vector_41+0xfc>
			}
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
    1142:	21 11       	cpse	r18, r1
    1144:	19 c0       	rjmp	.+50     	; 0x1178 <__vector_41+0xec>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    1146:	20 91 29 01 	lds	r18, 0x0129
    114a:	e2 2f       	mov	r30, r18
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 91 2a 01 	lds	r24, 0x012A
    1152:	90 91 2b 01 	lds	r25, 0x012B
    1156:	ee 0f       	add	r30, r30
    1158:	ff 1f       	adc	r31, r31
    115a:	e4 5d       	subi	r30, 0xD4	; 212
    115c:	fe 4f       	sbci	r31, 0xFE	; 254
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
    1162:	2f 5f       	subi	r18, 0xFF	; 255
    1164:	20 93 29 01 	sts	0x0129, r18
				irparams.timer                     = 0;
    1168:	10 92 2b 01 	sts	0x012B, r1
    116c:	10 92 2a 01 	sts	0x012A, r1
				irparams.rcvstate                  = STATE_MARK;
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	80 93 28 01 	sts	0x0128, r24
    1176:	1a c0       	rjmp	.+52     	; 0x11ac <__vector_41+0x120>

			} else if (irparams.timer > GAP_TICKS) {  // Space
    1178:	80 91 2a 01 	lds	r24, 0x012A
    117c:	90 91 2b 01 	lds	r25, 0x012B
    1180:	85 36       	cpi	r24, 0x65	; 101
    1182:	91 05       	cpc	r25, r1
    1184:	a8 f0       	brcs	.+42     	; 0x11b0 <__vector_41+0x124>
					// A long Space, indicates gap between codes
					// Flag the current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting Space width
					irparams.rcvstate = STATE_STOP;
    1186:	85 e0       	ldi	r24, 0x05	; 5
    1188:	80 93 28 01 	sts	0x0128, r24
    118c:	11 c0       	rjmp	.+34     	; 0x11b0 <__vector_41+0x124>
			}
			break;
		//......................................................................
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
    118e:	21 11       	cpse	r18, r1
    1190:	0f c0       	rjmp	.+30     	; 0x11b0 <__vector_41+0x124>
    1192:	10 92 2b 01 	sts	0x012B, r1
    1196:	10 92 2a 01 	sts	0x012A, r1
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <__vector_41+0x120>
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 f6 01 	sts	0x01F6, r24
			irparams.rcvstate = STATE_STOP;
    11a2:	85 e0       	ldi	r24, 0x05	; 5
    11a4:	80 93 28 01 	sts	0x0128, r24
		 	break;
	}

	// If requested, flash LED while receiving IR data
#if IR_RECEIVE_BLINK_FLAG
	if (irdata == MARK)
    11a8:	21 11       	cpse	r18, r1
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <__vector_41+0x124>
		IR_RECEIVE_BLINK_ON; // Turn user defined pin LED on
    11ac:	47 9a       	sbi	0x08, 7	; 8
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <__vector_41+0x126>
	else
		IR_RECEIVE_BLINK_OFF; // Turn user defined pin LED on
    11b0:	47 98       	cbi	0x08, 7	; 8
#endif
}
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	0f 90       	pop	r0
    11c2:	1f 90       	pop	r1
    11c4:	18 95       	reti

000011c6 <_ZN6IRrecvC1Ev>:
	results->value = data;
	return true;
}

//+=============================================================================
IRrecv::IRrecv ()
    11c6:	08 95       	ret

000011c8 <IrSendSetup>:
            return (int)data;
        }        
    }else{
        return IR_CODE_INVALID;
    }
}
    11c8:	66 e2       	ldi	r22, 0x26	; 38
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	87 ef       	ldi	r24, 0xF7	; 247
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	ee de       	rcall	.-548    	; 0xfae <_ZN6IRsend11enableIROutEi>
    11d2:	3e 9a       	sbi	0x07, 6	; 7
    11d4:	08 95       	ret

000011d6 <IrRawSend>:
    11d6:	9a 01       	movw	r18, r20
    11d8:	ab 01       	movw	r20, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	87 ef       	ldi	r24, 0xF7	; 247
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	ea ce       	rjmp	.-556    	; 0xfb6 <_ZN6IRsend4sendEmi>

000011e2 <_Z12CalcCheckSumm>:
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	0e c0       	rjmp	.+28     	; 0x1206 <_Z12CalcCheckSumm+0x24>
    11ea:	8b 01       	movw	r16, r22
    11ec:	9c 01       	movw	r18, r24
    11ee:	03 70       	andi	r16, 0x03	; 3
    11f0:	11 27       	eor	r17, r17
    11f2:	22 27       	eor	r18, r18
    11f4:	33 27       	eor	r19, r19
    11f6:	40 0f       	add	r20, r16
    11f8:	22 e0       	ldi	r18, 0x02	; 2
    11fa:	96 95       	lsr	r25
    11fc:	87 95       	ror	r24
    11fe:	77 95       	ror	r23
    1200:	67 95       	ror	r22
    1202:	2a 95       	dec	r18
    1204:	d1 f7       	brne	.-12     	; 0x11fa <_Z12CalcCheckSumm+0x18>
    1206:	61 15       	cp	r22, r1
    1208:	71 05       	cpc	r23, r1
    120a:	81 05       	cpc	r24, r1
    120c:	91 05       	cpc	r25, r1
    120e:	69 f7       	brne	.-38     	; 0x11ea <_Z12CalcCheckSumm+0x8>
    1210:	84 2f       	mov	r24, r20
    1212:	83 70       	andi	r24, 0x03	; 3
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <IrSend>:
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	ec 01       	movw	r28, r24
    1220:	d3 70       	andi	r29, 0x03	; 3
    1222:	be 01       	movw	r22, r28
    1224:	88 27       	eor	r24, r24
    1226:	77 fd       	sbrc	r23, 7
    1228:	80 95       	com	r24
    122a:	98 2f       	mov	r25, r24
    122c:	da df       	rcall	.-76     	; 0x11e2 <_Z12CalcCheckSumm>
    122e:	38 2f       	mov	r19, r24
    1230:	33 0f       	add	r19, r19
    1232:	33 0f       	add	r19, r19
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	6c 0f       	add	r22, r28
    123a:	7d 1f       	adc	r23, r29
    123c:	88 27       	eor	r24, r24
    123e:	77 fd       	sbrc	r23, 7
    1240:	80 95       	com	r24
    1242:	98 2f       	mov	r25, r24
    1244:	4c e0       	ldi	r20, 0x0C	; 12
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	c4 cf       	rjmp	.-120    	; 0x11d6 <IrRawSend>

0000124e <_GLOBAL__sub_I_IrSendSetup>:
#include "IRremote.h"
#include "GrapCommon.h"

static IRrecv recv;
    124e:	88 ef       	ldi	r24, 0xF8	; 248
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	b9 cf       	rjmp	.-142    	; 0x11c6 <_ZN6IRrecvC1Ev>

00001254 <Led7Seg_Init>:
volatile uint8_t g_CurrentDigit = 0;

void Led7Seg_Init()
{
    /* Init SPI */
    SPCR = 0b01010000;
    1254:	80 e5       	ldi	r24, 0x50	; 80
    1256:	8c bd       	out	0x2c, r24	; 44
    //SPSR = 0b00000001; 
    SPSR = 0b00000000;    // SPI2X should be disabled due to transmission error
    1258:	1d bc       	out	0x2d, r1	; 45

    sbi(DDRB, 0);	// RCK
    125a:	20 9a       	sbi	0x04, 0	; 4
    sbi(DDRB, 1);   // SCLK
    125c:	21 9a       	sbi	0x04, 1	; 4
    sbi(DDRB, 2);   // MOSI
    125e:	22 9a       	sbi	0x04, 2	; 4

#if 1
    /* Interval interrupt by using timer0 */
    TCCR0A = 0; // Normal port operation, OC0A disconnected.
    1260:	14 bc       	out	0x24, r1	; 36
    TCCR0B = _BV(CS02); // Prescaler 1/256 => 62.5KHz
    1262:	84 e0       	ldi	r24, 0x04	; 4
    1264:	85 bd       	out	0x25, r24	; 37
    TCNT0  = 0;
    1266:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 63;    // 1KHz
    1268:	8f e3       	ldi	r24, 0x3F	; 63
    126a:	87 bd       	out	0x27, r24	; 39
    //TIFR0  = _BV(OCF0A);
    //TIMSK0 = _BV(OCIE0A);
    TIMSK0 = _BV(TOIE0);
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 6e 00 	sts	0x006E, r24
    1272:	08 95       	ret

00001274 <SendShiftReg>:
#endif
}

void SendShiftReg(uint8_t data)
{
    SPDR = ~data;    // start transmission
    1274:	80 95       	com	r24
    1276:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & _BV(SPIF)) == 0);    // wait until complete
    1278:	0d b4       	in	r0, 0x2d	; 45
    127a:	07 fe       	sbrs	r0, 7
    127c:	fd cf       	rjmp	.-6      	; 0x1278 <SendShiftReg+0x4>
}
    127e:	08 95       	ret

00001280 <Led7Seg_SetDisplayNumber>:

void Led7Seg_SetDisplayNumber(int16_t val)
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	9c 01       	movw	r18, r24
    1286:	37 ff       	sbrs	r19, 7
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <Led7Seg_SetDisplayNumber+0x12>
    128a:	88 27       	eor	r24, r24
    128c:	99 27       	eor	r25, r25
    128e:	82 1b       	sub	r24, r18
    1290:	93 0b       	sbc	r25, r19
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    if(val < 0){
        absval = -val;
    }

    for(i = 0; i < NUM_DIGITS; i++){
        int n = absval % 10;
    1296:	ca e0       	ldi	r28, 0x0A	; 10
    1298:	d0 e0       	ldi	r29, 0x00	; 0
    129a:	be 01       	movw	r22, r28
    129c:	d7 d0       	rcall	.+430    	; 0x144c <__divmodhi4>
        g_DisplayPatterns[i] = g_LedDigitPatterns[n];
    129e:	dc 01       	movw	r26, r24
    12a0:	a5 5e       	subi	r26, 0xE5	; 229
    12a2:	be 4f       	sbci	r27, 0xFE	; 254
    12a4:	8c 91       	ld	r24, X
    12a6:	df 01       	movw	r26, r30
    12a8:	a8 5e       	subi	r26, 0xE8	; 232
    12aa:	bd 4f       	sbci	r27, 0xFD	; 253
    12ac:	8c 93       	st	X, r24
        absval /= 10;
    12ae:	cb 01       	movw	r24, r22
    12b0:	31 96       	adiw	r30, 0x01	; 1
        if(absval == 0){
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f4       	brne	.+24     	; 0x12ce <Led7Seg_SetDisplayNumber+0x4e>
            for(i++; i < NUM_DIGITS; i++) g_DisplayPatterns[i] = 0;
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <Led7Seg_SetDisplayNumber+0x42>
    12b8:	df 01       	movw	r26, r30
    12ba:	a8 5e       	subi	r26, 0xE8	; 232
    12bc:	bd 4f       	sbci	r27, 0xFD	; 253
    12be:	1c 92       	st	X, r1
    12c0:	31 96       	adiw	r30, 0x01	; 1
    12c2:	e4 30       	cpi	r30, 0x04	; 4
    12c4:	f1 05       	cpc	r31, r1
    12c6:	c1 f7       	brne	.-16     	; 0x12b8 <Led7Seg_SetDisplayNumber+0x38>
            break;
        }
    }

    if(val < 0)
    12c8:	37 ff       	sbrs	r19, 7
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <Led7Seg_SetDisplayNumber+0x5c>
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <Led7Seg_SetDisplayNumber+0x56>

    if(val < 0){
        absval = -val;
    }

    for(i = 0; i < NUM_DIGITS; i++){
    12ce:	e4 30       	cpi	r30, 0x04	; 4
    12d0:	f1 05       	cpc	r31, r1
    12d2:	19 f7       	brne	.-58     	; 0x129a <Led7Seg_SetDisplayNumber+0x1a>
    12d4:	f9 cf       	rjmp	.-14     	; 0x12c8 <Led7Seg_SetDisplayNumber+0x48>
            break;
        }
    }

    if(val < 0)
        g_DisplayPatterns[NUM_DIGITS - 1] = g_MinusMarkPattern;
    12d6:	80 e4       	ldi	r24, 0x40	; 64
    12d8:	80 93 1b 02 	sts	0x021B, r24
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <__vector_23>:

//+=============================================================================
// Interrupt Service Routine - Fires every 1ms
//
ISR (TIMER0_OVF_vect)
{
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    SendShiftReg(1 << g_CurrentDigit);
    1304:	20 91 f9 01 	lds	r18, 0x01F9
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <__vector_23+0x2e>
    130e:	88 0f       	add	r24, r24
    1310:	2a 95       	dec	r18
    1312:	ea f7       	brpl	.-6      	; 0x130e <__vector_23+0x2c>
    1314:	af df       	rcall	.-162    	; 0x1274 <SendShiftReg>
    SendShiftReg(g_DisplayPatterns[g_CurrentDigit]);
    1316:	e0 91 f9 01 	lds	r30, 0x01F9
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	e8 5e       	subi	r30, 0xE8	; 232
    131e:	fd 4f       	sbci	r31, 0xFD	; 253
    1320:	80 81       	ld	r24, Z
    1322:	a8 df       	rcall	.-176    	; 0x1274 <SendShiftReg>

    // Send RCK
    LED7SEG_RCK_0;
    1324:	28 98       	cbi	0x05, 0	; 5
    LED7SEG_RCK_1;
    1326:	28 9a       	sbi	0x05, 0	; 5

    g_CurrentDigit++;
    1328:	80 91 f9 01 	lds	r24, 0x01F9
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	80 93 f9 01 	sts	0x01F9, r24
    if(g_CurrentDigit == NUM_DIGITS) g_CurrentDigit = 0;
    1332:	80 91 f9 01 	lds	r24, 0x01F9
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	11 f4       	brne	.+4      	; 0x133e <__vector_23+0x5c>
    133a:	10 92 f9 01 	sts	0x01F9, r1
}
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <InitRotEncoder>:
volatile static char g_OldRot;
volatile static int g_Value = 0;

void InitRotEncoder()
{
    sbi(PCICR, PCIE0);
    1360:	e8 e6       	ldi	r30, 0x68	; 104
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	81 60       	ori	r24, 0x01	; 1
    1368:	80 83       	st	Z, r24
    cbi(PCIFR, PCIE0);
    136a:	d8 98       	cbi	0x1b, 0	; 27
    //sbi(PCMSK0, PCINT2);
    sbi(EIMSK, INT2);
    136c:	ea 9a       	sbi	0x1d, 2	; 29
    cbi(DDRD, 2);	// ENCODER A in
    136e:	52 98       	cbi	0x0a, 2	; 10
    cbi(DDRD, 3);	// ENCODER B in
    1370:	53 98       	cbi	0x0a, 3	; 10
#if !TEST_BOARD
    sbi(PORTD, 2);	// ENCODER A pull-up
    1372:	5a 9a       	sbi	0x0b, 2	; 11
    sbi(PORTD, 3);	// ENCODER B pull-up
    1374:	5b 9a       	sbi	0x0b, 3	; 11
#endif
    Led7Seg_SetDisplayNumber(g_Value);
    1376:	80 91 fa 01 	lds	r24, 0x01FA
    137a:	90 91 fb 01 	lds	r25, 0x01FB
    137e:	80 cf       	rjmp	.-256    	; 0x1280 <Led7Seg_SetDisplayNumber>

00001380 <RotEncoderGetVal>:
}

int RotEncoderGetVal()
{
    return g_Value;
    1380:	20 91 fa 01 	lds	r18, 0x01FA
    1384:	30 91 fb 01 	lds	r19, 0x01FB
}
    1388:	c9 01       	movw	r24, r18
    138a:	08 95       	ret

0000138c <__vector_3>:

//+=============================================================================
// Interrupt Service Routine
//
ISR(INT2_vect)
{
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	0f 92       	push	r0
    1394:	11 24       	eor	r1, r1
    1396:	2f 93       	push	r18
    1398:	3f 93       	push	r19
    139a:	4f 93       	push	r20
    139c:	5f 93       	push	r21
    139e:	6f 93       	push	r22
    13a0:	7f 93       	push	r23
    13a2:	8f 93       	push	r24
    13a4:	9f 93       	push	r25
    13a6:	af 93       	push	r26
    13a8:	bf 93       	push	r27
    13aa:	ef 93       	push	r30
    13ac:	ff 93       	push	r31
    if(bit_is_set(PIND, PORTD2)){
    13ae:	4a 9b       	sbis	0x09, 2	; 9
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <__vector_3+0x36>
        g_OldRot = bit_is_set(PIND, PORTD3) ? 'R' : 'L';
    13b2:	4b 9b       	sbis	0x09, 3	; 9
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <__vector_3+0x2e>
    13b6:	82 e5       	ldi	r24, 0x52	; 82
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <__vector_3+0x30>
    13ba:	8c e4       	ldi	r24, 0x4C	; 76
    13bc:	80 93 fc 01 	sts	0x01FC, r24
    13c0:	20 c0       	rjmp	.+64     	; 0x1402 <__vector_3+0x76>
    }else{
        if(bit_is_set(PIND, PORTD3)){
    13c2:	4b 9b       	sbis	0x09, 3	; 9
    13c4:	0a c0       	rjmp	.+20     	; 0x13da <__vector_3+0x4e>
            if(g_OldRot == 'L'){
    13c6:	80 91 fc 01 	lds	r24, 0x01FC
    13ca:	8c 34       	cpi	r24, 0x4C	; 76
    13cc:	c1 f4       	brne	.+48     	; 0x13fe <__vector_3+0x72>
                g_Value--;
    13ce:	80 91 fa 01 	lds	r24, 0x01FA
    13d2:	90 91 fb 01 	lds	r25, 0x01FB
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	09 c0       	rjmp	.+18     	; 0x13ec <__vector_3+0x60>
                Led7Seg_SetDisplayNumber(g_Value);
            }
        }else{
            if(g_OldRot == 'R'){
    13da:	80 91 fc 01 	lds	r24, 0x01FC
    13de:	82 35       	cpi	r24, 0x52	; 82
    13e0:	71 f4       	brne	.+28     	; 0x13fe <__vector_3+0x72>
                g_Value++;
    13e2:	80 91 fa 01 	lds	r24, 0x01FA
    13e6:	90 91 fb 01 	lds	r25, 0x01FB
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	90 93 fb 01 	sts	0x01FB, r25
    13f0:	80 93 fa 01 	sts	0x01FA, r24
                Led7Seg_SetDisplayNumber(g_Value);
    13f4:	80 91 fa 01 	lds	r24, 0x01FA
    13f8:	90 91 fb 01 	lds	r25, 0x01FB
    13fc:	41 df       	rcall	.-382    	; 0x1280 <Led7Seg_SetDisplayNumber>
            }
        }
        g_OldRot = 0;
    13fe:	10 92 fc 01 	sts	0x01FC, r1
    }
}
    1402:	ff 91       	pop	r31
    1404:	ef 91       	pop	r30
    1406:	bf 91       	pop	r27
    1408:	af 91       	pop	r26
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	7f 91       	pop	r23
    1410:	6f 91       	pop	r22
    1412:	5f 91       	pop	r21
    1414:	4f 91       	pop	r20
    1416:	3f 91       	pop	r19
    1418:	2f 91       	pop	r18
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0
    1420:	1f 90       	pop	r1
    1422:	18 95       	reti

00001424 <__udivmodhi4>:
    1424:	aa 1b       	sub	r26, r26
    1426:	bb 1b       	sub	r27, r27
    1428:	51 e1       	ldi	r21, 0x11	; 17
    142a:	07 c0       	rjmp	.+14     	; 0x143a <__udivmodhi4_ep>

0000142c <__udivmodhi4_loop>:
    142c:	aa 1f       	adc	r26, r26
    142e:	bb 1f       	adc	r27, r27
    1430:	a6 17       	cp	r26, r22
    1432:	b7 07       	cpc	r27, r23
    1434:	10 f0       	brcs	.+4      	; 0x143a <__udivmodhi4_ep>
    1436:	a6 1b       	sub	r26, r22
    1438:	b7 0b       	sbc	r27, r23

0000143a <__udivmodhi4_ep>:
    143a:	88 1f       	adc	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	5a 95       	dec	r21
    1440:	a9 f7       	brne	.-22     	; 0x142c <__udivmodhi4_loop>
    1442:	80 95       	com	r24
    1444:	90 95       	com	r25
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	08 95       	ret

0000144c <__divmodhi4>:
    144c:	97 fb       	bst	r25, 7
    144e:	07 2e       	mov	r0, r23
    1450:	16 f4       	brtc	.+4      	; 0x1456 <__divmodhi4+0xa>
    1452:	00 94       	com	r0
    1454:	06 d0       	rcall	.+12     	; 0x1462 <__divmodhi4_neg1>
    1456:	77 fd       	sbrc	r23, 7
    1458:	08 d0       	rcall	.+16     	; 0x146a <__divmodhi4_neg2>
    145a:	e4 df       	rcall	.-56     	; 0x1424 <__udivmodhi4>
    145c:	07 fc       	sbrc	r0, 7
    145e:	05 d0       	rcall	.+10     	; 0x146a <__divmodhi4_neg2>
    1460:	3e f4       	brtc	.+14     	; 0x1470 <__divmodhi4_exit>

00001462 <__divmodhi4_neg1>:
    1462:	90 95       	com	r25
    1464:	81 95       	neg	r24
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	08 95       	ret

0000146a <__divmodhi4_neg2>:
    146a:	70 95       	com	r23
    146c:	61 95       	neg	r22
    146e:	7f 4f       	sbci	r23, 0xFF	; 255

00001470 <__divmodhi4_exit>:
    1470:	08 95       	ret

00001472 <__udivmodsi4>:
    1472:	a1 e2       	ldi	r26, 0x21	; 33
    1474:	1a 2e       	mov	r1, r26
    1476:	aa 1b       	sub	r26, r26
    1478:	bb 1b       	sub	r27, r27
    147a:	fd 01       	movw	r30, r26
    147c:	0d c0       	rjmp	.+26     	; 0x1498 <__udivmodsi4_ep>

0000147e <__udivmodsi4_loop>:
    147e:	aa 1f       	adc	r26, r26
    1480:	bb 1f       	adc	r27, r27
    1482:	ee 1f       	adc	r30, r30
    1484:	ff 1f       	adc	r31, r31
    1486:	a2 17       	cp	r26, r18
    1488:	b3 07       	cpc	r27, r19
    148a:	e4 07       	cpc	r30, r20
    148c:	f5 07       	cpc	r31, r21
    148e:	20 f0       	brcs	.+8      	; 0x1498 <__udivmodsi4_ep>
    1490:	a2 1b       	sub	r26, r18
    1492:	b3 0b       	sbc	r27, r19
    1494:	e4 0b       	sbc	r30, r20
    1496:	f5 0b       	sbc	r31, r21

00001498 <__udivmodsi4_ep>:
    1498:	66 1f       	adc	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	88 1f       	adc	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	1a 94       	dec	r1
    14a2:	69 f7       	brne	.-38     	; 0x147e <__udivmodsi4_loop>
    14a4:	60 95       	com	r22
    14a6:	70 95       	com	r23
    14a8:	80 95       	com	r24
    14aa:	90 95       	com	r25
    14ac:	9b 01       	movw	r18, r22
    14ae:	ac 01       	movw	r20, r24
    14b0:	bd 01       	movw	r22, r26
    14b2:	cf 01       	movw	r24, r30
    14b4:	08 95       	ret

000014b6 <__tablejump2__>:
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31

000014ba <__tablejump__>:
    14ba:	05 90       	lpm	r0, Z+
    14bc:	f4 91       	lpm	r31, Z
    14be:	e0 2d       	mov	r30, r0
    14c0:	09 94       	ijmp

000014c2 <isupper>:
    14c2:	85 fd       	sbrc	r24, 5
    14c4:	33 c0       	rjmp	.+102    	; 0x152c <__ctype_isfalse>

000014c6 <isalpha>:
    14c6:	80 62       	ori	r24, 0x20	; 32

000014c8 <islower>:
    14c8:	91 11       	cpse	r25, r1
    14ca:	30 c0       	rjmp	.+96     	; 0x152c <__ctype_isfalse>
    14cc:	81 56       	subi	r24, 0x61	; 97
    14ce:	8a 51       	subi	r24, 0x1A	; 26
    14d0:	e0 f7       	brcc	.-8      	; 0x14ca <islower+0x2>
    14d2:	08 95       	ret

000014d4 <fputc>:
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	8c 01       	movw	r16, r24
    14de:	eb 01       	movw	r28, r22
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	81 fd       	sbrc	r24, 1
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <fputc+0x18>
    14e6:	0f ef       	ldi	r16, 0xFF	; 255
    14e8:	1f ef       	ldi	r17, 0xFF	; 255
    14ea:	1a c0       	rjmp	.+52     	; 0x1520 <fputc+0x4c>
    14ec:	82 ff       	sbrs	r24, 2
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <fputc+0x36>
    14f0:	2e 81       	ldd	r18, Y+6	; 0x06
    14f2:	3f 81       	ldd	r19, Y+7	; 0x07
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	28 17       	cp	r18, r24
    14fa:	39 07       	cpc	r19, r25
    14fc:	64 f4       	brge	.+24     	; 0x1516 <fputc+0x42>
    14fe:	e8 81       	ld	r30, Y
    1500:	f9 81       	ldd	r31, Y+1	; 0x01
    1502:	01 93       	st	Z+, r16
    1504:	f9 83       	std	Y+1, r31	; 0x01
    1506:	e8 83       	st	Y, r30
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <fputc+0x42>
    150a:	e8 85       	ldd	r30, Y+8	; 0x08
    150c:	f9 85       	ldd	r31, Y+9	; 0x09
    150e:	80 2f       	mov	r24, r16
    1510:	09 95       	icall
    1512:	89 2b       	or	r24, r25
    1514:	41 f7       	brne	.-48     	; 0x14e6 <fputc+0x12>
    1516:	8e 81       	ldd	r24, Y+6	; 0x06
    1518:	9f 81       	ldd	r25, Y+7	; 0x07
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	9f 83       	std	Y+7, r25	; 0x07
    151e:	8e 83       	std	Y+6, r24	; 0x06
    1520:	c8 01       	movw	r24, r16
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <__ctype_isfalse>:
    152c:	99 27       	eor	r25, r25
    152e:	88 27       	eor	r24, r24

00001530 <__ctype_istrue>:
    1530:	08 95       	ret

00001532 <_exit>:
    1532:	f8 94       	cli

00001534 <__stop_program>:
    1534:	ff cf       	rjmp	.-2      	; 0x1534 <__stop_program>
