
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00002180  00002214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002180  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f4  0080012c  0080012c  00002240  2**0
                  ALLOC
  3 .stab         00002eec  00000000  00000000  00002240  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  0000512c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005f2b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000878  00000000  00000000  00005f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c6bf  00000000  00000000  000067d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039f2  00000000  00000000  00012e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007efa  00000000  00000000  00016883  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001530  00000000  00000000  0001e780  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004607  00000000  00000000  0001fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007f2f  00000000  00000000  000242b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000888  00000000  00000000  0002c1e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9c c0       	rjmp	.+312    	; 0x13a <__ctors_end>
       2:	00 00       	nop
       4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
       6:	00 00       	nop
       8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_3>
      10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
      12:	00 00       	nop
      14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
      16:	00 00       	nop
      18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
      22:	00 00       	nop
      24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c3       	rjmp	.+1794   	; 0x72c <__vector_10>
      2a:	00 00       	nop
      2c:	4a c4       	rjmp	.+2196   	; 0x8c2 <__vector_11>
      2e:	00 00       	nop
      30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
      32:	00 00       	nop
      34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
      36:	00 00       	nop
      38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
      42:	00 00       	nop
      44:	a1 c0       	rjmp	.+322    	; 0x188 <__bad_interrupt>
      46:	00 00       	nop
      48:	9f c0       	rjmp	.+318    	; 0x188 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
      52:	00 00       	nop
      54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
      56:	00 00       	nop
      58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__vector_23>
      60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
      66:	00 00       	nop
      68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
      72:	00 00       	nop
      74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
      76:	00 00       	nop
      78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
      7e:	00 00       	nop
      80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
      82:	00 00       	nop
      84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
      86:	00 00       	nop
      88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
      92:	00 00       	nop
      94:	79 c0       	rjmp	.+242    	; 0x188 <__bad_interrupt>
      96:	00 00       	nop
      98:	77 c0       	rjmp	.+238    	; 0x188 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	75 c0       	rjmp	.+234    	; 0x188 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	73 c0       	rjmp	.+230    	; 0x188 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__vector_41>
      a8:	6f c0       	rjmp	.+222    	; 0x188 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <__ctors_start>:
     138:	b9 0a       	sbc	r11, r25

0000013a <__ctors_end>:
     13a:	11 24       	eor	r1, r1
     13c:	1f be       	out	0x3f, r1	; 63
     13e:	cf ef       	ldi	r28, 0xFF	; 255
     140:	da e0       	ldi	r29, 0x0A	; 10
     142:	de bf       	out	0x3e, r29	; 62
     144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
     146:	11 e0       	ldi	r17, 0x01	; 1
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	e0 e8       	ldi	r30, 0x80	; 128
     14e:	f1 e2       	ldi	r31, 0x21	; 33
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x10>
     152:	05 90       	lpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ac 32       	cpi	r26, 0x2C	; 44
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0xc>

0000015c <__do_clear_bss>:
     15c:	22 e0       	ldi	r18, 0x02	; 2
     15e:	ac e2       	ldi	r26, 0x2C	; 44
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a0 32       	cpi	r26, 0x20	; 32
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	ca e3       	ldi	r28, 0x3A	; 58
     170:	d1 e0       	ldi	r29, 0x01	; 1
     172:	04 c0       	rjmp	.+8      	; 0x17c <__do_global_ctors+0x10>
     174:	22 97       	sbiw	r28, 0x02	; 2
     176:	fe 01       	movw	r30, r28
     178:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__tablejump__>
     17c:	c8 33       	cpi	r28, 0x38	; 56
     17e:	d1 07       	cpc	r29, r17
     180:	c9 f7       	brne	.-14     	; 0x174 <__do_global_ctors+0x8>
     182:	54 d0       	rcall	.+168    	; 0x22c <main>
     184:	0c 94 be 10 	jmp	0x217c	; 0x217c <_exit>

00000188 <__bad_interrupt>:
     188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <EVENT_USB_Device_Connect>:
	uint8_t hi = ADCH;
	
	uint16_t val = (hi << 8) + lo;
	
	return val;
}
     18a:	08 95       	ret

0000018c <EVENT_USB_Device_Disconnect>:
     18c:	08 95       	ret

0000018e <EVENT_USB_Device_ConfigurationChanged>:
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	60 c5       	rjmp	.+2752   	; 0xc54 <CDC_Device_ConfigureEndpoints>

00000194 <EVENT_USB_Device_ControlRequest>:
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	53 c6       	rjmp	.+3238   	; 0xe40 <CDC_Device_ProcessControlRequest>

0000019a <EVENT_CDC_Device_ControLineStateChanged>:
     19a:	08 95       	ret

0000019c <IrReceived>:
			PORTC &= ~_BV(7);
#endif

void IrReceived(int data)
{
	switch(data){
     19c:	8a 36       	cpi	r24, 0x6A	; 106
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	92 07       	cpc	r25, r18
     1a2:	91 f0       	breq	.+36     	; 0x1c8 <IrReceived+0x2c>
     1a4:	2c f4       	brge	.+10     	; 0x1b0 <IrReceived+0x14>
     1a6:	89 36       	cpi	r24, 0x69	; 105
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	92 07       	cpc	r25, r18
     1ac:	99 f4       	brne	.+38     	; 0x1d4 <IrReceived+0x38>
     1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <IrReceived+0x26>
     1b0:	8b 36       	cpi	r24, 0x6B	; 107
     1b2:	41 e0       	ldi	r20, 0x01	; 1
     1b4:	94 07       	cpc	r25, r20
     1b6:	59 f0       	breq	.+22     	; 0x1ce <IrReceived+0x32>
     1b8:	81 15       	cp	r24, r1
     1ba:	24 e0       	ldi	r18, 0x04	; 4
     1bc:	92 07       	cpc	r25, r18
     1be:	51 f4       	brne	.+20     	; 0x1d4 <IrReceived+0x38>
     1c0:	08 95       	ret
	case IR_CODE_RELAY_ON:
		RELAY_ON;
     1c2:	29 9a       	sbi	0x05, 1	; 5
		LEDG_ON;
     1c4:	8d 9a       	sbi	0x11, 5	; 17
		break;
     1c6:	08 95       	ret
	case IR_CODE_RELAY_OFF:
		RELAY_OFF;
     1c8:	29 98       	cbi	0x05, 1	; 5
		LEDG_OFF;
     1ca:	8d 98       	cbi	0x11, 5	; 17
		break;
     1cc:	08 95       	ret
	case IR_CODE_MOTOR_OFF:
		MotorPwm(0);
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <IrReceived+0x44>
		break;
	case IR_CODE_INVALID:
		break;
	default:
		if(-256 < data && data < 256) MotorPwm(data);
     1d4:	9c 01       	movw	r18, r24
     1d6:	21 50       	subi	r18, 0x01	; 1
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	2f 3f       	cpi	r18, 0xFF	; 255
     1dc:	31 40       	sbci	r19, 0x01	; 1
     1de:	10 f4       	brcc	.+4      	; 0x1e4 <IrReceived+0x48>
     1e0:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <MotorPwm>
     1e4:	08 95       	ret

000001e6 <SetupHardware>:
		_delay_ms(300);
	}
}

void SetupHardware(void)
{
     1e6:	cf 93       	push	r28
	MCUSR &= ~(1 << WDRF);
     1e8:	84 b7       	in	r24, 0x34	; 52
     1ea:	87 7f       	andi	r24, 0xF7	; 247
     1ec:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1ee:	88 e1       	ldi	r24, 0x18	; 24
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	80 93 60 00 	sts	0x0060, r24
     1f8:	10 92 60 00 	sts	0x0060, r1
     1fc:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1fe:	c0 e8       	ldi	r28, 0x80	; 128
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	c0 93 61 00 	sts	0x0061, r28
     20a:	80 93 61 00 	sts	0x0061, r24
     20e:	0f be       	out	0x3f, r0	; 63

	clock_prescale_set(clock_div_1);

	USB_Init();
     210:	70 d2       	rcall	.+1248   	; 0x6f2 <USB_Init>

	// disable JTAG on borad
	MCUCR = 0x80; MCUCR = 0x80;
     212:	c5 bf       	out	0x35, r28	; 53
     214:	c5 bf       	out	0x35, r28	; 53

#if IR_RECEIVER
	IrReceiveSetup();
     216:	0e 94 4f 0a 	call	0x149e	; 0x149e <IrReceiveSetup>
	InitMotor();
     21a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <InitMotor>
	InitRotEncoder();
#endif

	// ------------------------------------------------------------

	sbi(DDRC, 7);	// BOARD LED
     21e:	3f 9a       	sbi	0x07, 7	; 7

#if IR_RECEIVER
	sbi(DDRB, 1);	// RELAY
     220:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRF, 4);	// LED0
     222:	84 9a       	sbi	0x10, 4	; 16
	sbi(DDRF, 5);	// LED1
     224:	85 9a       	sbi	0x10, 5	; 16
	sbi(DDRF, 6);	// LED2
     226:	86 9a       	sbi	0x10, 6	; 16
	ADCSRA |= _BV(ADPS0);  // prescaler 128 -> ADC clock 125kHz
	ADCSRA |= _BV(ADPS1);
	ADCSRA |= _BV(ADPS2);
	ADCSRA |= _BV(ADEN); // A/D enable
#endif
}
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <main>:
	}
	//fprintf(&USBSerialStream, "received : %d\r\n", sdata);
}

int main(void)
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	da 95       	dec	r29
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     240:	d2 df       	rcall	.-92     	; 0x1e6 <SetupHardware>
	
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	72 e0       	ldi	r23, 0x02	; 2
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	e6 d5       	rcall	.+3020   	; 0xe18 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     24c:	78 94       	sei

	GlobalInterruptEnable();

	int  cnt;
	char str[256];
	for(cnt = 0; ; cnt++){
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	10 e0       	ldi	r17, 0x00	; 0
		if(isalpha(c)){
			fputc(c   , &USBSerialStream);
			fputc('\n', &USBSerialStream);
		}

		sprintf(str, "%d \r\n", cnt);
     252:	f5 e2       	ldi	r31, 0x25	; 37
     254:	cf 2e       	mov	r12, r31
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	df 2e       	mov	r13, r31
     25a:	aa 24       	eor	r10, r10
     25c:	a3 94       	inc	r10
     25e:	b1 2c       	mov	r11, r1
     260:	ac 0e       	add	r10, r28
     262:	bd 1e       	adc	r11, r29
	GlobalInterruptEnable();

	int  cnt;
	char str[256];
	for(cnt = 0; ; cnt++){
		char c = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	95 d5       	rcall	.+2858   	; 0xd94 <CDC_Device_ReceiveByte>
     26a:	7c 01       	movw	r14, r24
		if(isalpha(c)){
     26c:	ff 24       	eor	r15, r15
     26e:	c7 01       	movw	r24, r14
     270:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <isalpha>
     274:	89 2b       	or	r24, r25
     276:	59 f0       	breq	.+22     	; 0x28e <main+0x62>
			fputc(c   , &USBSerialStream);
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	72 e0       	ldi	r23, 0x02	; 2
     27c:	c7 01       	movw	r24, r14
     27e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
			fputc('\n', &USBSerialStream);
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	72 e0       	ldi	r23, 0x02	; 2
     286:	8a e0       	ldi	r24, 0x0A	; 10
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
		}

		sprintf(str, "%d \r\n", cnt);
     28e:	1f 93       	push	r17
     290:	0f 93       	push	r16
     292:	df 92       	push	r13
     294:	cf 92       	push	r12
     296:	bf 92       	push	r11
     298:	af 92       	push	r10
     29a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <sprintf>
		
		//fputs(str, &USBSerialStream);
			
#if IR_RECEIVER
		{
			int data = IrReceive();
     29e:	0e 94 8d 0a 	call	0x151a	; 0x151a <IrReceive>
			if(data != IR_CODE_INVALID) IrReceived(data);
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	81 15       	cp	r24, r1
     2b0:	24 e0       	ldi	r18, 0x04	; 4
     2b2:	92 07       	cpc	r25, r18
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <main+0x8c>
     2b6:	72 df       	rcall	.-284    	; 0x19c <IrReceived>
		if(cnt % 4 == 2) LEDB_ON;
		if(cnt % 4 == 3) LEDW_ON;
#endif
#endif

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	55 d5       	rcall	.+2730   	; 0xd68 <CDC_Device_USBTask>
		USB_USBTask();
     2be:	ae d4       	rcall	.+2396   	; 0xc1c <USB_USBTask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	95 ea       	ldi	r25, 0xA5	; 165
     2c4:	2e e0       	ldi	r18, 0x0E	; 14
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	90 40       	sbci	r25, 0x00	; 0
     2ca:	20 40       	sbci	r18, 0x00	; 0
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x9a>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0xa4>
     2d0:	00 00       	nop

	GlobalInterruptEnable();

	int  cnt;
	char str[256];
	for(cnt = 0; ; cnt++){
     2d2:	0f 5f       	subi	r16, 0xFF	; 255
     2d4:	1f 4f       	sbci	r17, 0xFF	; 255

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
		USB_USBTask();
		
		_delay_ms(300);
	}
     2d6:	c6 cf       	rjmp	.-116    	; 0x264 <main+0x38>

000002d8 <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     2d8:	29 2f       	mov	r18, r25
     2da:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2dc:	22 30       	cpi	r18, 0x02	; 2
     2de:	31 05       	cpc	r19, r1
     2e0:	39 f0       	breq	.+14     	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x18>
     2e2:	23 30       	cpi	r18, 0x03	; 3
     2e4:	31 05       	cpc	r19, r1
     2e6:	49 f0       	breq	.+18     	; 0x2fa <CALLBACK_USB_GetDescriptor+0x22>
     2e8:	21 30       	cpi	r18, 0x01	; 1
     2ea:	31 05       	cpc	r19, r1
     2ec:	21 f1       	breq	.+72     	; 0x336 <CALLBACK_USB_GetDescriptor+0x5e>
     2ee:	28 c0       	rjmp	.+80     	; 0x340 <CALLBACK_USB_GetDescriptor+0x68>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2f0:	ee e3       	ldi	r30, 0x3E	; 62
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     2f4:	88 ee       	ldi	r24, 0xE8	; 232
     2f6:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     2f8:	27 c0       	rjmp	.+78     	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     2fa:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	91 05       	cpc	r25, r1
     300:	61 f0       	breq	.+24     	; 0x31a <CALLBACK_USB_GetDescriptor+0x42>
     302:	82 30       	cpi	r24, 0x02	; 2
     304:	91 05       	cpc	r25, r1
     306:	81 f0       	breq	.+32     	; 0x328 <CALLBACK_USB_GetDescriptor+0x50>
     308:	89 2b       	or	r24, r25
     30a:	d1 f4       	brne	.+52     	; 0x340 <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     30c:	e4 ee       	ldi	r30, 0xE4	; 228
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	e4 91       	lpm	r30, Z
     312:	f0 e0       	ldi	r31, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     314:	84 ee       	ldi	r24, 0xE4	; 228
     316:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     318:	17 c0       	rjmp	.+46     	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     31a:	ea ec       	ldi	r30, 0xCA	; 202
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	e4 91       	lpm	r30, Z
     320:	f0 e0       	ldi	r31, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     322:	8a ec       	ldi	r24, 0xCA	; 202
     324:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     326:	10 c0       	rjmp	.+32     	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     328:	ec ea       	ldi	r30, 0xAC	; 172
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	e4 91       	lpm	r30, Z
     32e:	f0 e0       	ldi	r31, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     330:	8c ea       	ldi	r24, 0xAC	; 172
     332:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     334:	09 c0       	rjmp	.+18     	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     336:	e2 e1       	ldi	r30, 0x12	; 18
     338:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     33a:	86 e2       	ldi	r24, 0x26	; 38
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	04 c0       	rjmp	.+8      	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     340:	e0 e0       	ldi	r30, 0x00	; 0
     342:	f0 e0       	ldi	r31, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     348:	da 01       	movw	r26, r20
     34a:	8d 93       	st	X+, r24
     34c:	9c 93       	st	X, r25
	return Size;
}
     34e:	cf 01       	movw	r24, r30
     350:	08 95       	ret

00000352 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     352:	40 91 1a 02 	lds	r20, 0x021A
     356:	50 91 1b 02 	lds	r21, 0x021B
     35a:	46 17       	cp	r20, r22
     35c:	57 07       	cpc	r21, r23
     35e:	48 f0       	brcs	.+18     	; 0x372 <Endpoint_Write_Control_Stream_LE+0x20>
     360:	61 15       	cp	r22, r1
     362:	71 05       	cpc	r23, r1
     364:	39 f4       	brne	.+14     	; 0x374 <Endpoint_Write_Control_Stream_LE+0x22>
     366:	40 91 e8 00 	lds	r20, 0x00E8
     36a:	4e 77       	andi	r20, 0x7E	; 126
     36c:	40 93 e8 00 	sts	0x00E8, r20
     370:	01 c0       	rjmp	.+2      	; 0x374 <Endpoint_Write_Control_Stream_LE+0x22>
     372:	ba 01       	movw	r22, r20
     374:	fc 01       	movw	r30, r24
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	33 c0       	rjmp	.+102    	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x8e>
     37a:	80 91 13 02 	lds	r24, 0x0213
     37e:	88 23       	and	r24, r24
     380:	09 f4       	brne	.+2      	; 0x384 <Endpoint_Write_Control_Stream_LE+0x32>
     382:	44 c0       	rjmp	.+136    	; 0x40c <Endpoint_Write_Control_Stream_LE+0xba>
     384:	85 30       	cpi	r24, 0x05	; 5
     386:	09 f4       	brne	.+2      	; 0x38a <Endpoint_Write_Control_Stream_LE+0x38>
     388:	43 c0       	rjmp	.+134    	; 0x410 <Endpoint_Write_Control_Stream_LE+0xbe>
     38a:	80 91 e8 00 	lds	r24, 0x00E8
     38e:	83 fd       	sbrc	r24, 3
     390:	41 c0       	rjmp	.+130    	; 0x414 <Endpoint_Write_Control_Stream_LE+0xc2>
     392:	80 91 e8 00 	lds	r24, 0x00E8
     396:	82 fd       	sbrc	r24, 2
     398:	33 c0       	rjmp	.+102    	; 0x400 <Endpoint_Write_Control_Stream_LE+0xae>
     39a:	80 91 e8 00 	lds	r24, 0x00E8
     39e:	80 ff       	sbrs	r24, 0
     3a0:	1f c0       	rjmp	.+62     	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x8e>
     3a2:	90 91 f3 00 	lds	r25, 0x00F3
     3a6:	80 91 f2 00 	lds	r24, 0x00F2
     3aa:	39 2f       	mov	r19, r25
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	a9 01       	movw	r20, r18
     3b0:	48 2b       	or	r20, r24
     3b2:	ca 01       	movw	r24, r20
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <Endpoint_Write_Control_Stream_LE+0x70>
     3b6:	41 91       	ld	r20, Z+
     3b8:	40 93 f1 00 	sts	0x00F1, r20
     3bc:	61 50       	subi	r22, 0x01	; 1
     3be:	71 09       	sbc	r23, r1
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	61 15       	cp	r22, r1
     3c4:	71 05       	cpc	r23, r1
     3c6:	19 f0       	breq	.+6      	; 0x3ce <Endpoint_Write_Control_Stream_LE+0x7c>
     3c8:	88 30       	cpi	r24, 0x08	; 8
     3ca:	91 05       	cpc	r25, r1
     3cc:	a0 f3       	brcs	.-24     	; 0x3b6 <Endpoint_Write_Control_Stream_LE+0x64>
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	08 97       	sbiw	r24, 0x08	; 8
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <Endpoint_Write_Control_Stream_LE+0x84>
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	80 91 e8 00 	lds	r24, 0x00E8
     3da:	8e 77       	andi	r24, 0x7E	; 126
     3dc:	80 93 e8 00 	sts	0x00E8, r24
     3e0:	61 15       	cp	r22, r1
     3e2:	71 05       	cpc	r23, r1
     3e4:	51 f6       	brne	.-108    	; 0x37a <Endpoint_Write_Control_Stream_LE+0x28>
     3e6:	41 11       	cpse	r20, r1
     3e8:	c8 cf       	rjmp	.-112    	; 0x37a <Endpoint_Write_Control_Stream_LE+0x28>
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <Endpoint_Write_Control_Stream_LE+0xae>
     3ec:	80 91 13 02 	lds	r24, 0x0213
     3f0:	88 23       	and	r24, r24
     3f2:	61 f0       	breq	.+24     	; 0x40c <Endpoint_Write_Control_Stream_LE+0xba>
     3f4:	85 30       	cpi	r24, 0x05	; 5
     3f6:	61 f0       	breq	.+24     	; 0x410 <Endpoint_Write_Control_Stream_LE+0xbe>
     3f8:	80 91 e8 00 	lds	r24, 0x00E8
     3fc:	83 fd       	sbrc	r24, 3
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <Endpoint_Write_Control_Stream_LE+0xc2>
     400:	80 91 e8 00 	lds	r24, 0x00E8
     404:	82 ff       	sbrs	r24, 2
     406:	f2 cf       	rjmp	.-28     	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x9a>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	08 95       	ret
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	08 95       	ret
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	08 95       	ret
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	08 95       	ret

00000418 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     418:	40 91 1a 02 	lds	r20, 0x021A
     41c:	50 91 1b 02 	lds	r21, 0x021B
     420:	46 17       	cp	r20, r22
     422:	57 07       	cpc	r21, r23
     424:	48 f0       	brcs	.+18     	; 0x438 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     426:	61 15       	cp	r22, r1
     428:	71 05       	cpc	r23, r1
     42a:	39 f4       	brne	.+14     	; 0x43a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     42c:	40 91 e8 00 	lds	r20, 0x00E8
     430:	4e 77       	andi	r20, 0x7E	; 126
     432:	40 93 e8 00 	sts	0x00E8, r20
     436:	01 c0       	rjmp	.+2      	; 0x43a <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     438:	ba 01       	movw	r22, r20
     43a:	fc 01       	movw	r30, r24
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	34 c0       	rjmp	.+104    	; 0x4a8 <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     440:	80 91 13 02 	lds	r24, 0x0213

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     444:	88 23       	and	r24, r24
     446:	09 f4       	brne	.+2      	; 0x44a <Endpoint_Write_Control_PStream_LE+0x32>
     448:	45 c0       	rjmp	.+138    	; 0x4d4 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     44a:	85 30       	cpi	r24, 0x05	; 5
     44c:	09 f4       	brne	.+2      	; 0x450 <Endpoint_Write_Control_PStream_LE+0x38>
     44e:	44 c0       	rjmp	.+136    	; 0x4d8 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     450:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     454:	83 fd       	sbrc	r24, 3
     456:	42 c0       	rjmp	.+132    	; 0x4dc <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     458:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     45c:	82 fd       	sbrc	r24, 2
     45e:	34 c0       	rjmp	.+104    	; 0x4c8 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     460:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     464:	80 ff       	sbrs	r24, 0
     466:	20 c0       	rjmp	.+64     	; 0x4a8 <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     468:	90 91 f3 00 	lds	r25, 0x00F3
     46c:	80 91 f2 00 	lds	r24, 0x00F2
     470:	39 2f       	mov	r19, r25
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	a9 01       	movw	r20, r18
     476:	48 2b       	or	r20, r24
     478:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     47a:	07 c0       	rjmp	.+14     	; 0x48a <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     47c:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     47e:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     482:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     484:	61 50       	subi	r22, 0x01	; 1
     486:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     488:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     48a:	61 15       	cp	r22, r1
     48c:	71 05       	cpc	r23, r1
     48e:	19 f0       	breq	.+6      	; 0x496 <Endpoint_Write_Control_PStream_LE+0x7e>
     490:	88 30       	cpi	r24, 0x08	; 8
     492:	91 05       	cpc	r25, r1
     494:	98 f3       	brcs	.-26     	; 0x47c <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	08 97       	sbiw	r24, 0x08	; 8
     49a:	09 f0       	breq	.+2      	; 0x49e <Endpoint_Write_Control_PStream_LE+0x86>
     49c:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     49e:	80 91 e8 00 	lds	r24, 0x00E8
     4a2:	8e 77       	andi	r24, 0x7E	; 126
     4a4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     4a8:	61 15       	cp	r22, r1
     4aa:	71 05       	cpc	r23, r1
     4ac:	49 f6       	brne	.-110    	; 0x440 <Endpoint_Write_Control_PStream_LE+0x28>
     4ae:	41 11       	cpse	r20, r1
     4b0:	c7 cf       	rjmp	.-114    	; 0x440 <Endpoint_Write_Control_PStream_LE+0x28>
     4b2:	0a c0       	rjmp	.+20     	; 0x4c8 <Endpoint_Write_Control_PStream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4b4:	80 91 13 02 	lds	r24, 0x0213

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4b8:	88 23       	and	r24, r24
     4ba:	61 f0       	breq	.+24     	; 0x4d4 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4bc:	85 30       	cpi	r24, 0x05	; 5
     4be:	61 f0       	breq	.+24     	; 0x4d8 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4c4:	83 fd       	sbrc	r24, 3
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4c8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     4cc:	82 ff       	sbrs	r24, 2
     4ce:	f2 cf       	rjmp	.-28     	; 0x4b4 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4de:	08 95       	ret

000004e0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     4e0:	98 2f       	mov	r25, r24
     4e2:	2c c0       	rjmp	.+88     	; 0x53c <Endpoint_ConfigureEndpoint_Prv+0x5c>
     4e4:	90 93 e9 00 	sts	0x00E9, r25
     4e8:	98 17       	cp	r25, r24
     4ea:	39 f0       	breq	.+14     	; 0x4fa <Endpoint_ConfigureEndpoint_Prv+0x1a>
     4ec:	70 91 ec 00 	lds	r23, 0x00EC
     4f0:	20 91 ed 00 	lds	r18, 0x00ED
     4f4:	50 91 f0 00 	lds	r21, 0x00F0
     4f8:	03 c0       	rjmp	.+6      	; 0x500 <Endpoint_ConfigureEndpoint_Prv+0x20>
     4fa:	24 2f       	mov	r18, r20
     4fc:	76 2f       	mov	r23, r22
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	21 fd       	sbrc	r18, 1
     502:	02 c0       	rjmp	.+4      	; 0x508 <Endpoint_ConfigureEndpoint_Prv+0x28>
     504:	9f 5f       	subi	r25, 0xFF	; 255
     506:	1a c0       	rjmp	.+52     	; 0x53c <Endpoint_ConfigureEndpoint_Prv+0x5c>
     508:	30 91 eb 00 	lds	r19, 0x00EB
     50c:	3e 7f       	andi	r19, 0xFE	; 254
     50e:	30 93 eb 00 	sts	0x00EB, r19
     512:	30 91 ed 00 	lds	r19, 0x00ED
     516:	3d 7f       	andi	r19, 0xFD	; 253
     518:	30 93 ed 00 	sts	0x00ED, r19
     51c:	30 91 eb 00 	lds	r19, 0x00EB
     520:	31 60       	ori	r19, 0x01	; 1
     522:	30 93 eb 00 	sts	0x00EB, r19
     526:	70 93 ec 00 	sts	0x00EC, r23
     52a:	20 93 ed 00 	sts	0x00ED, r18
     52e:	50 93 f0 00 	sts	0x00F0, r21
     532:	20 91 ee 00 	lds	r18, 0x00EE
     536:	27 fd       	sbrc	r18, 7
     538:	e5 cf       	rjmp	.-54     	; 0x504 <Endpoint_ConfigureEndpoint_Prv+0x24>
     53a:	07 c0       	rjmp	.+14     	; 0x54a <Endpoint_ConfigureEndpoint_Prv+0x6a>
     53c:	97 30       	cpi	r25, 0x07	; 7
     53e:	90 f2       	brcs	.-92     	; 0x4e4 <Endpoint_ConfigureEndpoint_Prv+0x4>
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	80 93 e9 00 	sts	0x00E9, r24
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	08 95       	ret
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret

0000054e <Endpoint_ConfigureEndpointTable>:
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	06 2f       	mov	r16, r22
     558:	ec 01       	movw	r28, r24
     55a:	10 e0       	ldi	r17, 0x00	; 0
     55c:	2f c0       	rjmp	.+94     	; 0x5bc <Endpoint_ConfigureEndpointTable+0x6e>
     55e:	98 81       	ld	r25, Y
     560:	91 11       	cpse	r25, r1
     562:	03 c0       	rjmp	.+6      	; 0x56a <Endpoint_ConfigureEndpointTable+0x1c>
     564:	1f 5f       	subi	r17, 0xFF	; 255
     566:	25 96       	adiw	r28, 0x05	; 5
     568:	29 c0       	rjmp	.+82     	; 0x5bc <Endpoint_ConfigureEndpointTable+0x6e>
     56a:	2c 81       	ldd	r18, Y+4	; 0x04
     56c:	e9 81       	ldd	r30, Y+1	; 0x01
     56e:	fa 81       	ldd	r31, Y+2	; 0x02
     570:	7b 81       	ldd	r23, Y+3	; 0x03
     572:	89 2f       	mov	r24, r25
     574:	8f 70       	andi	r24, 0x0F	; 15
     576:	87 30       	cpi	r24, 0x07	; 7
     578:	10 f0       	brcs	.+4      	; 0x57e <Endpoint_ConfigureEndpointTable+0x30>
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	22 c0       	rjmp	.+68     	; 0x5c2 <Endpoint_ConfigureEndpointTable+0x74>
     57e:	22 30       	cpi	r18, 0x02	; 2
     580:	10 f0       	brcs	.+4      	; 0x586 <Endpoint_ConfigureEndpointTable+0x38>
     582:	56 e0       	ldi	r21, 0x06	; 6
     584:	01 c0       	rjmp	.+2      	; 0x588 <Endpoint_ConfigureEndpointTable+0x3a>
     586:	52 e0       	ldi	r21, 0x02	; 2
     588:	28 e0       	ldi	r18, 0x08	; 8
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	03 c0       	rjmp	.+6      	; 0x596 <Endpoint_ConfigureEndpointTable+0x48>
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	2e 17       	cp	r18, r30
     598:	3f 07       	cpc	r19, r31
     59a:	d0 f3       	brcs	.-12     	; 0x590 <Endpoint_ConfigureEndpointTable+0x42>
     59c:	42 95       	swap	r20
     59e:	40 7f       	andi	r20, 0xF0	; 240
     5a0:	45 2b       	or	r20, r21
     5a2:	69 2f       	mov	r22, r25
     5a4:	66 1f       	adc	r22, r22
     5a6:	66 27       	eor	r22, r22
     5a8:	66 1f       	adc	r22, r22
     5aa:	90 e4       	ldi	r25, 0x40	; 64
     5ac:	79 9f       	mul	r23, r25
     5ae:	90 01       	movw	r18, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	62 2b       	or	r22, r18
     5b4:	95 df       	rcall	.-214    	; 0x4e0 <Endpoint_ConfigureEndpoint_Prv>
     5b6:	81 11       	cpse	r24, r1
     5b8:	d5 cf       	rjmp	.-86     	; 0x564 <Endpoint_ConfigureEndpointTable+0x16>
     5ba:	df cf       	rjmp	.-66     	; 0x57a <Endpoint_ConfigureEndpointTable+0x2c>
     5bc:	10 13       	cpse	r17, r16
     5be:	cf cf       	rjmp	.-98     	; 0x55e <Endpoint_ConfigureEndpointTable+0x10>
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     5cc:	80 91 14 02 	lds	r24, 0x0214
     5d0:	87 fd       	sbrc	r24, 7
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5d4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     5d8:	80 ff       	sbrs	r24, 0
     5da:	0e c0       	rjmp	.+28     	; 0x5f8 <Endpoint_ClearStatusStage+0x2c>
     5dc:	12 c0       	rjmp	.+36     	; 0x602 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5de:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     5e2:	82 fd       	sbrc	r24, 2
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     5e6:	80 91 13 02 	lds	r24, 0x0213
     5ea:	81 11       	cpse	r24, r1
     5ec:	f8 cf       	rjmp	.-16     	; 0x5de <Endpoint_ClearStatusStage+0x12>
     5ee:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5f0:	80 91 e8 00 	lds	r24, 0x00E8
     5f4:	8b 77       	andi	r24, 0x7B	; 123
     5f6:	08 c0       	rjmp	.+16     	; 0x608 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     5f8:	80 91 13 02 	lds	r24, 0x0213
     5fc:	81 11       	cpse	r24, r1
     5fe:	ea cf       	rjmp	.-44     	; 0x5d4 <Endpoint_ClearStatusStage+0x8>
     600:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     602:	80 91 e8 00 	lds	r24, 0x00E8
     606:	8e 77       	andi	r24, 0x7E	; 126
     608:	80 93 e8 00 	sts	0x00E8, r24
     60c:	08 95       	ret

0000060e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     60e:	80 91 e4 00 	lds	r24, 0x00E4
     612:	90 91 e5 00 	lds	r25, 0x00E5
     616:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     618:	20 91 ec 00 	lds	r18, 0x00EC
     61c:	20 fd       	sbrc	r18, 0
     61e:	1f c0       	rjmp	.+62     	; 0x65e <Endpoint_WaitUntilReady+0x50>
     620:	23 c0       	rjmp	.+70     	; 0x668 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     622:	20 91 13 02 	lds	r18, 0x0213

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     626:	22 23       	and	r18, r18
     628:	91 f0       	breq	.+36     	; 0x64e <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     62a:	25 30       	cpi	r18, 0x05	; 5
     62c:	91 f0       	breq	.+36     	; 0x652 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     62e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     632:	25 fd       	sbrc	r18, 5
     634:	10 c0       	rjmp	.+32     	; 0x656 <Endpoint_WaitUntilReady+0x48>
     636:	20 91 e4 00 	lds	r18, 0x00E4
     63a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     63e:	28 17       	cp	r18, r24
     640:	39 07       	cpc	r19, r25
     642:	51 f3       	breq	.-44     	; 0x618 <Endpoint_WaitUntilReady+0xa>
     644:	41 50       	subi	r20, 0x01	; 1
     646:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     648:	39 f7       	brne	.-50     	; 0x618 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     65e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     662:	20 ff       	sbrs	r18, 0
     664:	de cf       	rjmp	.-68     	; 0x622 <Endpoint_WaitUntilReady+0x14>
     666:	f9 cf       	rjmp	.-14     	; 0x65a <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     668:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     66c:	22 ff       	sbrs	r18, 2
     66e:	d9 cf       	rjmp	.-78     	; 0x622 <Endpoint_WaitUntilReady+0x14>
     670:	f4 cf       	rjmp	.-24     	; 0x65a <Endpoint_WaitUntilReady+0x4c>

00000672 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     67a:	4b d0       	rcall	.+150    	; 0x712 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     67c:	52 d0       	rcall	.+164    	; 0x722 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     67e:	c8 ed       	ldi	r28, 0xD8	; 216
     680:	d0 e0       	ldi	r29, 0x00	; 0
     682:	88 81       	ld	r24, Y
     684:	8f 77       	andi	r24, 0x7F	; 127
     686:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     688:	88 81       	ld	r24, Y
     68a:	80 68       	ori	r24, 0x80	; 128
     68c:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     68e:	88 81       	ld	r24, Y
     690:	8f 7d       	andi	r24, 0xDF	; 223
     692:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     694:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     696:	10 92 13 02 	sts	0x0213, r1
	USB_Device_ConfigurationNumber  = 0;
     69a:	10 92 0f 02 	sts	0x020F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     69e:	10 92 11 02 	sts	0x0211, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     6a2:	10 92 10 02 	sts	0x0210, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     6a6:	00 ee       	ldi	r16, 0xE0	; 224
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	f8 01       	movw	r30, r16
     6ac:	80 81       	ld	r24, Z
     6ae:	8b 7f       	andi	r24, 0xFB	; 251
     6b0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     6b2:	88 81       	ld	r24, Y
     6b4:	81 60       	ori	r24, 0x01	; 1
     6b6:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6b8:	42 e0       	ldi	r20, 0x02	; 2
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	10 df       	rcall	.-480    	; 0x4e0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     6c0:	e1 ee       	ldi	r30, 0xE1	; 225
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	8e 7f       	andi	r24, 0xFE	; 254
     6c8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     6ca:	e2 ee       	ldi	r30, 0xE2	; 226
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	80 81       	ld	r24, Z
     6d0:	81 60       	ori	r24, 0x01	; 1
     6d2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     6d4:	80 81       	ld	r24, Z
     6d6:	88 60       	ori	r24, 0x08	; 8
     6d8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     6da:	f8 01       	movw	r30, r16
     6dc:	80 81       	ld	r24, Z
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     6e2:	88 81       	ld	r24, Y
     6e4:	80 61       	ori	r24, 0x10	; 16
     6e6:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     6f2:	e8 ed       	ldi	r30, 0xD8	; 216
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	8f 7e       	andi	r24, 0xEF	; 239
     6fa:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     6fc:	e7 ed       	ldi	r30, 0xD7	; 215
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	81 60       	ori	r24, 0x01	; 1
     704:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 12 02 	sts	0x0212, r24

	USB_ResetInterface();
     710:	b0 cf       	rjmp	.-160    	; 0x672 <USB_ResetInterface>

00000712 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     712:	e8 ed       	ldi	r30, 0xD8	; 216
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	8e 7f       	andi	r24, 0xFE	; 254
     71a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     71c:	10 92 e2 00 	sts	0x00E2, r1
     720:	08 95       	ret

00000722 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     722:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     726:	10 92 e1 00 	sts	0x00E1, r1
     72a:	08 95       	ret

0000072c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     74e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     752:	82 ff       	sbrs	r24, 2
     754:	0a c0       	rjmp	.+20     	; 0x76a <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     756:	80 91 e2 00 	lds	r24, 0x00E2
     75a:	82 ff       	sbrs	r24, 2
     75c:	06 c0       	rjmp	.+12     	; 0x76a <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     75e:	80 91 e1 00 	lds	r24, 0x00E1
     762:	8b 7f       	andi	r24, 0xFB	; 251
     764:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     768:	58 d2       	rcall	.+1200   	; 0xc1a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     76a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     76e:	80 ff       	sbrs	r24, 0
     770:	1d c0       	rjmp	.+58     	; 0x7ac <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     772:	80 91 d8 00 	lds	r24, 0x00D8
     776:	80 ff       	sbrs	r24, 0
     778:	19 c0       	rjmp	.+50     	; 0x7ac <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     77a:	80 91 da 00 	lds	r24, 0x00DA
     77e:	8e 7f       	andi	r24, 0xFE	; 254
     780:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     784:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     788:	80 ff       	sbrs	r24, 0
     78a:	0c c0       	rjmp	.+24     	; 0x7a4 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     78c:	80 e1       	ldi	r24, 0x10	; 16
     78e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     790:	82 e1       	ldi	r24, 0x12	; 18
     792:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     794:	09 b4       	in	r0, 0x29	; 41
     796:	00 fe       	sbrs	r0, 0
     798:	fd cf       	rjmp	.-6      	; 0x794 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	80 93 13 02 	sts	0x0213, r24
			EVENT_USB_Device_Connect();
     7a0:	f4 dc       	rcall	.-1560   	; 0x18a <EVENT_USB_Device_Connect>
     7a2:	04 c0       	rjmp	.+8      	; 0x7ac <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7a4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     7a6:	10 92 13 02 	sts	0x0213, r1
			EVENT_USB_Device_Disconnect();
     7aa:	f0 dc       	rcall	.-1568   	; 0x18c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     7ac:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	18 c0       	rjmp	.+48     	; 0x7e4 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     7b4:	80 91 e2 00 	lds	r24, 0x00E2
     7b8:	80 ff       	sbrs	r24, 0
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     7bc:	80 91 e2 00 	lds	r24, 0x00E2
     7c0:	8e 7f       	andi	r24, 0xFE	; 254
     7c2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     7c6:	80 91 e2 00 	lds	r24, 0x00E2
     7ca:	80 61       	ori	r24, 0x10	; 16
     7cc:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     7d0:	80 91 d8 00 	lds	r24, 0x00D8
     7d4:	80 62       	ori	r24, 0x20	; 32
     7d6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7da:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     7dc:	85 e0       	ldi	r24, 0x05	; 5
     7de:	80 93 13 02 	sts	0x0213, r24
		EVENT_USB_Device_Suspend();
     7e2:	1b d2       	rcall	.+1078   	; 0xc1a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     7e4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     7e8:	84 ff       	sbrs	r24, 4
     7ea:	2f c0       	rjmp	.+94     	; 0x84a <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     7ec:	80 91 e2 00 	lds	r24, 0x00E2
     7f0:	84 ff       	sbrs	r24, 4
     7f2:	2b c0       	rjmp	.+86     	; 0x84a <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     7f4:	80 e1       	ldi	r24, 0x10	; 16
     7f6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     7f8:	82 e1       	ldi	r24, 0x12	; 18
     7fa:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     7fc:	09 b4       	in	r0, 0x29	; 41
     7fe:	00 fe       	sbrs	r0, 0
     800:	fd cf       	rjmp	.-6      	; 0x7fc <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     802:	80 91 d8 00 	lds	r24, 0x00D8
     806:	8f 7d       	andi	r24, 0xDF	; 223
     808:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     80c:	80 91 e1 00 	lds	r24, 0x00E1
     810:	8f 7e       	andi	r24, 0xEF	; 239
     812:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     816:	80 91 e2 00 	lds	r24, 0x00E2
     81a:	8f 7e       	andi	r24, 0xEF	; 239
     81c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     820:	80 91 e2 00 	lds	r24, 0x00E2
     824:	81 60       	ori	r24, 0x01	; 1
     826:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     82a:	80 91 0f 02 	lds	r24, 0x020F
     82e:	88 23       	and	r24, r24
     830:	11 f0       	breq	.+4      	; 0x836 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	07 c0       	rjmp	.+14     	; 0x844 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     836:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     83a:	87 ff       	sbrs	r24, 7
     83c:	02 c0       	rjmp	.+4      	; 0x842 <__vector_10+0x116>
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	01 c0       	rjmp	.+2      	; 0x844 <__vector_10+0x118>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 13 02 	sts	0x0213, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     848:	e8 d1       	rcall	.+976    	; 0xc1a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     84a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     84e:	83 ff       	sbrs	r24, 3
     850:	27 c0       	rjmp	.+78     	; 0x8a0 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     852:	80 91 e2 00 	lds	r24, 0x00E2
     856:	83 ff       	sbrs	r24, 3
     858:	23 c0       	rjmp	.+70     	; 0x8a0 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     85a:	80 91 e1 00 	lds	r24, 0x00E1
     85e:	87 7f       	andi	r24, 0xF7	; 247
     860:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	80 93 13 02 	sts	0x0213, r24
		USB_Device_ConfigurationNumber = 0;
     86a:	10 92 0f 02 	sts	0x020F, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     86e:	80 91 e1 00 	lds	r24, 0x00E1
     872:	8e 7f       	andi	r24, 0xFE	; 254
     874:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     878:	80 91 e2 00 	lds	r24, 0x00E2
     87c:	8e 7f       	andi	r24, 0xFE	; 254
     87e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     882:	80 91 e2 00 	lds	r24, 0x00E2
     886:	80 61       	ori	r24, 0x10	; 16
     888:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     88c:	42 e0       	ldi	r20, 0x02	; 2
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	26 de       	rcall	.-948    	; 0x4e0 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     894:	80 91 f0 00 	lds	r24, 0x00F0
     898:	88 60       	ori	r24, 0x08	; 8
     89a:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     89e:	bd d1       	rcall	.+890    	; 0xc1a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     8a0:	ff 91       	pop	r31
     8a2:	ef 91       	pop	r30
     8a4:	bf 91       	pop	r27
     8a6:	af 91       	pop	r26
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	7f 91       	pop	r23
     8ae:	6f 91       	pop	r22
     8b0:	5f 91       	pop	r21
     8b2:	4f 91       	pop	r20
     8b4:	3f 91       	pop	r19
     8b6:	2f 91       	pop	r18
     8b8:	0f 90       	pop	r0
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	0f 90       	pop	r0
     8be:	1f 90       	pop	r1
     8c0:	18 95       	reti

000008c2 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     8c2:	1f 92       	push	r1
     8c4:	0f 92       	push	r0
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	0f 92       	push	r0
     8ca:	11 24       	eor	r1, r1
     8cc:	2f 93       	push	r18
     8ce:	3f 93       	push	r19
     8d0:	4f 93       	push	r20
     8d2:	5f 93       	push	r21
     8d4:	6f 93       	push	r22
     8d6:	7f 93       	push	r23
     8d8:	8f 93       	push	r24
     8da:	9f 93       	push	r25
     8dc:	af 93       	push	r26
     8de:	bf 93       	push	r27
     8e0:	cf 93       	push	r28
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     8e6:	80 91 e9 00 	lds	r24, 0x00E9
     8ea:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     8ec:	90 91 ec 00 	lds	r25, 0x00EC
     8f0:	90 ff       	sbrs	r25, 0
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__vector_11+0x36>
     8f4:	90 e8       	ldi	r25, 0x80	; 128
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <__vector_11+0x38>
     8f8:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     8fa:	c9 2f       	mov	r28, r25
     8fc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8fe:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     902:	80 91 f0 00 	lds	r24, 0x00F0
     906:	87 7f       	andi	r24, 0xF7	; 247
     908:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     90c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     90e:	1c d0       	rcall	.+56     	; 0x948 <USB_Device_ProcessControlRequest>
     910:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     914:	80 91 f0 00 	lds	r24, 0x00F0
     918:	88 60       	ori	r24, 0x08	; 8
     91a:	80 93 f0 00 	sts	0x00F0, r24
     91e:	cf 70       	andi	r28, 0x0F	; 15
     920:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	cf 91       	pop	r28
     92a:	bf 91       	pop	r27
     92c:	af 91       	pop	r26
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	7f 91       	pop	r23
     934:	6f 91       	pop	r22
     936:	5f 91       	pop	r21
     938:	4f 91       	pop	r20
     93a:	3f 91       	pop	r19
     93c:	2f 91       	pop	r18
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	ac 97       	sbiw	r28, 0x2c	; 44
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     95e:	e4 e1       	ldi	r30, 0x14	; 20
     960:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     962:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     966:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     968:	22 e0       	ldi	r18, 0x02	; 2
     96a:	ec 31       	cpi	r30, 0x1C	; 28
     96c:	f2 07       	cpc	r31, r18
     96e:	c9 f7       	brne	.-14     	; 0x962 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     970:	11 dc       	rcall	.-2014   	; 0x194 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     972:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     976:	83 ff       	sbrs	r24, 3
     978:	38 c1       	rjmp	.+624    	; 0xbea <__stack+0xeb>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     97a:	80 91 14 02 	lds	r24, 0x0214

		switch (USB_ControlRequest.bRequest)
     97e:	90 91 15 02 	lds	r25, 0x0215
     982:	95 30       	cpi	r25, 0x05	; 5
     984:	09 f4       	brne	.+2      	; 0x988 <USB_Device_ProcessControlRequest+0x40>
     986:	89 c0       	rjmp	.+274    	; 0xa9a <USB_Device_ProcessControlRequest+0x152>
     988:	38 f4       	brcc	.+14     	; 0x998 <USB_Device_ProcessControlRequest+0x50>
     98a:	91 30       	cpi	r25, 0x01	; 1
     98c:	c9 f1       	breq	.+114    	; 0xa00 <USB_Device_ProcessControlRequest+0xb8>
     98e:	70 f0       	brcs	.+28     	; 0x9ac <USB_Device_ProcessControlRequest+0x64>
     990:	93 30       	cpi	r25, 0x03	; 3
     992:	09 f0       	breq	.+2      	; 0x996 <USB_Device_ProcessControlRequest+0x4e>
     994:	2a c1       	rjmp	.+596    	; 0xbea <__stack+0xeb>
     996:	34 c0       	rjmp	.+104    	; 0xa00 <USB_Device_ProcessControlRequest+0xb8>
     998:	98 30       	cpi	r25, 0x08	; 8
     99a:	09 f4       	brne	.+2      	; 0x99e <USB_Device_ProcessControlRequest+0x56>
     99c:	f8 c0       	rjmp	.+496    	; 0xb8e <__stack+0x8f>
     99e:	99 30       	cpi	r25, 0x09	; 9
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <USB_Device_ProcessControlRequest+0x5c>
     9a2:	07 c1       	rjmp	.+526    	; 0xbb2 <__stack+0xb3>
     9a4:	96 30       	cpi	r25, 0x06	; 6
     9a6:	09 f0       	breq	.+2      	; 0x9aa <USB_Device_ProcessControlRequest+0x62>
     9a8:	20 c1       	rjmp	.+576    	; 0xbea <__stack+0xeb>
     9aa:	9d c0       	rjmp	.+314    	; 0xae6 <USB_Device_ProcessControlRequest+0x19e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9ac:	80 38       	cpi	r24, 0x80	; 128
     9ae:	21 f0       	breq	.+8      	; 0x9b8 <USB_Device_ProcessControlRequest+0x70>
     9b0:	82 38       	cpi	r24, 0x82	; 130
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <USB_Device_ProcessControlRequest+0x6e>
     9b4:	1a c1       	rjmp	.+564    	; 0xbea <__stack+0xeb>
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     9b8:	80 91 10 02 	lds	r24, 0x0210
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     9bc:	90 91 11 02 	lds	r25, 0x0211
     9c0:	99 23       	and	r25, r25
     9c2:	a1 f0       	breq	.+40     	; 0x9ec <USB_Device_ProcessControlRequest+0xa4>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     9c4:	82 60       	ori	r24, 0x02	; 2
     9c6:	12 c0       	rjmp	.+36     	; 0x9ec <USB_Device_ProcessControlRequest+0xa4>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     9c8:	80 91 18 02 	lds	r24, 0x0218
     9cc:	90 91 19 02 	lds	r25, 0x0219
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	99 27       	eor	r25, r25

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     9d4:	87 30       	cpi	r24, 0x07	; 7
     9d6:	08 f0       	brcs	.+2      	; 0x9da <USB_Device_ProcessControlRequest+0x92>
     9d8:	08 c1       	rjmp	.+528    	; 0xbea <__stack+0xeb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9da:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9de:	80 91 eb 00 	lds	r24, 0x00EB
     9e2:	85 fb       	bst	r24, 5
     9e4:	88 27       	eor	r24, r24
     9e6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9e8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9ec:	90 91 e8 00 	lds	r25, 0x00E8
     9f0:	97 7f       	andi	r25, 0xF7	; 247
     9f2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9f6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     9fa:	10 92 f1 00 	sts	0x00F1, r1
     9fe:	d2 c0       	rjmp	.+420    	; 0xba4 <__stack+0xa5>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a00:	88 23       	and	r24, r24
     a02:	19 f0       	breq	.+6      	; 0xa0a <USB_Device_ProcessControlRequest+0xc2>
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	09 f0       	breq	.+2      	; 0xa0a <USB_Device_ProcessControlRequest+0xc2>
     a08:	f0 c0       	rjmp	.+480    	; 0xbea <__stack+0xeb>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a0a:	8f 71       	andi	r24, 0x1F	; 31
     a0c:	21 f0       	breq	.+8      	; 0xa16 <USB_Device_ProcessControlRequest+0xce>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	09 f0       	breq	.+2      	; 0xa14 <USB_Device_ProcessControlRequest+0xcc>
     a12:	eb c0       	rjmp	.+470    	; 0xbea <__stack+0xeb>
     a14:	0b c0       	rjmp	.+22     	; 0xa2c <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a16:	80 91 16 02 	lds	r24, 0x0216
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0xd8>
     a1e:	e5 c0       	rjmp	.+458    	; 0xbea <__stack+0xeb>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a20:	93 30       	cpi	r25, 0x03	; 3
     a22:	09 f0       	breq	.+2      	; 0xa26 <USB_Device_ProcessControlRequest+0xde>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	80 93 11 02 	sts	0x0211, r24
     a2a:	31 c0       	rjmp	.+98     	; 0xa8e <USB_Device_ProcessControlRequest+0x146>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a2c:	80 91 16 02 	lds	r24, 0x0216
     a30:	81 11       	cpse	r24, r1
     a32:	2d c0       	rjmp	.+90     	; 0xa8e <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a34:	80 91 18 02 	lds	r24, 0x0218
     a38:	90 91 19 02 	lds	r25, 0x0219
     a3c:	8f 70       	andi	r24, 0x0F	; 15
     a3e:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a40:	28 2f       	mov	r18, r24
     a42:	21 50       	subi	r18, 0x01	; 1
     a44:	26 30       	cpi	r18, 0x06	; 6
     a46:	08 f0       	brcs	.+2      	; 0xa4a <USB_Device_ProcessControlRequest+0x102>
     a48:	d0 c0       	rjmp	.+416    	; 0xbea <__stack+0xeb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a4a:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a4e:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a52:	20 ff       	sbrs	r18, 0
     a54:	1c c0       	rjmp	.+56     	; 0xa8e <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a56:	20 91 15 02 	lds	r18, 0x0215
     a5a:	23 30       	cpi	r18, 0x03	; 3
     a5c:	21 f4       	brne	.+8      	; 0xa66 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a5e:	80 91 eb 00 	lds	r24, 0x00EB
     a62:	80 62       	ori	r24, 0x20	; 32
     a64:	12 c0       	rjmp	.+36     	; 0xa8a <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a66:	90 91 eb 00 	lds	r25, 0x00EB
     a6a:	90 61       	ori	r25, 0x10	; 16
     a6c:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a70:	21 e0       	ldi	r18, 0x01	; 1
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0x130>
     a76:	22 0f       	add	r18, r18
     a78:	8a 95       	dec	r24
     a7a:	ea f7       	brpl	.-6      	; 0xa76 <USB_Device_ProcessControlRequest+0x12e>
     a7c:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
     a80:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a84:	80 91 eb 00 	lds	r24, 0x00EB
     a88:	88 60       	ori	r24, 0x08	; 8
     a8a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a8e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a92:	80 91 e8 00 	lds	r24, 0x00E8
     a96:	87 7f       	andi	r24, 0xF7	; 247
     a98:	88 c0       	rjmp	.+272    	; 0xbaa <__stack+0xab>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a9a:	81 11       	cpse	r24, r1
     a9c:	a6 c0       	rjmp	.+332    	; 0xbea <__stack+0xeb>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     a9e:	80 91 16 02 	lds	r24, 0x0216
     aa2:	90 91 17 02 	lds	r25, 0x0217
     aa6:	8f 77       	andi	r24, 0x7F	; 127
     aa8:	99 27       	eor	r25, r25
     aaa:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     aac:	90 91 e3 00 	lds	r25, 0x00E3
     ab0:	90 78       	andi	r25, 0x80	; 128
     ab2:	98 2b       	or	r25, r24
     ab4:	90 93 e3 00 	sts	0x00E3, r25
     ab8:	80 91 e8 00 	lds	r24, 0x00E8
     abc:	87 7f       	andi	r24, 0xF7	; 247
     abe:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ac2:	84 dd       	rcall	.-1272   	; 0x5cc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ac4:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     ac8:	80 ff       	sbrs	r24, 0
     aca:	fc cf       	rjmp	.-8      	; 0xac4 <USB_Device_ProcessControlRequest+0x17c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     acc:	80 91 e3 00 	lds	r24, 0x00E3
     ad0:	80 68       	ori	r24, 0x80	; 128
     ad2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     ad6:	11 23       	and	r17, r17
     ad8:	11 f0       	breq	.+4      	; 0xade <USB_Device_ProcessControlRequest+0x196>
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0x198>
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	80 93 13 02 	sts	0x0213, r24
     ae4:	82 c0       	rjmp	.+260    	; 0xbea <__stack+0xeb>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ae6:	80 58       	subi	r24, 0x80	; 128
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	08 f0       	brcs	.+2      	; 0xaee <USB_Device_ProcessControlRequest+0x1a6>
     aec:	7e c0       	rjmp	.+252    	; 0xbea <__stack+0xeb>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     aee:	80 91 16 02 	lds	r24, 0x0216
     af2:	90 91 17 02 	lds	r25, 0x0217
     af6:	8c 3d       	cpi	r24, 0xDC	; 220
     af8:	23 e0       	ldi	r18, 0x03	; 3
     afa:	92 07       	cpc	r25, r18
     afc:	71 f5       	brne	.+92     	; 0xb5a <__stack+0x5b>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b02:	8a e2       	ldi	r24, 0x2A	; 42
     b04:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b06:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b08:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     b0a:	de 01       	movw	r26, r28
     b0c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b0e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b10:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b12:	51 e2       	ldi	r21, 0x21	; 33
     b14:	e3 2f       	mov	r30, r19
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	50 93 57 00 	sts	0x0057, r21
     b1c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     b1e:	20 ff       	sbrs	r18, 0
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <__stack+0x29>
					{
						SerialByte >>= 4;
     b22:	e2 95       	swap	r30
     b24:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b26:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b28:	ef 70       	andi	r30, 0x0F	; 15
     b2a:	8e 2f       	mov	r24, r30
     b2c:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b2e:	ea 30       	cpi	r30, 0x0A	; 10
     b30:	10 f0       	brcs	.+4      	; 0xb36 <__stack+0x37>
     b32:	c7 96       	adiw	r24, 0x37	; 55
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <__stack+0x39>
     b36:	c0 96       	adiw	r24, 0x30	; 48
     b38:	8d 93       	st	X+, r24
     b3a:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	24 31       	cpi	r18, 0x14	; 20
     b40:	49 f7       	brne	.-46     	; 0xb14 <__stack+0x15>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b42:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b44:	80 91 e8 00 	lds	r24, 0x00E8
     b48:	87 7f       	andi	r24, 0xF7	; 247
     b4a:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b4e:	6a e2       	ldi	r22, 0x2A	; 42
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	fd db       	rcall	.-2054   	; 0x352 <Endpoint_Write_Control_Stream_LE>
     b58:	14 c0       	rjmp	.+40     	; 0xb82 <__stack+0x83>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b5a:	60 91 18 02 	lds	r22, 0x0218
     b5e:	70 91 19 02 	lds	r23, 0x0219
     b62:	ae 01       	movw	r20, r28
     b64:	45 5d       	subi	r20, 0xD5	; 213
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
     b68:	b7 db       	rcall	.-2194   	; 0x2d8 <CALLBACK_USB_GetDescriptor>
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	09 f4       	brne	.+2      	; 0xb70 <__stack+0x71>
     b6e:	3d c0       	rjmp	.+122    	; 0xbea <__stack+0xeb>
     b70:	20 91 e8 00 	lds	r18, 0x00E8
     b74:	27 7f       	andi	r18, 0xF7	; 247
     b76:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b7a:	bc 01       	movw	r22, r24
     b7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b7e:	9c a5       	ldd	r25, Y+44	; 0x2c
     b80:	4b dc       	rcall	.-1898   	; 0x418 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b82:	80 91 e8 00 	lds	r24, 0x00E8
     b86:	8b 77       	andi	r24, 0x7B	; 123
     b88:	80 93 e8 00 	sts	0x00E8, r24
     b8c:	2e c0       	rjmp	.+92     	; 0xbea <__stack+0xeb>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b8e:	80 38       	cpi	r24, 0x80	; 128
     b90:	61 f5       	brne	.+88     	; 0xbea <__stack+0xeb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b92:	80 91 e8 00 	lds	r24, 0x00E8
     b96:	87 7f       	andi	r24, 0xF7	; 247
     b98:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b9c:	80 91 0f 02 	lds	r24, 0x020F
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ba0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ba4:	80 91 e8 00 	lds	r24, 0x00E8
     ba8:	8e 77       	andi	r24, 0x7E	; 126
     baa:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     bae:	0e dd       	rcall	.-1508   	; 0x5cc <Endpoint_ClearStatusStage>
     bb0:	1c c0       	rjmp	.+56     	; 0xbea <__stack+0xeb>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bb2:	81 11       	cpse	r24, r1
     bb4:	1a c0       	rjmp	.+52     	; 0xbea <__stack+0xeb>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     bb6:	90 91 16 02 	lds	r25, 0x0216
     bba:	92 30       	cpi	r25, 0x02	; 2
     bbc:	b0 f4       	brcc	.+44     	; 0xbea <__stack+0xeb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bbe:	80 91 e8 00 	lds	r24, 0x00E8
     bc2:	87 7f       	andi	r24, 0xF7	; 247
     bc4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     bc8:	90 93 0f 02 	sts	0x020F, r25

	Endpoint_ClearStatusStage();
     bcc:	ff dc       	rcall	.-1538   	; 0x5cc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     bce:	80 91 0f 02 	lds	r24, 0x020F
     bd2:	81 11       	cpse	r24, r1
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__stack+0xdf>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bd6:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bda:	87 ff       	sbrs	r24, 7
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <__stack+0xe3>
     bde:	84 e0       	ldi	r24, 0x04	; 4
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <__stack+0xe5>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 13 02 	sts	0x0213, r24

	EVENT_USB_Device_ConfigurationChanged();
     be8:	d2 da       	rcall	.-2652   	; 0x18e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bea:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     bee:	83 ff       	sbrs	r24, 3
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__stack+0x107>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf2:	80 91 e8 00 	lds	r24, 0x00E8
     bf6:	87 7f       	andi	r24, 0xF7	; 247
     bf8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bfc:	80 91 eb 00 	lds	r24, 0x00EB
     c00:	80 62       	ori	r24, 0x20	; 32
     c02:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c06:	ac 96       	adiw	r28, 0x2c	; 44
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	08 95       	ret

00000c1a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     c1a:	08 95       	ret

00000c1c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c1c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c1e:	80 91 13 02 	lds	r24, 0x0213
     c22:	88 23       	and	r24, r24
     c24:	a9 f0       	breq	.+42     	; 0xc50 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c26:	80 91 e9 00 	lds	r24, 0x00E9
     c2a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c2c:	90 91 ec 00 	lds	r25, 0x00EC
     c30:	90 ff       	sbrs	r25, 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <USB_USBTask+0x1c>
     c34:	90 e8       	ldi	r25, 0x80	; 128
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <USB_USBTask+0x1e>
     c38:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c3a:	c9 2f       	mov	r28, r25
     c3c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c42:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c46:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c48:	7f de       	rcall	.-770    	; 0x948 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c4a:	cf 70       	andi	r28, 0x0F	; 15
     c4c:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
     c5a:	40 96       	adiw	r24, 0x10	; 16
     c5c:	fc 01       	movw	r30, r24
     c5e:	8b e0       	ldi	r24, 0x0B	; 11
     c60:	df 01       	movw	r26, r30
     c62:	1d 92       	st	X+, r1
     c64:	8a 95       	dec	r24
     c66:	e9 f7       	brne	.-6      	; 0xc62 <CDC_Device_ConfigureEndpoints+0xe>
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	8c 83       	std	Y+4, r24	; 0x04
     c6c:	89 87       	std	Y+9, r24	; 0x09
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	8e 87       	std	Y+14, r24	; 0x0e
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	6a dc       	rcall	.-1836   	; 0x54e <Endpoint_ConfigureEndpointTable>
     c7a:	88 23       	and	r24, r24
     c7c:	61 f0       	breq	.+24     	; 0xc96 <CDC_Device_ConfigureEndpoints+0x42>
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	ce 01       	movw	r24, r28
     c82:	06 96       	adiw	r24, 0x06	; 6
     c84:	64 dc       	rcall	.-1848   	; 0x54e <Endpoint_ConfigureEndpointTable>
     c86:	88 23       	and	r24, r24
     c88:	31 f0       	breq	.+12     	; 0xc96 <CDC_Device_ConfigureEndpoints+0x42>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	ce 01       	movw	r24, r28
     c8e:	0b 96       	adiw	r24, 0x0b	; 11
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	5c cc       	rjmp	.-1864   	; 0x54e <Endpoint_ConfigureEndpointTable>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <CDC_Device_SendByte>:
     c9e:	cf 93       	push	r28
     ca0:	c6 2f       	mov	r28, r22
     ca2:	20 91 13 02 	lds	r18, 0x0213
     ca6:	24 30       	cpi	r18, 0x04	; 4
     ca8:	f1 f4       	brne	.+60     	; 0xce6 <CDC_Device_SendByte+0x48>
     caa:	fc 01       	movw	r30, r24
     cac:	44 89       	ldd	r20, Z+20	; 0x14
     cae:	55 89       	ldd	r21, Z+21	; 0x15
     cb0:	66 89       	ldd	r22, Z+22	; 0x16
     cb2:	77 89       	ldd	r23, Z+23	; 0x17
     cb4:	45 2b       	or	r20, r21
     cb6:	46 2b       	or	r20, r22
     cb8:	47 2b       	or	r20, r23
     cba:	a9 f0       	breq	.+42     	; 0xce6 <CDC_Device_SendByte+0x48>
     cbc:	81 81       	ldd	r24, Z+1	; 0x01
     cbe:	8f 70       	andi	r24, 0x0F	; 15
     cc0:	80 93 e9 00 	sts	0x00E9, r24
     cc4:	80 91 e8 00 	lds	r24, 0x00E8
     cc8:	85 ff       	sbrs	r24, 5
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <CDC_Device_SendByte+0x36>
     ccc:	c0 93 f1 00 	sts	0x00F1, r28
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0a c0       	rjmp	.+20     	; 0xce8 <CDC_Device_SendByte+0x4a>
     cd4:	80 91 e8 00 	lds	r24, 0x00E8
     cd8:	8e 77       	andi	r24, 0x7E	; 126
     cda:	80 93 e8 00 	sts	0x00E8, r24
     cde:	97 dc       	rcall	.-1746   	; 0x60e <Endpoint_WaitUntilReady>
     ce0:	88 23       	and	r24, r24
     ce2:	a1 f3       	breq	.-24     	; 0xccc <CDC_Device_SendByte+0x2e>
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <CDC_Device_SendByte+0x4a>
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <CDC_Device_putchar>:
     cec:	fb 01       	movw	r30, r22
     cee:	68 2f       	mov	r22, r24
     cf0:	84 85       	ldd	r24, Z+12	; 0x0c
     cf2:	95 85       	ldd	r25, Z+13	; 0x0d
     cf4:	d4 df       	rcall	.-88     	; 0xc9e <CDC_Device_SendByte>
     cf6:	88 23       	and	r24, r24
     cf8:	19 f0       	breq	.+6      	; 0xd00 <CDC_Device_putchar+0x14>
     cfa:	2f ef       	ldi	r18, 0xFF	; 255
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <CDC_Device_putchar+0x18>
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	c9 01       	movw	r24, r18
     d06:	08 95       	ret

00000d08 <CDC_Device_Flush>:
     d08:	20 91 13 02 	lds	r18, 0x0213
     d0c:	24 30       	cpi	r18, 0x04	; 4
     d0e:	51 f5       	brne	.+84     	; 0xd64 <CDC_Device_Flush+0x5c>
     d10:	fc 01       	movw	r30, r24
     d12:	44 89       	ldd	r20, Z+20	; 0x14
     d14:	55 89       	ldd	r21, Z+21	; 0x15
     d16:	66 89       	ldd	r22, Z+22	; 0x16
     d18:	77 89       	ldd	r23, Z+23	; 0x17
     d1a:	45 2b       	or	r20, r21
     d1c:	46 2b       	or	r20, r22
     d1e:	47 2b       	or	r20, r23
     d20:	09 f1       	breq	.+66     	; 0xd64 <CDC_Device_Flush+0x5c>
     d22:	81 81       	ldd	r24, Z+1	; 0x01
     d24:	8f 70       	andi	r24, 0x0F	; 15
     d26:	80 93 e9 00 	sts	0x00E9, r24
     d2a:	30 91 f3 00 	lds	r19, 0x00F3
     d2e:	20 91 f2 00 	lds	r18, 0x00F2
     d32:	93 2f       	mov	r25, r19
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	82 2b       	or	r24, r18
     d38:	89 2b       	or	r24, r25
     d3a:	11 f4       	brne	.+4      	; 0xd40 <CDC_Device_Flush+0x38>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	08 95       	ret
     d40:	90 91 e8 00 	lds	r25, 0x00E8
     d44:	80 91 e8 00 	lds	r24, 0x00E8
     d48:	8e 77       	andi	r24, 0x7E	; 126
     d4a:	80 93 e8 00 	sts	0x00E8, r24
     d4e:	95 fd       	sbrc	r25, 5
     d50:	f5 cf       	rjmp	.-22     	; 0xd3c <CDC_Device_Flush+0x34>
     d52:	5d dc       	rcall	.-1862   	; 0x60e <Endpoint_WaitUntilReady>
     d54:	81 11       	cpse	r24, r1
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <CDC_Device_Flush+0x5e>
     d58:	90 91 e8 00 	lds	r25, 0x00E8
     d5c:	9e 77       	andi	r25, 0x7E	; 126
     d5e:	90 93 e8 00 	sts	0x00E8, r25
     d62:	08 95       	ret
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	08 95       	ret

00000d68 <CDC_Device_USBTask>:
     d68:	20 91 13 02 	lds	r18, 0x0213
     d6c:	24 30       	cpi	r18, 0x04	; 4
     d6e:	89 f4       	brne	.+34     	; 0xd92 <CDC_Device_USBTask+0x2a>
     d70:	fc 01       	movw	r30, r24
     d72:	44 89       	ldd	r20, Z+20	; 0x14
     d74:	55 89       	ldd	r21, Z+21	; 0x15
     d76:	66 89       	ldd	r22, Z+22	; 0x16
     d78:	77 89       	ldd	r23, Z+23	; 0x17
     d7a:	45 2b       	or	r20, r21
     d7c:	46 2b       	or	r20, r22
     d7e:	47 2b       	or	r20, r23
     d80:	41 f0       	breq	.+16     	; 0xd92 <CDC_Device_USBTask+0x2a>
     d82:	21 81       	ldd	r18, Z+1	; 0x01
     d84:	2f 70       	andi	r18, 0x0F	; 15
     d86:	20 93 e9 00 	sts	0x00E9, r18
     d8a:	20 91 e8 00 	lds	r18, 0x00E8
     d8e:	20 fd       	sbrc	r18, 0
     d90:	bb cf       	rjmp	.-138    	; 0xd08 <CDC_Device_Flush>
     d92:	08 95       	ret

00000d94 <CDC_Device_ReceiveByte>:
     d94:	20 91 13 02 	lds	r18, 0x0213
     d98:	24 30       	cpi	r18, 0x04	; 4
     d9a:	19 f0       	breq	.+6      	; 0xda2 <CDC_Device_ReceiveByte+0xe>
     d9c:	2f ef       	ldi	r18, 0xFF	; 255
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	2e c0       	rjmp	.+92     	; 0xdfe <CDC_Device_ReceiveByte+0x6a>
     da2:	fc 01       	movw	r30, r24
     da4:	44 89       	ldd	r20, Z+20	; 0x14
     da6:	55 89       	ldd	r21, Z+21	; 0x15
     da8:	66 89       	ldd	r22, Z+22	; 0x16
     daa:	77 89       	ldd	r23, Z+23	; 0x17
     dac:	45 2b       	or	r20, r21
     dae:	46 2b       	or	r20, r22
     db0:	47 2b       	or	r20, r23
     db2:	a1 f3       	breq	.-24     	; 0xd9c <CDC_Device_ReceiveByte+0x8>
     db4:	86 81       	ldd	r24, Z+6	; 0x06
     db6:	8f 70       	andi	r24, 0x0F	; 15
     db8:	80 93 e9 00 	sts	0x00E9, r24
     dbc:	80 91 e8 00 	lds	r24, 0x00E8
     dc0:	82 ff       	sbrs	r24, 2
     dc2:	ec cf       	rjmp	.-40     	; 0xd9c <CDC_Device_ReceiveByte+0x8>
     dc4:	30 91 f3 00 	lds	r19, 0x00F3
     dc8:	20 91 f2 00 	lds	r18, 0x00F2
     dcc:	93 2f       	mov	r25, r19
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	82 2b       	or	r24, r18
     dd2:	89 2b       	or	r24, r25
     dd4:	21 f0       	breq	.+8      	; 0xdde <CDC_Device_ReceiveByte+0x4a>
     dd6:	20 91 f1 00 	lds	r18, 0x00F1
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <CDC_Device_ReceiveByte+0x4e>
     dde:	2f ef       	ldi	r18, 0xFF	; 255
     de0:	3f ef       	ldi	r19, 0xFF	; 255
     de2:	50 91 f3 00 	lds	r21, 0x00F3
     de6:	40 91 f2 00 	lds	r20, 0x00F2
     dea:	95 2f       	mov	r25, r21
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	84 2b       	or	r24, r20
     df0:	89 2b       	or	r24, r25
     df2:	29 f4       	brne	.+10     	; 0xdfe <CDC_Device_ReceiveByte+0x6a>
     df4:	80 91 e8 00 	lds	r24, 0x00E8
     df8:	8b 77       	andi	r24, 0x7B	; 123
     dfa:	80 93 e8 00 	sts	0x00E8, r24
     dfe:	c9 01       	movw	r24, r18
     e00:	08 95       	ret

00000e02 <CDC_Device_getchar>:
     e02:	fc 01       	movw	r30, r24
     e04:	84 85       	ldd	r24, Z+12	; 0x0c
     e06:	95 85       	ldd	r25, Z+13	; 0x0d
     e08:	c5 df       	rcall	.-118    	; 0xd94 <CDC_Device_ReceiveByte>
     e0a:	9c 01       	movw	r18, r24
     e0c:	97 ff       	sbrs	r25, 7
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <CDC_Device_getchar+0x12>
     e10:	2e ef       	ldi	r18, 0xFE	; 254
     e12:	3f ef       	ldi	r19, 0xFF	; 255
     e14:	c9 01       	movw	r24, r18
     e16:	08 95       	ret

00000e18 <CDC_Device_CreateStream>:
     e18:	fb 01       	movw	r30, r22
     e1a:	2e e0       	ldi	r18, 0x0E	; 14
     e1c:	db 01       	movw	r26, r22
     e1e:	1d 92       	st	X+, r1
     e20:	2a 95       	dec	r18
     e22:	e9 f7       	brne	.-6      	; 0xe1e <CDC_Device_CreateStream+0x6>
     e24:	23 e0       	ldi	r18, 0x03	; 3
     e26:	23 83       	std	Z+3, r18	; 0x03
     e28:	26 e7       	ldi	r18, 0x76	; 118
     e2a:	36 e0       	ldi	r19, 0x06	; 6
     e2c:	31 87       	std	Z+9, r19	; 0x09
     e2e:	20 87       	std	Z+8, r18	; 0x08
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	37 e0       	ldi	r19, 0x07	; 7
     e34:	33 87       	std	Z+11, r19	; 0x0b
     e36:	22 87       	std	Z+10, r18	; 0x0a
     e38:	95 87       	std	Z+13, r25	; 0x0d
     e3a:	84 87       	std	Z+12, r24	; 0x0c
     e3c:	08 95       	ret

00000e3e <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     e3e:	08 95       	ret

00000e40 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e46:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e4a:	83 ff       	sbrs	r24, 3
     e4c:	a7 c0       	rjmp	.+334    	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e4e:	88 81       	ld	r24, Y
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	20 91 18 02 	lds	r18, 0x0218
     e56:	30 91 19 02 	lds	r19, 0x0219
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	09 f0       	breq	.+2      	; 0xe62 <CDC_Device_ProcessControlRequest+0x22>
     e60:	9d c0       	rjmp	.+314    	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
     e62:	80 91 15 02 	lds	r24, 0x0215
     e66:	81 32       	cpi	r24, 0x21	; 33
     e68:	61 f0       	breq	.+24     	; 0xe82 <CDC_Device_ProcessControlRequest+0x42>
     e6a:	20 f4       	brcc	.+8      	; 0xe74 <CDC_Device_ProcessControlRequest+0x34>
     e6c:	80 32       	cpi	r24, 0x20	; 32
     e6e:	09 f0       	breq	.+2      	; 0xe72 <CDC_Device_ProcessControlRequest+0x32>
     e70:	95 c0       	rjmp	.+298    	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
     e72:	3d c0       	rjmp	.+122    	; 0xeee <CDC_Device_ProcessControlRequest+0xae>
     e74:	82 32       	cpi	r24, 0x22	; 34
     e76:	09 f4       	brne	.+2      	; 0xe7a <CDC_Device_ProcessControlRequest+0x3a>
     e78:	6d c0       	rjmp	.+218    	; 0xf54 <CDC_Device_ProcessControlRequest+0x114>
     e7a:	83 32       	cpi	r24, 0x23	; 35
     e7c:	09 f0       	breq	.+2      	; 0xe80 <CDC_Device_ProcessControlRequest+0x40>
     e7e:	8e c0       	rjmp	.+284    	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
     e80:	7d c0       	rjmp	.+250    	; 0xf7c <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e82:	80 91 14 02 	lds	r24, 0x0214
     e86:	81 3a       	cpi	r24, 0xA1	; 161
     e88:	09 f0       	breq	.+2      	; 0xe8c <CDC_Device_ProcessControlRequest+0x4c>
     e8a:	88 c0       	rjmp	.+272    	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e8c:	80 91 e8 00 	lds	r24, 0x00E8
     e90:	87 7f       	andi	r24, 0xF7	; 247
     e92:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e96:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     e9a:	80 ff       	sbrs	r24, 0
     e9c:	fc cf       	rjmp	.-8      	; 0xe96 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e9e:	4c 89       	ldd	r20, Y+20	; 0x14
     ea0:	5d 89       	ldd	r21, Y+21	; 0x15
     ea2:	6e 89       	ldd	r22, Y+22	; 0x16
     ea4:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     ea6:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     eaa:	bb 27       	eor	r27, r27
     eac:	a7 2f       	mov	r26, r23
     eae:	96 2f       	mov	r25, r22
     eb0:	85 2f       	mov	r24, r21
     eb2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     eb6:	cb 01       	movw	r24, r22
     eb8:	aa 27       	eor	r26, r26
     eba:	bb 27       	eor	r27, r27
     ebc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     ec0:	47 2f       	mov	r20, r23
     ec2:	55 27       	eor	r21, r21
     ec4:	66 27       	eor	r22, r22
     ec6:	77 27       	eor	r23, r23
     ec8:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     ecc:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ece:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     ed2:	89 8d       	ldd	r24, Y+25	; 0x19
     ed4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     ed8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     eda:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ede:	80 91 e8 00 	lds	r24, 0x00E8
     ee2:	8e 77       	andi	r24, 0x7E	; 126
     ee4:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     eec:	6f cb       	rjmp	.-2338   	; 0x5cc <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     eee:	80 91 14 02 	lds	r24, 0x0214
     ef2:	81 32       	cpi	r24, 0x21	; 33
     ef4:	09 f0       	breq	.+2      	; 0xef8 <CDC_Device_ProcessControlRequest+0xb8>
     ef6:	52 c0       	rjmp	.+164    	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ef8:	80 91 e8 00 	lds	r24, 0x00E8
     efc:	87 7f       	andi	r24, 0xF7	; 247
     efe:	80 93 e8 00 	sts	0x00E8, r24
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f04:	80 91 13 02 	lds	r24, 0x0213
     f08:	88 23       	and	r24, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <CDC_Device_ProcessControlRequest+0xce>
     f0c:	47 c0       	rjmp	.+142    	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f0e:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f12:	82 ff       	sbrs	r24, 2
     f14:	f7 cf       	rjmp	.-18     	; 0xf04 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     f16:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     f1a:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     f1e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     f22:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f26:	3c 8b       	std	Y+20, r19	; 0x14
     f28:	2d 8b       	std	Y+21, r18	; 0x15
     f2a:	9e 8b       	std	Y+22, r25	; 0x16
     f2c:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f2e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f32:	88 8f       	std	Y+24, r24	; 0x18
     f34:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f38:	89 8f       	std	Y+25, r24	; 0x19
     f3a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f3e:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f40:	80 91 e8 00 	lds	r24, 0x00E8
     f44:	8b 77       	andi	r24, 0x7B	; 123
     f46:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f4a:	40 db       	rcall	.-2432   	; 0x5cc <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f4c:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f52:	75 cf       	rjmp	.-278    	; 0xe3e <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f54:	80 91 14 02 	lds	r24, 0x0214
     f58:	81 32       	cpi	r24, 0x21	; 33
     f5a:	01 f5       	brne	.+64     	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f5c:	80 91 e8 00 	lds	r24, 0x00E8
     f60:	87 7f       	andi	r24, 0xF7	; 247
     f62:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f66:	32 db       	rcall	.-2460   	; 0x5cc <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f68:	80 91 16 02 	lds	r24, 0x0216
     f6c:	90 91 17 02 	lds	r25, 0x0217
     f70:	99 8b       	std	Y+17, r25	; 0x11
     f72:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f74:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f7a:	0f c9       	rjmp	.-3554   	; 0x19a <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f7c:	80 91 14 02 	lds	r24, 0x0214
     f80:	81 32       	cpi	r24, 0x21	; 33
     f82:	61 f4       	brne	.+24     	; 0xf9c <CDC_Device_ProcessControlRequest+0x15c>
     f84:	80 91 e8 00 	lds	r24, 0x00E8
     f88:	87 7f       	andi	r24, 0xF7	; 247
     f8a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f8e:	1e db       	rcall	.-2500   	; 0x5cc <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f90:	60 91 16 02 	lds	r22, 0x0216
     f94:	ce 01       	movw	r24, r28
			}

			break;
	}
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f9a:	51 cf       	rjmp	.-350    	; 0xe3e <CDC_Device_Event_Stub>
			}

			break;
	}
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <_Z16TIMER_CONFIG_KHZi>:
#include "IRremoteInt.h"
#include "GrapCommon.h"

void TIMER_CONFIG_KHZ(int val)
{
  const uint16_t pwmval = SYSCLOCK / 2000 / (val);	/* The period is halved since Phase and Frequency Correct PWM mode */
     fa2:	9c 01       	movw	r18, r24
     fa4:	44 27       	eor	r20, r20
     fa6:	37 fd       	sbrc	r19, 7
     fa8:	40 95       	com	r20
     faa:	54 2f       	mov	r21, r20
     fac:	60 e4       	ldi	r22, 0x40	; 64
     fae:	7f e1       	ldi	r23, 0x1F	; 31
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	ec d5       	rcall	.+3032   	; 0x1b8e <__udivmodsi4>
     fb6:	c9 01       	movw	r24, r18
  TCCR4A                = (1<<PWM4A);	/* PWM mode based on comparator OCR4A */
     fb8:	42 e0       	ldi	r20, 0x02	; 2
     fba:	40 93 c0 00 	sts	0x00C0, r20
  TCCR4B                = _BV(CS40);	/* Prescaler 1/1 */
     fbe:	41 e0       	ldi	r20, 0x01	; 1
     fc0:	40 93 c1 00 	sts	0x00C1, r20
  TCCR4C                = 0;			    /* OC4D is disabled (Normal GPIO) */
     fc4:	10 92 c2 00 	sts	0x00C2, r1
  TCCR4D                = (1<<WGM40);	/* Phase and Frequency Correct PWM */
     fc8:	40 93 c3 00 	sts	0x00C3, r20
  TCCR4E                = 0;
     fcc:	10 92 c4 00 	sts	0x00C4, r1
  TC4H                  = pwmval >> 8;	/* TOP (High byte temporary buffer) */
     fd0:	ef eb       	ldi	r30, 0xBF	; 191
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	30 83       	st	Z, r19
  OCR4C                 = pwmval;	      /* TOP */
     fd6:	20 93 d1 00 	sts	0x00D1, r18
  TC4H                  = (pwmval / 3) >> 8;	/* duty ratio 1/3 (High byte temporary buffer) */
     fda:	63 e0       	ldi	r22, 0x03	; 3
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	b0 d5       	rcall	.+2912   	; 0x1b40 <__udivmodhi4>
     fe0:	70 83       	st	Z, r23
  OCR4A                 = (pwmval / 3) & 255;	/* duty ratio 1/3 */
     fe2:	60 93 cf 00 	sts	0x00CF, r22
     fe6:	08 95       	ret

00000fe8 <_ZN6IRsend11enableIROutEi>:
// To turn the output on and off, we leave the PWM running, but connect and disconnect the output pin.
// A few hours staring at the ATmega documentation and this will all make sense.
// See my Secrets of Arduino PWM at http://arcfn.com/2009/07/secrets-of-arduino-pwm.html for details.
//
void  IRsend::enableIROut (int khz)
{
     fe8:	cb 01       	movw	r24, r22
// FIXME: implement ESP32 support, see IR_TIMER_USE_ESP32 in boarddefs.h
#ifndef ESP32
	// Disable the Timer2 Interrupt (which is used for receiving IR)
	TIMER_DISABLE_INTR; //Timer2 Overflow Interrupt
     fea:	10 92 72 00 	sts	0x0072, r1
	// COM2A = 00: disconnect OC2A
	// COM2B = 00: disconnect OC2B; to send signal set to 10: OC2B non-inverted
	// WGM2 = 101: phase-correct PWM with OCRA as top
	// CS2  = 000: no prescaling
	// The top value for the timer.  The modulation frequency will be SYSCLOCK / 2 / OCR2A.
	TIMER_CONFIG_KHZ(khz);
     fee:	d9 cf       	rjmp	.-78     	; 0xfa2 <_Z16TIMER_CONFIG_KHZi>

00000ff0 <_ZN6IRsend4sendEmi>:
}
#endif

//+=============================================================================
void  IRsend::send (unsigned long data,  int nbits)
{
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	6a 01       	movw	r12, r20
     ffe:	7b 01       	movw	r14, r22
    1000:	e9 01       	movw	r28, r18
	// Set IR carrier frequency
	enableIROut(38);
    1002:	66 e2       	ldi	r22, 0x26	; 38
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	f0 df       	rcall	.-32     	; 0xfe8 <_ZN6IRsend11enableIROutEi>

	// Header
	mark(IR_HDR_MARK);
    1008:	80 91 c0 00 	lds	r24, 0x00C0
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	80 93 c0 00 	sts	0x00C0, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1012:	8f e7       	ldi	r24, 0x7F	; 127
    1014:	95 e2       	ldi	r25, 0x25	; 37
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <_ZN6IRsend4sendEmi+0x26>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <_ZN6IRsend4sendEmi+0x2c>
    101c:	00 00       	nop
	space(IR_HDR_SPACE);
    101e:	80 91 c0 00 	lds	r24, 0x00C0
    1022:	8f 7b       	andi	r24, 0xBF	; 191
    1024:	80 93 c0 00 	sts	0x00C0, r24
    1028:	ef e5       	ldi	r30, 0x5F	; 95
    102a:	f9 e0       	ldi	r31, 0x09	; 9
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <_ZN6IRsend4sendEmi+0x3c>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <_ZN6IRsend4sendEmi+0x42>
    1032:	00 00       	nop

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
    1034:	21 97       	sbiw	r28, 0x01	; 1
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e0       	ldi	r26, 0x00	; 0
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	0c 2e       	mov	r0, r28
    1040:	04 c0       	rjmp	.+8      	; 0x104a <_ZN6IRsend4sendEmi+0x5a>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	aa 1f       	adc	r26, r26
    1048:	bb 1f       	adc	r27, r27
    104a:	0a 94       	dec	r0
    104c:	d2 f7       	brpl	.-12     	; 0x1042 <_ZN6IRsend4sendEmi+0x52>
    104e:	29 c0       	rjmp	.+82     	; 0x10a2 <_ZN6IRsend4sendEmi+0xb2>
		if (data & mask) {
    1050:	ac 01       	movw	r20, r24
    1052:	bd 01       	movw	r22, r26
    1054:	4c 21       	and	r20, r12
    1056:	5d 21       	and	r21, r13
    1058:	6e 21       	and	r22, r14
    105a:	7f 21       	and	r23, r15
			mark(IR_ONE_MARK);
    105c:	20 91 c0 00 	lds	r18, 0x00C0
    1060:	20 64       	ori	r18, 0x40	; 64
    1062:	20 93 c0 00 	sts	0x00C0, r18
	mark(IR_HDR_MARK);
	space(IR_HDR_SPACE);

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
		if (data & mask) {
    1066:	45 2b       	or	r20, r21
    1068:	46 2b       	or	r20, r22
    106a:	47 2b       	or	r20, r23
    106c:	29 f0       	breq	.+10     	; 0x1078 <_ZN6IRsend4sendEmi+0x88>
    106e:	ef eb       	ldi	r30, 0xBF	; 191
    1070:	f2 e1       	ldi	r31, 0x12	; 18
    1072:	31 97       	sbiw	r30, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <_ZN6IRsend4sendEmi+0x82>
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <_ZN6IRsend4sendEmi+0x90>
    1078:	ef e5       	ldi	r30, 0x5F	; 95
    107a:	f9 e0       	ldi	r31, 0x09	; 9
    107c:	31 97       	sbiw	r30, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <_ZN6IRsend4sendEmi+0x8c>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <_ZN6IRsend4sendEmi+0x92>
    1082:	00 00       	nop
			mark(IR_ONE_MARK);
			space(IR_HDR_SPACE);
		} else {
			mark(IR_ZERO_MARK);
			space(IR_HDR_SPACE);
    1084:	20 91 c0 00 	lds	r18, 0x00C0
    1088:	2f 7b       	andi	r18, 0xBF	; 191
    108a:	20 93 c0 00 	sts	0x00C0, r18
    108e:	ef e5       	ldi	r30, 0x5F	; 95
    1090:	f9 e0       	ldi	r31, 0x09	; 9
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <_ZN6IRsend4sendEmi+0xa2>
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <_ZN6IRsend4sendEmi+0xa8>
    1098:	00 00       	nop
	// Header
	mark(IR_HDR_MARK);
	space(IR_HDR_SPACE);

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
    109a:	b6 95       	lsr	r27
    109c:	a7 95       	ror	r26
    109e:	97 95       	ror	r25
    10a0:	87 95       	ror	r24
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	a1 05       	cpc	r26, r1
    10a6:	b1 05       	cpc	r27, r1
    10a8:	99 f6       	brne	.-90     	; 0x1050 <_ZN6IRsend4sendEmi+0x60>
			space(IR_HDR_SPACE);
    	}
  	}

	// We will have ended with LED off
	mark(IR_ZERO_MARK);
    10aa:	80 91 c0 00 	lds	r24, 0x00C0
    10ae:	80 64       	ori	r24, 0x40	; 64
    10b0:	80 93 c0 00 	sts	0x00C0, r24
    10b4:	8f e5       	ldi	r24, 0x5F	; 95
    10b6:	99 e0       	ldi	r25, 0x09	; 9
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <_ZN6IRsend4sendEmi+0xc8>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <_ZN6IRsend4sendEmi+0xce>
    10be:	00 00       	nop
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	08 95       	ret

000010ce <_Z10MATCH_MARKii>:

//+========================================================
// Due to sensor lag, when received, Marks tend to be 100us too long
//
int  MATCH_MARK (int measured_ticks,  int desired_us)
{
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
		measured_ticks * USECPERTICK, desired_us, 
		TICKS_LOW(desired_us + MARK_EXCESS) * USECPERTICK, measured_ticks * USECPERTICK, TICKS_HIGH(desired_us + MARK_EXCESS) * USECPERTICK);
#endif

  bool passed = ((measured_ticks >= TICKS_LOW (desired_us + MARK_EXCESS))
                && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
    10dc:	6c 59       	subi	r22, 0x9C	; 156
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	88 27       	eor	r24, r24
    10e2:	77 fd       	sbrc	r23, 7
    10e4:	80 95       	com	r24
    10e6:	98 2f       	mov	r25, r24
    10e8:	3c d4       	rcall	.+2168   	; 0x1962 <__floatsisf>
    10ea:	6b 01       	movw	r12, r22
    10ec:	7c 01       	movw	r14, r24
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e4       	ldi	r20, 0x40	; 64
    10f4:	5f e3       	ldi	r21, 0x3F	; 63
    10f6:	c1 d4       	rcall	.+2434   	; 0x1a7a <__mulsf3>
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	48 e4       	ldi	r20, 0x48	; 72
    10fe:	52 e4       	ldi	r21, 0x42	; 66
    1100:	95 d3       	rcall	.+1834   	; 0x182c <__divsf3>
    1102:	fc d3       	rcall	.+2040   	; 0x18fc <__fixsfsi>
    1104:	c6 17       	cp	r28, r22
    1106:	d7 07       	cpc	r29, r23
    1108:	b4 f0       	brlt	.+44     	; 0x1136 <_Z10MATCH_MARKii+0x68>
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 ea       	ldi	r20, 0xA0	; 160
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	c7 01       	movw	r24, r14
    1114:	b6 01       	movw	r22, r12
    1116:	b1 d4       	rcall	.+2402   	; 0x1a7a <__mulsf3>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	48 e4       	ldi	r20, 0x48	; 72
    111e:	52 e4       	ldi	r21, 0x42	; 66
    1120:	85 d3       	rcall	.+1802   	; 0x182c <__divsf3>
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	1c d3       	rcall	.+1592   	; 0x1764 <__addsf3>
    112c:	e7 d3       	rcall	.+1998   	; 0x18fc <__fixsfsi>
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	6c 17       	cp	r22, r28
    1132:	7d 07       	cpc	r23, r29
    1134:	0c f4       	brge	.+2      	; 0x1138 <_Z10MATCH_MARKii+0x6a>
    1136:	20 e0       	ldi	r18, 0x00	; 0
  if (passed)
    DBG_PRINTLN("?; passed");
  else
    DBG_PRINTLN("?; FAILED"); 
 	return passed;
}
    1138:	82 2f       	mov	r24, r18
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	08 95       	ret

0000114a <_Z11MATCH_SPACEii>:

//+========================================================
// Due to sensor lag, when received, Spaces tend to be 100us too short
//
int  MATCH_SPACE (int measured_ticks,  int desired_us)
{
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
		measured_ticks * USECPERTICK, desired_us, 
		TICKS_LOW(desired_us - MARK_EXCESS) * USECPERTICK, measured_ticks * USECPERTICK, TICKS_HIGH(desired_us - MARK_EXCESS) * USECPERTICK);
#endif

  bool passed = ((measured_ticks >= TICKS_LOW (desired_us - MARK_EXCESS))
                && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
    1158:	64 56       	subi	r22, 0x64	; 100
    115a:	71 09       	sbc	r23, r1
    115c:	88 27       	eor	r24, r24
    115e:	77 fd       	sbrc	r23, 7
    1160:	80 95       	com	r24
    1162:	98 2f       	mov	r25, r24
    1164:	fe d3       	rcall	.+2044   	; 0x1962 <__floatsisf>
    1166:	6b 01       	movw	r12, r22
    1168:	7c 01       	movw	r14, r24
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e4       	ldi	r20, 0x40	; 64
    1170:	5f e3       	ldi	r21, 0x3F	; 63
    1172:	83 d4       	rcall	.+2310   	; 0x1a7a <__mulsf3>
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	48 e4       	ldi	r20, 0x48	; 72
    117a:	52 e4       	ldi	r21, 0x42	; 66
    117c:	57 d3       	rcall	.+1710   	; 0x182c <__divsf3>
    117e:	be d3       	rcall	.+1916   	; 0x18fc <__fixsfsi>
    1180:	c6 17       	cp	r28, r22
    1182:	d7 07       	cpc	r29, r23
    1184:	b4 f0       	brlt	.+44     	; 0x11b2 <_Z11MATCH_SPACEii+0x68>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 ea       	ldi	r20, 0xA0	; 160
    118c:	5f e3       	ldi	r21, 0x3F	; 63
    118e:	c7 01       	movw	r24, r14
    1190:	b6 01       	movw	r22, r12
    1192:	73 d4       	rcall	.+2278   	; 0x1a7a <__mulsf3>
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	48 e4       	ldi	r20, 0x48	; 72
    119a:	52 e4       	ldi	r21, 0x42	; 66
    119c:	47 d3       	rcall	.+1678   	; 0x182c <__divsf3>
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e8       	ldi	r20, 0x80	; 128
    11a4:	5f e3       	ldi	r21, 0x3F	; 63
    11a6:	de d2       	rcall	.+1468   	; 0x1764 <__addsf3>
    11a8:	a9 d3       	rcall	.+1874   	; 0x18fc <__fixsfsi>
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	6c 17       	cp	r22, r28
    11ae:	7d 07       	cpc	r23, r29
    11b0:	0c f4       	brge	.+2      	; 0x11b4 <_Z11MATCH_SPACEii+0x6a>
    11b2:	20 e0       	ldi	r18, 0x00	; 0
  if (passed)
    DBG_PRINTLN("?; passed");
  else
    DBG_PRINTLN("?; FAILED"); 
 	return passed;
}
    11b4:	82 2f       	mov	r24, r18
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	08 95       	ret

000011c6 <__vector_41>:
#ifdef IR_TIMER_USE_ESP32
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
    11c6:	1f 92       	push	r1
    11c8:	0f 92       	push	r0
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	2f 93       	push	r18
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
	TIMER_RESET;

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	uint8_t  irdata = (IR_RECEIVE_SIGNAL == 0) ? SPACE : MARK;
    11da:	2c b1       	in	r18, 0x0c	; 12
    11dc:	26 fb       	bst	r18, 6
    11de:	22 27       	eor	r18, r18
    11e0:	20 f9       	bld	r18, 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	28 27       	eor	r18, r24

	irparams.timer++;  // One more 50uS tick
    11e6:	80 91 2e 01 	lds	r24, 0x012E
    11ea:	90 91 2f 01 	lds	r25, 0x012F
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	90 93 2f 01 	sts	0x012F, r25
    11f4:	80 93 2e 01 	sts	0x012E, r24
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
    11f8:	80 91 2d 01 	lds	r24, 0x012D
    11fc:	85 36       	cpi	r24, 0x65	; 101
    11fe:	18 f0       	brcs	.+6      	; 0x1206 <__vector_41+0x40>
    1200:	86 e0       	ldi	r24, 0x06	; 6
    1202:	80 93 2c 01 	sts	0x012C, r24

	switch(irparams.rcvstate) {
    1206:	80 91 2c 01 	lds	r24, 0x012C
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	b9 f1       	breq	.+110    	; 0x127c <__vector_41+0xb6>
    120e:	30 f4       	brcc	.+12     	; 0x121c <__vector_41+0x56>
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	59 f0       	breq	.+22     	; 0x122a <__vector_41+0x64>
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	09 f0       	breq	.+2      	; 0x121a <__vector_41+0x54>
    1218:	64 c0       	rjmp	.+200    	; 0x12e2 <__vector_41+0x11c>
    121a:	16 c0       	rjmp	.+44     	; 0x1248 <__vector_41+0x82>
    121c:	85 30       	cpi	r24, 0x05	; 5
    121e:	09 f4       	brne	.+2      	; 0x1222 <__vector_41+0x5c>
    1220:	53 c0       	rjmp	.+166    	; 0x12c8 <__vector_41+0x102>
    1222:	86 30       	cpi	r24, 0x06	; 6
    1224:	09 f0       	breq	.+2      	; 0x1228 <__vector_41+0x62>
    1226:	5d c0       	rjmp	.+186    	; 0x12e2 <__vector_41+0x11c>
    1228:	56 c0       	rjmp	.+172    	; 0x12d6 <__vector_41+0x110>
		//......................................................................
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
    122a:	21 11       	cpse	r18, r1
    122c:	5e c0       	rjmp	.+188    	; 0x12ea <__vector_41+0x124>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
    122e:	80 91 2e 01 	lds	r24, 0x012E
    1232:	90 91 2f 01 	lds	r25, 0x012F
    1236:	84 36       	cpi	r24, 0x64	; 100
    1238:	91 05       	cpc	r25, r1
    123a:	08 f4       	brcc	.+2      	; 0x123e <__vector_41+0x78>
    123c:	47 c0       	rjmp	.+142    	; 0x12cc <__vector_41+0x106>
					irparams.timer = 0;

				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
    123e:	10 92 fa 01 	sts	0x01FA, r1
					irparams.rawlen                    = 0;
    1242:	10 92 2d 01 	sts	0x012D, r1
    1246:	1c c0       	rjmp	.+56     	; 0x1280 <__vector_41+0xba>
				}
			}
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
    1248:	21 30       	cpi	r18, 0x01	; 1
    124a:	09 f0       	breq	.+2      	; 0x124e <__vector_41+0x88>
    124c:	4c c0       	rjmp	.+152    	; 0x12e6 <__vector_41+0x120>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    124e:	20 91 2d 01 	lds	r18, 0x012D
    1252:	e2 2f       	mov	r30, r18
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 91 2e 01 	lds	r24, 0x012E
    125a:	90 91 2f 01 	lds	r25, 0x012F
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	e0 5d       	subi	r30, 0xD0	; 208
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	2f 5f       	subi	r18, 0xFF	; 255
    126c:	20 93 2d 01 	sts	0x012D, r18
				irparams.timer                     = 0;
    1270:	10 92 2f 01 	sts	0x012F, r1
    1274:	10 92 2e 01 	sts	0x012E, r1
				irparams.rcvstate                  = STATE_SPACE;
    1278:	84 e0       	ldi	r24, 0x04	; 4
    127a:	23 c0       	rjmp	.+70     	; 0x12c2 <__vector_41+0xfc>
			}
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
    127c:	21 11       	cpse	r18, r1
    127e:	19 c0       	rjmp	.+50     	; 0x12b2 <__vector_41+0xec>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    1280:	20 91 2d 01 	lds	r18, 0x012D
    1284:	e2 2f       	mov	r30, r18
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 91 2e 01 	lds	r24, 0x012E
    128c:	90 91 2f 01 	lds	r25, 0x012F
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	e0 5d       	subi	r30, 0xD0	; 208
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
    129c:	2f 5f       	subi	r18, 0xFF	; 255
    129e:	20 93 2d 01 	sts	0x012D, r18
				irparams.timer                     = 0;
    12a2:	10 92 2f 01 	sts	0x012F, r1
    12a6:	10 92 2e 01 	sts	0x012E, r1
				irparams.rcvstate                  = STATE_MARK;
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	80 93 2c 01 	sts	0x012C, r24
    12b0:	1a c0       	rjmp	.+52     	; 0x12e6 <__vector_41+0x120>

			} else if (irparams.timer > GAP_TICKS) {  // Space
    12b2:	80 91 2e 01 	lds	r24, 0x012E
    12b6:	90 91 2f 01 	lds	r25, 0x012F
    12ba:	85 36       	cpi	r24, 0x65	; 101
    12bc:	91 05       	cpc	r25, r1
    12be:	a8 f0       	brcs	.+42     	; 0x12ea <__vector_41+0x124>
					// A long Space, indicates gap between codes
					// Flag the current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting Space width
					irparams.rcvstate = STATE_STOP;
    12c0:	85 e0       	ldi	r24, 0x05	; 5
    12c2:	80 93 2c 01 	sts	0x012C, r24
    12c6:	11 c0       	rjmp	.+34     	; 0x12ea <__vector_41+0x124>
			}
			break;
		//......................................................................
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
    12c8:	21 11       	cpse	r18, r1
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <__vector_41+0x124>
    12cc:	10 92 2f 01 	sts	0x012F, r1
    12d0:	10 92 2e 01 	sts	0x012E, r1
    12d4:	08 c0       	rjmp	.+16     	; 0x12e6 <__vector_41+0x120>
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 93 fa 01 	sts	0x01FA, r24
			irparams.rcvstate = STATE_STOP;
    12dc:	85 e0       	ldi	r24, 0x05	; 5
    12de:	80 93 2c 01 	sts	0x012C, r24
		 	break;
	}

	// If requested, flash LED while receiving IR data
#if IR_RECEIVE_BLINK_FLAG
	if (irdata == MARK)
    12e2:	21 11       	cpse	r18, r1
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <__vector_41+0x124>
		IR_RECEIVE_BLINK_ON; // Turn user defined pin LED on
    12e6:	47 9a       	sbi	0x08, 7	; 8
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <__vector_41+0x126>
	else
		IR_RECEIVE_BLINK_OFF; // Turn user defined pin LED on
    12ea:	47 98       	cbi	0x08, 7	; 8
#endif
}
    12ec:	ff 91       	pop	r31
    12ee:	ef 91       	pop	r30
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	2f 91       	pop	r18
    12f6:	0f 90       	pop	r0
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	0f 90       	pop	r0
    12fc:	1f 90       	pop	r1
    12fe:	18 95       	reti

00001300 <_Z19TIMER_CONFIG_NORMALv>:
// Return if receiving new IR signals
//
bool  IRrecv::isIdle ( )
{
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}
    1300:	10 92 c0 00 	sts	0x00C0, r1
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	80 93 c1 00 	sts	0x00C1, r24
    130a:	10 92 c2 00 	sts	0x00C2, r1
    130e:	10 92 c3 00 	sts	0x00C3, r1
    1312:	10 92 c4 00 	sts	0x00C4, r1
    1316:	ef eb       	ldi	r30, 0xBF	; 191
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	80 83       	st	Z, r24
    131e:	80 e2       	ldi	r24, 0x20	; 32
    1320:	80 93 d1 00 	sts	0x00D1, r24
    1324:	10 82       	st	Z, r1
    1326:	10 92 bf 00 	sts	0x00BF, r1
    132a:	10 92 be 00 	sts	0x00BE, r1
    132e:	08 95       	ret

00001330 <_ZN6IRrecv10decodeMainEP14decode_results>:
    1330:	8f 92       	push	r8
    1332:	9f 92       	push	r9
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	eb 01       	movw	r28, r22
    134a:	80 91 2d 01 	lds	r24, 0x012D
    134e:	86 31       	cpi	r24, 0x16	; 22
    1350:	10 f4       	brcc	.+4      	; 0x1356 <_ZN6IRrecv10decodeMainEP14decode_results+0x26>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	5e c0       	rjmp	.+188    	; 0x1412 <_ZN6IRrecv10decodeMainEP14decode_results+0xe2>
    1356:	e8 85       	ldd	r30, Y+8	; 0x08
    1358:	f9 85       	ldd	r31, Y+9	; 0x09
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	60 e6       	ldi	r22, 0x60	; 96
    1360:	79 e0       	ldi	r23, 0x09	; 9
    1362:	b5 de       	rcall	.-662    	; 0x10ce <_Z10MATCH_MARKii>
    1364:	89 2b       	or	r24, r25
    1366:	a9 f3       	breq	.-22     	; 0x1352 <_ZN6IRrecv10decodeMainEP14decode_results+0x22>
    1368:	53 e0       	ldi	r21, 0x03	; 3
    136a:	a5 2e       	mov	r10, r21
    136c:	b1 2c       	mov	r11, r1
    136e:	02 e0       	ldi	r16, 0x02	; 2
    1370:	10 e0       	ldi	r17, 0x00	; 0
    1372:	c1 2c       	mov	r12, r1
    1374:	d1 2c       	mov	r13, r1
    1376:	76 01       	movw	r14, r12
    1378:	38 c0       	rjmp	.+112    	; 0x13ea <_ZN6IRrecv10decodeMainEP14decode_results+0xba>
    137a:	c8 01       	movw	r24, r16
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	e8 85       	ldd	r30, Y+8	; 0x08
    1382:	f9 85       	ldd	r31, Y+9	; 0x09
    1384:	e8 0f       	add	r30, r24
    1386:	f9 1f       	adc	r31, r25
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	68 e5       	ldi	r22, 0x58	; 88
    138e:	72 e0       	ldi	r23, 0x02	; 2
    1390:	dc de       	rcall	.-584    	; 0x114a <_Z11MATCH_SPACEii>
    1392:	89 2b       	or	r24, r25
    1394:	91 f1       	breq	.+100    	; 0x13fa <_ZN6IRrecv10decodeMainEP14decode_results+0xca>
    1396:	45 01       	movw	r8, r10
    1398:	88 0c       	add	r8, r8
    139a:	99 1c       	adc	r9, r9
    139c:	e8 85       	ldd	r30, Y+8	; 0x08
    139e:	f9 85       	ldd	r31, Y+9	; 0x09
    13a0:	e8 0d       	add	r30, r8
    13a2:	f9 1d       	adc	r31, r9
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	60 eb       	ldi	r22, 0xB0	; 176
    13aa:	74 e0       	ldi	r23, 0x04	; 4
    13ac:	90 de       	rcall	.-736    	; 0x10ce <_Z10MATCH_MARKii>
    13ae:	89 2b       	or	r24, r25
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <_ZN6IRrecv10decodeMainEP14decode_results+0x90>
    13b2:	cc 0c       	add	r12, r12
    13b4:	dd 1c       	adc	r13, r13
    13b6:	ee 1c       	adc	r14, r14
    13b8:	ff 1c       	adc	r15, r15
    13ba:	68 94       	set
    13bc:	c0 f8       	bld	r12, 0
    13be:	10 c0       	rjmp	.+32     	; 0x13e0 <_ZN6IRrecv10decodeMainEP14decode_results+0xb0>
    13c0:	e8 85       	ldd	r30, Y+8	; 0x08
    13c2:	f9 85       	ldd	r31, Y+9	; 0x09
    13c4:	e8 0d       	add	r30, r8
    13c6:	f9 1d       	adc	r31, r9
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	68 e5       	ldi	r22, 0x58	; 88
    13ce:	72 e0       	ldi	r23, 0x02	; 2
    13d0:	7e de       	rcall	.-772    	; 0x10ce <_Z10MATCH_MARKii>
    13d2:	89 2b       	or	r24, r25
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <_ZN6IRrecv10decodeMainEP14decode_results+0xa8>
    13d6:	bd cf       	rjmp	.-134    	; 0x1352 <_ZN6IRrecv10decodeMainEP14decode_results+0x22>
    13d8:	cc 0c       	add	r12, r12
    13da:	dd 1c       	adc	r13, r13
    13dc:	ee 1c       	adc	r14, r14
    13de:	ff 1c       	adc	r15, r15
    13e0:	0e 5f       	subi	r16, 0xFE	; 254
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	a8 0e       	add	r10, r24
    13e8:	b1 1c       	adc	r11, r1
    13ea:	80 91 2d 01 	lds	r24, 0x012D
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a8 16       	cp	r10, r24
    13f2:	b9 06       	cpc	r11, r25
    13f4:	0c f4       	brge	.+2      	; 0x13f8 <_ZN6IRrecv10decodeMainEP14decode_results+0xc8>
    13f6:	c1 cf       	rjmp	.-126    	; 0x137a <_ZN6IRrecv10decodeMainEP14decode_results+0x4a>
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <_ZN6IRrecv10decodeMainEP14decode_results+0xcc>
    13fa:	85 01       	movw	r16, r10
    13fc:	01 50       	subi	r16, 0x01	; 1
    13fe:	11 09       	sbc	r17, r1
    1400:	15 95       	asr	r17
    1402:	07 95       	ror	r16
    1404:	1f 83       	std	Y+7, r17	; 0x07
    1406:	0e 83       	std	Y+6, r16	; 0x06
    1408:	ca 82       	std	Y+2, r12	; 0x02
    140a:	db 82       	std	Y+3, r13	; 0x03
    140c:	ec 82       	std	Y+4, r14	; 0x04
    140e:	fd 82       	std	Y+5, r15	; 0x05
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	08 95       	ret

0000142c <_ZN6IRrecvC1Ev>:
    142c:	08 95       	ret

0000142e <_ZN6IRrecv10enableIRInEv>:
    142e:	f8 94       	cli
    1430:	67 df       	rcall	.-306    	; 0x1300 <_Z19TIMER_CONFIG_NORMALv>
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	80 93 72 00 	sts	0x0072, r24
    1438:	78 94       	sei
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	80 93 2c 01 	sts	0x012C, r24
    1440:	10 92 2d 01 	sts	0x012D, r1
    1444:	08 95       	ret

00001446 <_ZN6IRrecv6resumeEv>:
//+=============================================================================
// Restart the ISR state machine
//
void  IRrecv::resume ( )
{
	irparams.rcvstate = STATE_IDLE;
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	80 93 2c 01 	sts	0x012C, r24
	irparams.rawlen = 0;
    144c:	10 92 2d 01 	sts	0x012D, r1
    1450:	08 95       	ret

00001452 <_ZN6IRrecv6decodeEP14decode_results>:
// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
//
bool  IRrecv::decode (decode_results *results)
{
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ec 01       	movw	r28, r24
    1458:	fb 01       	movw	r30, r22
	results->rawbuf   = irparams.rawbuf;
    145a:	80 e3       	ldi	r24, 0x30	; 48
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	91 87       	std	Z+9, r25	; 0x09
    1460:	80 87       	std	Z+8, r24	; 0x08
	results->rawlen   = irparams.rawlen;
    1462:	80 91 2d 01 	lds	r24, 0x012D
    1466:	82 87       	std	Z+10, r24	; 0x0a
    1468:	13 86       	std	Z+11, r1	; 0x0b

	results->overflow = irparams.overflow;
    146a:	80 91 fa 01 	lds	r24, 0x01FA
    146e:	84 87       	std	Z+12, r24	; 0x0c
    1470:	15 86       	std	Z+13, r1	; 0x0d

	if (irparams.rcvstate != STATE_STOP)  return false ;
    1472:	80 91 2c 01 	lds	r24, 0x012C
    1476:	85 30       	cpi	r24, 0x05	; 5
    1478:	31 f4       	brne	.+12     	; 0x1486 <_ZN6IRrecv6decodeEP14decode_results+0x34>

	if(!decodeMain(results)){
    147a:	ce 01       	movw	r24, r28
    147c:	59 df       	rcall	.-334    	; 0x1330 <_ZN6IRrecv10decodeMainEP14decode_results>
    147e:	81 11       	cpse	r24, r1
    1480:	04 c0       	rjmp	.+8      	; 0x148a <_ZN6IRrecv6decodeEP14decode_results+0x38>
		// Throw away and start over
		resume();
    1482:	ce 01       	movw	r24, r28
    1484:	e0 df       	rcall	.-64     	; 0x1446 <_ZN6IRrecv6resumeEv>
	results->rawbuf   = irparams.rawbuf;
	results->rawlen   = irparams.rawlen;

	results->overflow = irparams.overflow;

	if (irparams.rcvstate != STATE_STOP)  return false ;
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	01 c0       	rjmp	.+2      	; 0x148c <_ZN6IRrecv6decodeEP14decode_results+0x3a>
	if(!decodeMain(results)){
		// Throw away and start over
		resume();
		return false;
	}else{
		return true;
    148a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	08 95       	ret

00001492 <IrRawSend>:
	sbi(PINC, 6);	// IR OUT logical not
#endif
}

extern "C" void IrRawSend(unsigned long data, int nbits)
{
    1492:	9a 01       	movw	r18, r20
    send.send(data, nbits);
    1494:	ab 01       	movw	r20, r22
    1496:	bc 01       	movw	r22, r24
    1498:	8b ef       	ldi	r24, 0xFB	; 251
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	a9 cd       	rjmp	.-1198   	; 0xff0 <_ZN6IRsend4sendEmi>

0000149e <IrReceiveSetup>:
}

extern "C" void IrReceiveSetup()
{
	cbi(DDRE, 6);	// IR IN
    149e:	6e 98       	cbi	0x0d, 6	; 13
    recv.enableIRIn();
    14a0:	8c ef       	ldi	r24, 0xFC	; 252
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	c4 cf       	rjmp	.-120    	; 0x142e <_ZN6IRrecv10enableIRInEv>

000014a6 <IrRawRecive>:
}

extern "C" int IrRawRecive(unsigned long *data)
{
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	2e 97       	sbiw	r28, 0x0e	; 14
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	8c 01       	movw	r16, r24
    decode_results results;
    bool ret = recv.decode(&results);
    14c0:	be 01       	movw	r22, r28
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8c ef       	ldi	r24, 0xFC	; 252
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	c3 df       	rcall	.-122    	; 0x1452 <_ZN6IRrecv6decodeEP14decode_results>
    if(ret){
    14cc:	88 23       	and	r24, r24
    14ce:	79 f0       	breq	.+30     	; 0x14ee <IrRawRecive+0x48>
        *data = results.value;
    14d0:	4b 81       	ldd	r20, Y+3	; 0x03
    14d2:	5c 81       	ldd	r21, Y+4	; 0x04
    14d4:	6d 81       	ldd	r22, Y+5	; 0x05
    14d6:	7e 81       	ldd	r23, Y+6	; 0x06
    14d8:	f8 01       	movw	r30, r16
    14da:	40 83       	st	Z, r20
    14dc:	51 83       	std	Z+1, r21	; 0x01
    14de:	62 83       	std	Z+2, r22	; 0x02
    14e0:	73 83       	std	Z+3, r23	; 0x03
        recv.resume();
    14e2:	8c ef       	ldi	r24, 0xFC	; 252
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	af df       	rcall	.-162    	; 0x1446 <_ZN6IRrecv6resumeEv>
    }
    return ret ? 1 : 0;
    14e8:	21 e0       	ldi	r18, 0x01	; 1
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <IrRawRecive+0x4c>
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
}
    14f2:	c9 01       	movw	r24, r18
    14f4:	2e 96       	adiw	r28, 0x0e	; 14
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <IrSend>:

// ------------------------------------------------------------

extern "C" void IrSend(int data)
{
    IrRawSend(data, IR_SEND_BITS);
    150a:	bc 01       	movw	r22, r24
    150c:	88 27       	eor	r24, r24
    150e:	77 fd       	sbrc	r23, 7
    1510:	80 95       	com	r24
    1512:	98 2f       	mov	r25, r24
    1514:	4a e0       	ldi	r20, 0x0A	; 10
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	bc cf       	rjmp	.-136    	; 0x1492 <IrRawSend>

0000151a <IrReceive>:
}

extern "C" int IrReceive()
{
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	00 d0       	rcall	.+0      	; 0x1520 <IrReceive+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <IrReceive+0x8>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    unsigned long data;
    if(IrRawRecive(&data)){
    1526:	ce 01       	movw	r24, r28
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	bd df       	rcall	.-134    	; 0x14a6 <IrRawRecive>
    152c:	89 2b       	or	r24, r25
    152e:	b9 f0       	breq	.+46     	; 0x155e <IrReceive+0x44>
		for(i = 0; i < 16; i++)
			str[i] = (data & _BV(i)) ? '1' : '0';
		str[16] = '\0';
		fprintf(&USBSerialStream, "received : %s\r\n", str);	
#endif
        if(data & _BV(IR_SEND_BITS-1)){
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	ab 81       	ldd	r26, Y+3	; 0x03
    1536:	bc 81       	ldd	r27, Y+4	; 0x04
    1538:	91 ff       	sbrs	r25, 1
    153a:	0f c0       	rjmp	.+30     	; 0x155a <IrReceive+0x40>
            data = ~data & ((1UL << IR_SEND_BITS) - 1);
    153c:	80 95       	com	r24
    153e:	90 95       	com	r25
    1540:	a0 95       	com	r26
    1542:	b0 95       	com	r27
    1544:	93 70       	andi	r25, 0x03	; 3
    1546:	aa 27       	eor	r26, r26
    1548:	bb 27       	eor	r27, r27
            data += 1;
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	a1 1d       	adc	r26, r1
    154e:	b1 1d       	adc	r27, r1
            return -(int)data;
    1550:	22 27       	eor	r18, r18
    1552:	33 27       	eor	r19, r19
    1554:	28 1b       	sub	r18, r24
    1556:	39 0b       	sbc	r19, r25
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <IrReceive+0x48>
        }else{
            return (int)data;
    155a:	9c 01       	movw	r18, r24
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <IrReceive+0x48>
        }        
    }else{
        return IR_CODE_INVALID;
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	34 e0       	ldi	r19, 0x04	; 4
    }
}
    1562:	c9 01       	movw	r24, r18
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <_GLOBAL__sub_I_IrSendSetup>:
#include "IRremote.h"
#include "GrapCommon.h"

static IRrecv recv;
    1572:	8c ef       	ldi	r24, 0xFC	; 252
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	5a cf       	rjmp	.-332    	; 0x142c <_ZN6IRrecvC1Ev>

00001578 <SendShiftReg>:
    // Send RCK
    LED7SEG_RCK_0;
    LED7SEG_RCK_1;

    g_CurrentDigit++;
    if(g_CurrentDigit == NUM_DIGITS) g_CurrentDigit = 0;
    1578:	80 95       	com	r24
    157a:	8e bd       	out	0x2e, r24	; 46
    157c:	0d b4       	in	r0, 0x2d	; 45
    157e:	07 fe       	sbrs	r0, 7
    1580:	fd cf       	rjmp	.-6      	; 0x157c <SendShiftReg+0x4>
    1582:	08 95       	ret

00001584 <Led7Seg_SetDisplayNumber>:
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	9c 01       	movw	r18, r24
    158a:	37 ff       	sbrs	r19, 7
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <Led7Seg_SetDisplayNumber+0x12>
    158e:	88 27       	eor	r24, r24
    1590:	99 27       	eor	r25, r25
    1592:	82 1b       	sub	r24, r18
    1594:	93 0b       	sbc	r25, r19
    1596:	e0 e0       	ldi	r30, 0x00	; 0
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	ca e0       	ldi	r28, 0x0A	; 10
    159c:	d0 e0       	ldi	r29, 0x00	; 0
    159e:	be 01       	movw	r22, r28
    15a0:	e3 d2       	rcall	.+1478   	; 0x1b68 <__divmodhi4>
    15a2:	dc 01       	movw	r26, r24
    15a4:	a5 5e       	subi	r26, 0xE5	; 229
    15a6:	be 4f       	sbci	r27, 0xFE	; 254
    15a8:	8c 91       	ld	r24, X
    15aa:	df 01       	movw	r26, r30
    15ac:	a4 5e       	subi	r26, 0xE4	; 228
    15ae:	bd 4f       	sbci	r27, 0xFD	; 253
    15b0:	8c 93       	st	X, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	31 96       	adiw	r30, 0x01	; 1
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	61 f4       	brne	.+24     	; 0x15d2 <Led7Seg_SetDisplayNumber+0x4e>
    15ba:	05 c0       	rjmp	.+10     	; 0x15c6 <Led7Seg_SetDisplayNumber+0x42>
    15bc:	df 01       	movw	r26, r30
    15be:	a4 5e       	subi	r26, 0xE4	; 228
    15c0:	bd 4f       	sbci	r27, 0xFD	; 253
    15c2:	1c 92       	st	X, r1
    15c4:	31 96       	adiw	r30, 0x01	; 1
    15c6:	e4 30       	cpi	r30, 0x04	; 4
    15c8:	f1 05       	cpc	r31, r1
    15ca:	c1 f7       	brne	.-16     	; 0x15bc <Led7Seg_SetDisplayNumber+0x38>
    15cc:	37 ff       	sbrs	r19, 7
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <Led7Seg_SetDisplayNumber+0x5c>
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <Led7Seg_SetDisplayNumber+0x56>
    15d2:	e4 30       	cpi	r30, 0x04	; 4
    15d4:	f1 05       	cpc	r31, r1
    15d6:	19 f7       	brne	.-58     	; 0x159e <Led7Seg_SetDisplayNumber+0x1a>
    15d8:	f9 cf       	rjmp	.-14     	; 0x15cc <Led7Seg_SetDisplayNumber+0x48>
    15da:	80 e4       	ldi	r24, 0x40	; 64
    15dc:	80 93 1f 02 	sts	0x021F, r24
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	08 95       	ret

000015e6 <__vector_23>:

//+=============================================================================
// Interrupt Service Routine - Fires every 1ms
//
ISR (TIMER0_OVF_vect)
{
    15e6:	1f 92       	push	r1
    15e8:	0f 92       	push	r0
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	0f 92       	push	r0
    15ee:	11 24       	eor	r1, r1
    15f0:	2f 93       	push	r18
    15f2:	3f 93       	push	r19
    15f4:	4f 93       	push	r20
    15f6:	5f 93       	push	r21
    15f8:	6f 93       	push	r22
    15fa:	7f 93       	push	r23
    15fc:	8f 93       	push	r24
    15fe:	9f 93       	push	r25
    1600:	af 93       	push	r26
    1602:	bf 93       	push	r27
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
    SendShiftReg(1 << g_CurrentDigit);
    1608:	20 91 fd 01 	lds	r18, 0x01FD
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <__vector_23+0x2e>
    1612:	88 0f       	add	r24, r24
    1614:	2a 95       	dec	r18
    1616:	ea f7       	brpl	.-6      	; 0x1612 <__vector_23+0x2c>
    1618:	af df       	rcall	.-162    	; 0x1578 <SendShiftReg>
    SendShiftReg(g_DisplayPatterns[g_CurrentDigit]);
    161a:	e0 91 fd 01 	lds	r30, 0x01FD
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	e4 5e       	subi	r30, 0xE4	; 228
    1622:	fd 4f       	sbci	r31, 0xFD	; 253
    1624:	80 81       	ld	r24, Z
    1626:	a8 df       	rcall	.-176    	; 0x1578 <SendShiftReg>

    // Send RCK
    LED7SEG_RCK_0;
    1628:	28 98       	cbi	0x05, 0	; 5
    LED7SEG_RCK_1;
    162a:	28 9a       	sbi	0x05, 0	; 5

    g_CurrentDigit++;
    162c:	80 91 fd 01 	lds	r24, 0x01FD
    1630:	8f 5f       	subi	r24, 0xFF	; 255
    1632:	80 93 fd 01 	sts	0x01FD, r24
    if(g_CurrentDigit == NUM_DIGITS) g_CurrentDigit = 0;
    1636:	80 91 fd 01 	lds	r24, 0x01FD
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	11 f4       	brne	.+4      	; 0x1642 <__vector_23+0x5c>
    163e:	10 92 fd 01 	sts	0x01FD, r1
}
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_3>:

//+=============================================================================
// Interrupt Service Routine
//
ISR(INT2_vect)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	ef 93       	push	r30
    1684:	ff 93       	push	r31
    if(bit_is_set(PIND, PORTD2)){
    1686:	4a 9b       	sbis	0x09, 2	; 9
    1688:	08 c0       	rjmp	.+16     	; 0x169a <__vector_3+0x36>
        g_OldRot = bit_is_set(PIND, PORTD3) ? 'R' : 'L';
    168a:	4b 9b       	sbis	0x09, 3	; 9
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <__vector_3+0x2e>
    168e:	82 e5       	ldi	r24, 0x52	; 82
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <__vector_3+0x30>
    1692:	8c e4       	ldi	r24, 0x4C	; 76
    1694:	80 93 00 02 	sts	0x0200, r24
    1698:	25 c0       	rjmp	.+74     	; 0x16e4 <__vector_3+0x80>
    }else{
        if(bit_is_set(PIND, PORTD3)){
    169a:	4b 9b       	sbis	0x09, 3	; 9
    169c:	0a c0       	rjmp	.+20     	; 0x16b2 <__vector_3+0x4e>
            if(g_OldRot == 'L'){
    169e:	80 91 00 02 	lds	r24, 0x0200
    16a2:	8c 34       	cpi	r24, 0x4C	; 76
    16a4:	e9 f4       	brne	.+58     	; 0x16e0 <__vector_3+0x7c>
                g_Value--;
    16a6:	80 91 fe 01 	lds	r24, 0x01FE
    16aa:	90 91 ff 01 	lds	r25, 0x01FF
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <__vector_3+0x60>
                Led7Seg_SetDisplayNumber(g_Value);
                IrSend(g_Value);
            }
        }else{
            if(g_OldRot == 'R'){
    16b2:	80 91 00 02 	lds	r24, 0x0200
    16b6:	82 35       	cpi	r24, 0x52	; 82
    16b8:	99 f4       	brne	.+38     	; 0x16e0 <__vector_3+0x7c>
                g_Value++;
    16ba:	80 91 fe 01 	lds	r24, 0x01FE
    16be:	90 91 ff 01 	lds	r25, 0x01FF
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	90 93 ff 01 	sts	0x01FF, r25
    16c8:	80 93 fe 01 	sts	0x01FE, r24
                Led7Seg_SetDisplayNumber(g_Value);
    16cc:	80 91 fe 01 	lds	r24, 0x01FE
    16d0:	90 91 ff 01 	lds	r25, 0x01FF
    16d4:	57 df       	rcall	.-338    	; 0x1584 <Led7Seg_SetDisplayNumber>
                IrSend(g_Value);
    16d6:	80 91 fe 01 	lds	r24, 0x01FE
    16da:	90 91 ff 01 	lds	r25, 0x01FF
    16de:	15 df       	rcall	.-470    	; 0x150a <IrSend>
            }
        }
        g_OldRot = 0;
    16e0:	10 92 00 02 	sts	0x0200, r1
    }
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <MotorPwm>:
	MotorPwm(0);
}

void MotorPwm(int16_t x)
{
	if(x >= 0)
    1706:	97 fd       	sbrc	r25, 7
    1708:	02 c0       	rjmp	.+4      	; 0x170e <MotorPwm+0x8>
		MOTOR_INV_0;
    170a:	2a 98       	cbi	0x05, 2	; 5
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <MotorPwm+0xa>
	else
		MOTOR_INV_1;
    170e:	2a 9a       	sbi	0x05, 2	; 5
	
	const uint8_t pwmval = (x >= 0) ? x : -x;
    1710:	9c 01       	movw	r18, r24
    1712:	97 ff       	sbrs	r25, 7
    1714:	04 c0       	rjmp	.+8      	; 0x171e <MotorPwm+0x18>
    1716:	22 27       	eor	r18, r18
    1718:	33 27       	eor	r19, r19
    171a:	28 1b       	sub	r18, r24
    171c:	39 0b       	sbc	r19, r25
		}else{
			LEDR_OFF;
			LEDB_ON;
		}
	}
}
    171e:	a9 01       	movw	r20, r18
    1720:	55 27       	eor	r21, r21
		MOTOR_INV_0;
	else
		MOTOR_INV_1;
	
	const uint8_t pwmval = (x >= 0) ? x : -x;
	OCR1A = pwmval;
    1722:	50 93 89 00 	sts	0x0089, r21
    1726:	40 93 88 00 	sts	0x0088, r20

    if(pwmval == 0){
    172a:	21 11       	cpse	r18, r1
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <MotorPwm+0x2e>
        MOTOR_DISABLE;
    172e:	2c 98       	cbi	0x05, 4	; 5
		LEDR_OFF;
    1730:	8c 98       	cbi	0x11, 4	; 17
    1732:	04 c0       	rjmp	.+8      	; 0x173c <MotorPwm+0x36>
		LEDB_OFF;
	}else{
        MOTOR_ENABLE;
    1734:	2c 9a       	sbi	0x05, 4	; 5
		if(x >= 0){
    1736:	97 fd       	sbrc	r25, 7
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <MotorPwm+0x3a>
			LEDR_ON;
    173a:	8c 9a       	sbi	0x11, 4	; 17
			LEDB_OFF;
    173c:	8e 98       	cbi	0x11, 6	; 17
    173e:	08 95       	ret
		}else{
			LEDR_OFF;
    1740:	8c 98       	cbi	0x11, 4	; 17
			LEDB_ON;
    1742:	8e 9a       	sbi	0x11, 6	; 17
    1744:	08 95       	ret

00001746 <InitMotor>:
#include "GrapCommon.h"

void InitMotor()
{
	// Motor PWM (OC1A) ------------------------------------------------------------
	TCCR1A = _BV(WGM10) | _BV(WGM12) | _BV(COM1A1);	// Fast PWM, 8-bit, Clear on compare match, set at TOP(=0xFF)
    1746:	89 e8       	ldi	r24, 0x89	; 137
    1748:	80 93 80 00 	sts	0x0080, r24
	//TCCR1B = _BV(CS12) | _BV(CS10);	// Prescaler 1/1024
	TCCR1B = _BV(CS12);	// Prescaler 1/256
    174c:	84 e0       	ldi	r24, 0x04	; 4
    174e:	80 93 81 00 	sts	0x0081, r24
	//TCCR1B = _BV(CS11) | _BV(CS10);	// Prescaler 1/64
	//TCCR1B = _BV(CS11);	// Prescaler 1/8
	TCCR1C = 0;
    1752:	10 92 82 00 	sts	0x0082, r1

	sbi(DDRB, 5);	// PWM
    1756:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB, 4);	// ENABLE
    1758:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB, 2);	// INV
    175a:	22 9a       	sbi	0x04, 2	; 4

	MotorPwm(0);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	d2 cf       	rjmp	.-92     	; 0x1706 <MotorPwm>

00001762 <__subsf3>:
    1762:	50 58       	subi	r21, 0x80	; 128

00001764 <__addsf3>:
    1764:	bb 27       	eor	r27, r27
    1766:	aa 27       	eor	r26, r26
    1768:	0e d0       	rcall	.+28     	; 0x1786 <__addsf3x>
    176a:	4d c1       	rjmp	.+666    	; 0x1a06 <__fp_round>
    176c:	3e d1       	rcall	.+636    	; 0x19ea <__fp_pscA>
    176e:	30 f0       	brcs	.+12     	; 0x177c <__addsf3+0x18>
    1770:	43 d1       	rcall	.+646    	; 0x19f8 <__fp_pscB>
    1772:	20 f0       	brcs	.+8      	; 0x177c <__addsf3+0x18>
    1774:	31 f4       	brne	.+12     	; 0x1782 <__addsf3+0x1e>
    1776:	9f 3f       	cpi	r25, 0xFF	; 255
    1778:	11 f4       	brne	.+4      	; 0x177e <__addsf3+0x1a>
    177a:	1e f4       	brtc	.+6      	; 0x1782 <__addsf3+0x1e>
    177c:	33 c1       	rjmp	.+614    	; 0x19e4 <__fp_nan>
    177e:	0e f4       	brtc	.+2      	; 0x1782 <__addsf3+0x1e>
    1780:	e0 95       	com	r30
    1782:	e7 fb       	bst	r30, 7
    1784:	29 c1       	rjmp	.+594    	; 0x19d8 <__fp_inf>

00001786 <__addsf3x>:
    1786:	e9 2f       	mov	r30, r25
    1788:	4f d1       	rcall	.+670    	; 0x1a28 <__fp_split3>
    178a:	80 f3       	brcs	.-32     	; 0x176c <__addsf3+0x8>
    178c:	ba 17       	cp	r27, r26
    178e:	62 07       	cpc	r22, r18
    1790:	73 07       	cpc	r23, r19
    1792:	84 07       	cpc	r24, r20
    1794:	95 07       	cpc	r25, r21
    1796:	18 f0       	brcs	.+6      	; 0x179e <__addsf3x+0x18>
    1798:	71 f4       	brne	.+28     	; 0x17b6 <__addsf3x+0x30>
    179a:	9e f5       	brtc	.+102    	; 0x1802 <__addsf3x+0x7c>
    179c:	67 c1       	rjmp	.+718    	; 0x1a6c <__fp_zero>
    179e:	0e f4       	brtc	.+2      	; 0x17a2 <__addsf3x+0x1c>
    17a0:	e0 95       	com	r30
    17a2:	0b 2e       	mov	r0, r27
    17a4:	ba 2f       	mov	r27, r26
    17a6:	a0 2d       	mov	r26, r0
    17a8:	0b 01       	movw	r0, r22
    17aa:	b9 01       	movw	r22, r18
    17ac:	90 01       	movw	r18, r0
    17ae:	0c 01       	movw	r0, r24
    17b0:	ca 01       	movw	r24, r20
    17b2:	a0 01       	movw	r20, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	ff 27       	eor	r31, r31
    17b8:	59 1b       	sub	r21, r25
    17ba:	99 f0       	breq	.+38     	; 0x17e2 <__addsf3x+0x5c>
    17bc:	59 3f       	cpi	r21, 0xF9	; 249
    17be:	50 f4       	brcc	.+20     	; 0x17d4 <__addsf3x+0x4e>
    17c0:	50 3e       	cpi	r21, 0xE0	; 224
    17c2:	68 f1       	brcs	.+90     	; 0x181e <__addsf3x+0x98>
    17c4:	1a 16       	cp	r1, r26
    17c6:	f0 40       	sbci	r31, 0x00	; 0
    17c8:	a2 2f       	mov	r26, r18
    17ca:	23 2f       	mov	r18, r19
    17cc:	34 2f       	mov	r19, r20
    17ce:	44 27       	eor	r20, r20
    17d0:	58 5f       	subi	r21, 0xF8	; 248
    17d2:	f3 cf       	rjmp	.-26     	; 0x17ba <__addsf3x+0x34>
    17d4:	46 95       	lsr	r20
    17d6:	37 95       	ror	r19
    17d8:	27 95       	ror	r18
    17da:	a7 95       	ror	r26
    17dc:	f0 40       	sbci	r31, 0x00	; 0
    17de:	53 95       	inc	r21
    17e0:	c9 f7       	brne	.-14     	; 0x17d4 <__addsf3x+0x4e>
    17e2:	7e f4       	brtc	.+30     	; 0x1802 <__addsf3x+0x7c>
    17e4:	1f 16       	cp	r1, r31
    17e6:	ba 0b       	sbc	r27, r26
    17e8:	62 0b       	sbc	r22, r18
    17ea:	73 0b       	sbc	r23, r19
    17ec:	84 0b       	sbc	r24, r20
    17ee:	ba f0       	brmi	.+46     	; 0x181e <__addsf3x+0x98>
    17f0:	91 50       	subi	r25, 0x01	; 1
    17f2:	a1 f0       	breq	.+40     	; 0x181c <__addsf3x+0x96>
    17f4:	ff 0f       	add	r31, r31
    17f6:	bb 1f       	adc	r27, r27
    17f8:	66 1f       	adc	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	c2 f7       	brpl	.-16     	; 0x17f0 <__addsf3x+0x6a>
    1800:	0e c0       	rjmp	.+28     	; 0x181e <__addsf3x+0x98>
    1802:	ba 0f       	add	r27, r26
    1804:	62 1f       	adc	r22, r18
    1806:	73 1f       	adc	r23, r19
    1808:	84 1f       	adc	r24, r20
    180a:	48 f4       	brcc	.+18     	; 0x181e <__addsf3x+0x98>
    180c:	87 95       	ror	r24
    180e:	77 95       	ror	r23
    1810:	67 95       	ror	r22
    1812:	b7 95       	ror	r27
    1814:	f7 95       	ror	r31
    1816:	9e 3f       	cpi	r25, 0xFE	; 254
    1818:	08 f0       	brcs	.+2      	; 0x181c <__addsf3x+0x96>
    181a:	b3 cf       	rjmp	.-154    	; 0x1782 <__addsf3+0x1e>
    181c:	93 95       	inc	r25
    181e:	88 0f       	add	r24, r24
    1820:	08 f0       	brcs	.+2      	; 0x1824 <__addsf3x+0x9e>
    1822:	99 27       	eor	r25, r25
    1824:	ee 0f       	add	r30, r30
    1826:	97 95       	ror	r25
    1828:	87 95       	ror	r24
    182a:	08 95       	ret

0000182c <__divsf3>:
    182c:	0c d0       	rcall	.+24     	; 0x1846 <__divsf3x>
    182e:	eb c0       	rjmp	.+470    	; 0x1a06 <__fp_round>
    1830:	e3 d0       	rcall	.+454    	; 0x19f8 <__fp_pscB>
    1832:	40 f0       	brcs	.+16     	; 0x1844 <__divsf3+0x18>
    1834:	da d0       	rcall	.+436    	; 0x19ea <__fp_pscA>
    1836:	30 f0       	brcs	.+12     	; 0x1844 <__divsf3+0x18>
    1838:	21 f4       	brne	.+8      	; 0x1842 <__divsf3+0x16>
    183a:	5f 3f       	cpi	r21, 0xFF	; 255
    183c:	19 f0       	breq	.+6      	; 0x1844 <__divsf3+0x18>
    183e:	cc c0       	rjmp	.+408    	; 0x19d8 <__fp_inf>
    1840:	51 11       	cpse	r21, r1
    1842:	15 c1       	rjmp	.+554    	; 0x1a6e <__fp_szero>
    1844:	cf c0       	rjmp	.+414    	; 0x19e4 <__fp_nan>

00001846 <__divsf3x>:
    1846:	f0 d0       	rcall	.+480    	; 0x1a28 <__fp_split3>
    1848:	98 f3       	brcs	.-26     	; 0x1830 <__divsf3+0x4>

0000184a <__divsf3_pse>:
    184a:	99 23       	and	r25, r25
    184c:	c9 f3       	breq	.-14     	; 0x1840 <__divsf3+0x14>
    184e:	55 23       	and	r21, r21
    1850:	b1 f3       	breq	.-20     	; 0x183e <__divsf3+0x12>
    1852:	95 1b       	sub	r25, r21
    1854:	55 0b       	sbc	r21, r21
    1856:	bb 27       	eor	r27, r27
    1858:	aa 27       	eor	r26, r26
    185a:	62 17       	cp	r22, r18
    185c:	73 07       	cpc	r23, r19
    185e:	84 07       	cpc	r24, r20
    1860:	38 f0       	brcs	.+14     	; 0x1870 <__divsf3_pse+0x26>
    1862:	9f 5f       	subi	r25, 0xFF	; 255
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	44 1f       	adc	r20, r20
    186c:	aa 1f       	adc	r26, r26
    186e:	a9 f3       	breq	.-22     	; 0x185a <__divsf3_pse+0x10>
    1870:	33 d0       	rcall	.+102    	; 0x18d8 <__divsf3_pse+0x8e>
    1872:	0e 2e       	mov	r0, r30
    1874:	3a f0       	brmi	.+14     	; 0x1884 <__divsf3_pse+0x3a>
    1876:	e0 e8       	ldi	r30, 0x80	; 128
    1878:	30 d0       	rcall	.+96     	; 0x18da <__divsf3_pse+0x90>
    187a:	91 50       	subi	r25, 0x01	; 1
    187c:	50 40       	sbci	r21, 0x00	; 0
    187e:	e6 95       	lsr	r30
    1880:	00 1c       	adc	r0, r0
    1882:	ca f7       	brpl	.-14     	; 0x1876 <__divsf3_pse+0x2c>
    1884:	29 d0       	rcall	.+82     	; 0x18d8 <__divsf3_pse+0x8e>
    1886:	fe 2f       	mov	r31, r30
    1888:	27 d0       	rcall	.+78     	; 0x18d8 <__divsf3_pse+0x8e>
    188a:	66 0f       	add	r22, r22
    188c:	77 1f       	adc	r23, r23
    188e:	88 1f       	adc	r24, r24
    1890:	bb 1f       	adc	r27, r27
    1892:	26 17       	cp	r18, r22
    1894:	37 07       	cpc	r19, r23
    1896:	48 07       	cpc	r20, r24
    1898:	ab 07       	cpc	r26, r27
    189a:	b0 e8       	ldi	r27, 0x80	; 128
    189c:	09 f0       	breq	.+2      	; 0x18a0 <__divsf3_pse+0x56>
    189e:	bb 0b       	sbc	r27, r27
    18a0:	80 2d       	mov	r24, r0
    18a2:	bf 01       	movw	r22, r30
    18a4:	ff 27       	eor	r31, r31
    18a6:	93 58       	subi	r25, 0x83	; 131
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255
    18aa:	2a f0       	brmi	.+10     	; 0x18b6 <__divsf3_pse+0x6c>
    18ac:	9e 3f       	cpi	r25, 0xFE	; 254
    18ae:	51 05       	cpc	r21, r1
    18b0:	68 f0       	brcs	.+26     	; 0x18cc <__divsf3_pse+0x82>
    18b2:	92 c0       	rjmp	.+292    	; 0x19d8 <__fp_inf>
    18b4:	dc c0       	rjmp	.+440    	; 0x1a6e <__fp_szero>
    18b6:	5f 3f       	cpi	r21, 0xFF	; 255
    18b8:	ec f3       	brlt	.-6      	; 0x18b4 <__divsf3_pse+0x6a>
    18ba:	98 3e       	cpi	r25, 0xE8	; 232
    18bc:	dc f3       	brlt	.-10     	; 0x18b4 <__divsf3_pse+0x6a>
    18be:	86 95       	lsr	r24
    18c0:	77 95       	ror	r23
    18c2:	67 95       	ror	r22
    18c4:	b7 95       	ror	r27
    18c6:	f7 95       	ror	r31
    18c8:	9f 5f       	subi	r25, 0xFF	; 255
    18ca:	c9 f7       	brne	.-14     	; 0x18be <__divsf3_pse+0x74>
    18cc:	88 0f       	add	r24, r24
    18ce:	91 1d       	adc	r25, r1
    18d0:	96 95       	lsr	r25
    18d2:	87 95       	ror	r24
    18d4:	97 f9       	bld	r25, 7
    18d6:	08 95       	ret
    18d8:	e1 e0       	ldi	r30, 0x01	; 1
    18da:	66 0f       	add	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	bb 1f       	adc	r27, r27
    18e2:	62 17       	cp	r22, r18
    18e4:	73 07       	cpc	r23, r19
    18e6:	84 07       	cpc	r24, r20
    18e8:	ba 07       	cpc	r27, r26
    18ea:	20 f0       	brcs	.+8      	; 0x18f4 <__divsf3_pse+0xaa>
    18ec:	62 1b       	sub	r22, r18
    18ee:	73 0b       	sbc	r23, r19
    18f0:	84 0b       	sbc	r24, r20
    18f2:	ba 0b       	sbc	r27, r26
    18f4:	ee 1f       	adc	r30, r30
    18f6:	88 f7       	brcc	.-30     	; 0x18da <__divsf3_pse+0x90>
    18f8:	e0 95       	com	r30
    18fa:	08 95       	ret

000018fc <__fixsfsi>:
    18fc:	04 d0       	rcall	.+8      	; 0x1906 <__fixunssfsi>
    18fe:	68 94       	set
    1900:	b1 11       	cpse	r27, r1
    1902:	b5 c0       	rjmp	.+362    	; 0x1a6e <__fp_szero>
    1904:	08 95       	ret

00001906 <__fixunssfsi>:
    1906:	98 d0       	rcall	.+304    	; 0x1a38 <__fp_splitA>
    1908:	88 f0       	brcs	.+34     	; 0x192c <__fixunssfsi+0x26>
    190a:	9f 57       	subi	r25, 0x7F	; 127
    190c:	90 f0       	brcs	.+36     	; 0x1932 <__fixunssfsi+0x2c>
    190e:	b9 2f       	mov	r27, r25
    1910:	99 27       	eor	r25, r25
    1912:	b7 51       	subi	r27, 0x17	; 23
    1914:	a0 f0       	brcs	.+40     	; 0x193e <__fixunssfsi+0x38>
    1916:	d1 f0       	breq	.+52     	; 0x194c <__fixunssfsi+0x46>
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	1a f0       	brmi	.+6      	; 0x1928 <__fixunssfsi+0x22>
    1922:	ba 95       	dec	r27
    1924:	c9 f7       	brne	.-14     	; 0x1918 <__fixunssfsi+0x12>
    1926:	12 c0       	rjmp	.+36     	; 0x194c <__fixunssfsi+0x46>
    1928:	b1 30       	cpi	r27, 0x01	; 1
    192a:	81 f0       	breq	.+32     	; 0x194c <__fixunssfsi+0x46>
    192c:	9f d0       	rcall	.+318    	; 0x1a6c <__fp_zero>
    192e:	b1 e0       	ldi	r27, 0x01	; 1
    1930:	08 95       	ret
    1932:	9c c0       	rjmp	.+312    	; 0x1a6c <__fp_zero>
    1934:	67 2f       	mov	r22, r23
    1936:	78 2f       	mov	r23, r24
    1938:	88 27       	eor	r24, r24
    193a:	b8 5f       	subi	r27, 0xF8	; 248
    193c:	39 f0       	breq	.+14     	; 0x194c <__fixunssfsi+0x46>
    193e:	b9 3f       	cpi	r27, 0xF9	; 249
    1940:	cc f3       	brlt	.-14     	; 0x1934 <__fixunssfsi+0x2e>
    1942:	86 95       	lsr	r24
    1944:	77 95       	ror	r23
    1946:	67 95       	ror	r22
    1948:	b3 95       	inc	r27
    194a:	d9 f7       	brne	.-10     	; 0x1942 <__fixunssfsi+0x3c>
    194c:	3e f4       	brtc	.+14     	; 0x195c <__fixunssfsi+0x56>
    194e:	90 95       	com	r25
    1950:	80 95       	com	r24
    1952:	70 95       	com	r23
    1954:	61 95       	neg	r22
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	8f 4f       	sbci	r24, 0xFF	; 255
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	08 95       	ret

0000195e <__floatunsisf>:
    195e:	e8 94       	clt
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <__floatsisf+0x12>

00001962 <__floatsisf>:
    1962:	97 fb       	bst	r25, 7
    1964:	3e f4       	brtc	.+14     	; 0x1974 <__floatsisf+0x12>
    1966:	90 95       	com	r25
    1968:	80 95       	com	r24
    196a:	70 95       	com	r23
    196c:	61 95       	neg	r22
    196e:	7f 4f       	sbci	r23, 0xFF	; 255
    1970:	8f 4f       	sbci	r24, 0xFF	; 255
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	99 23       	and	r25, r25
    1976:	a9 f0       	breq	.+42     	; 0x19a2 <__floatsisf+0x40>
    1978:	f9 2f       	mov	r31, r25
    197a:	96 e9       	ldi	r25, 0x96	; 150
    197c:	bb 27       	eor	r27, r27
    197e:	93 95       	inc	r25
    1980:	f6 95       	lsr	r31
    1982:	87 95       	ror	r24
    1984:	77 95       	ror	r23
    1986:	67 95       	ror	r22
    1988:	b7 95       	ror	r27
    198a:	f1 11       	cpse	r31, r1
    198c:	f8 cf       	rjmp	.-16     	; 0x197e <__floatsisf+0x1c>
    198e:	fa f4       	brpl	.+62     	; 0x19ce <__floatsisf+0x6c>
    1990:	bb 0f       	add	r27, r27
    1992:	11 f4       	brne	.+4      	; 0x1998 <__floatsisf+0x36>
    1994:	60 ff       	sbrs	r22, 0
    1996:	1b c0       	rjmp	.+54     	; 0x19ce <__floatsisf+0x6c>
    1998:	6f 5f       	subi	r22, 0xFF	; 255
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	8f 4f       	sbci	r24, 0xFF	; 255
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	16 c0       	rjmp	.+44     	; 0x19ce <__floatsisf+0x6c>
    19a2:	88 23       	and	r24, r24
    19a4:	11 f0       	breq	.+4      	; 0x19aa <__floatsisf+0x48>
    19a6:	96 e9       	ldi	r25, 0x96	; 150
    19a8:	11 c0       	rjmp	.+34     	; 0x19cc <__floatsisf+0x6a>
    19aa:	77 23       	and	r23, r23
    19ac:	21 f0       	breq	.+8      	; 0x19b6 <__floatsisf+0x54>
    19ae:	9e e8       	ldi	r25, 0x8E	; 142
    19b0:	87 2f       	mov	r24, r23
    19b2:	76 2f       	mov	r23, r22
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <__floatsisf+0x5e>
    19b6:	66 23       	and	r22, r22
    19b8:	71 f0       	breq	.+28     	; 0x19d6 <__floatsisf+0x74>
    19ba:	96 e8       	ldi	r25, 0x86	; 134
    19bc:	86 2f       	mov	r24, r22
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	2a f0       	brmi	.+10     	; 0x19ce <__floatsisf+0x6c>
    19c4:	9a 95       	dec	r25
    19c6:	66 0f       	add	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	da f7       	brpl	.-10     	; 0x19c4 <__floatsisf+0x62>
    19ce:	88 0f       	add	r24, r24
    19d0:	96 95       	lsr	r25
    19d2:	87 95       	ror	r24
    19d4:	97 f9       	bld	r25, 7
    19d6:	08 95       	ret

000019d8 <__fp_inf>:
    19d8:	97 f9       	bld	r25, 7
    19da:	9f 67       	ori	r25, 0x7F	; 127
    19dc:	80 e8       	ldi	r24, 0x80	; 128
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	08 95       	ret

000019e4 <__fp_nan>:
    19e4:	9f ef       	ldi	r25, 0xFF	; 255
    19e6:	80 ec       	ldi	r24, 0xC0	; 192
    19e8:	08 95       	ret

000019ea <__fp_pscA>:
    19ea:	00 24       	eor	r0, r0
    19ec:	0a 94       	dec	r0
    19ee:	16 16       	cp	r1, r22
    19f0:	17 06       	cpc	r1, r23
    19f2:	18 06       	cpc	r1, r24
    19f4:	09 06       	cpc	r0, r25
    19f6:	08 95       	ret

000019f8 <__fp_pscB>:
    19f8:	00 24       	eor	r0, r0
    19fa:	0a 94       	dec	r0
    19fc:	12 16       	cp	r1, r18
    19fe:	13 06       	cpc	r1, r19
    1a00:	14 06       	cpc	r1, r20
    1a02:	05 06       	cpc	r0, r21
    1a04:	08 95       	ret

00001a06 <__fp_round>:
    1a06:	09 2e       	mov	r0, r25
    1a08:	03 94       	inc	r0
    1a0a:	00 0c       	add	r0, r0
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <__fp_round+0xc>
    1a0e:	88 23       	and	r24, r24
    1a10:	52 f0       	brmi	.+20     	; 0x1a26 <__fp_round+0x20>
    1a12:	bb 0f       	add	r27, r27
    1a14:	40 f4       	brcc	.+16     	; 0x1a26 <__fp_round+0x20>
    1a16:	bf 2b       	or	r27, r31
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <__fp_round+0x18>
    1a1a:	60 ff       	sbrs	r22, 0
    1a1c:	04 c0       	rjmp	.+8      	; 0x1a26 <__fp_round+0x20>
    1a1e:	6f 5f       	subi	r22, 0xFF	; 255
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	8f 4f       	sbci	r24, 0xFF	; 255
    1a24:	9f 4f       	sbci	r25, 0xFF	; 255
    1a26:	08 95       	ret

00001a28 <__fp_split3>:
    1a28:	57 fd       	sbrc	r21, 7
    1a2a:	90 58       	subi	r25, 0x80	; 128
    1a2c:	44 0f       	add	r20, r20
    1a2e:	55 1f       	adc	r21, r21
    1a30:	59 f0       	breq	.+22     	; 0x1a48 <__fp_splitA+0x10>
    1a32:	5f 3f       	cpi	r21, 0xFF	; 255
    1a34:	71 f0       	breq	.+28     	; 0x1a52 <__fp_splitA+0x1a>
    1a36:	47 95       	ror	r20

00001a38 <__fp_splitA>:
    1a38:	88 0f       	add	r24, r24
    1a3a:	97 fb       	bst	r25, 7
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	61 f0       	breq	.+24     	; 0x1a58 <__fp_splitA+0x20>
    1a40:	9f 3f       	cpi	r25, 0xFF	; 255
    1a42:	79 f0       	breq	.+30     	; 0x1a62 <__fp_splitA+0x2a>
    1a44:	87 95       	ror	r24
    1a46:	08 95       	ret
    1a48:	12 16       	cp	r1, r18
    1a4a:	13 06       	cpc	r1, r19
    1a4c:	14 06       	cpc	r1, r20
    1a4e:	55 1f       	adc	r21, r21
    1a50:	f2 cf       	rjmp	.-28     	; 0x1a36 <__fp_split3+0xe>
    1a52:	46 95       	lsr	r20
    1a54:	f1 df       	rcall	.-30     	; 0x1a38 <__fp_splitA>
    1a56:	08 c0       	rjmp	.+16     	; 0x1a68 <__fp_splitA+0x30>
    1a58:	16 16       	cp	r1, r22
    1a5a:	17 06       	cpc	r1, r23
    1a5c:	18 06       	cpc	r1, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	f1 cf       	rjmp	.-30     	; 0x1a44 <__fp_splitA+0xc>
    1a62:	86 95       	lsr	r24
    1a64:	71 05       	cpc	r23, r1
    1a66:	61 05       	cpc	r22, r1
    1a68:	08 94       	sec
    1a6a:	08 95       	ret

00001a6c <__fp_zero>:
    1a6c:	e8 94       	clt

00001a6e <__fp_szero>:
    1a6e:	bb 27       	eor	r27, r27
    1a70:	66 27       	eor	r22, r22
    1a72:	77 27       	eor	r23, r23
    1a74:	cb 01       	movw	r24, r22
    1a76:	97 f9       	bld	r25, 7
    1a78:	08 95       	ret

00001a7a <__mulsf3>:
    1a7a:	0b d0       	rcall	.+22     	; 0x1a92 <__mulsf3x>
    1a7c:	c4 cf       	rjmp	.-120    	; 0x1a06 <__fp_round>
    1a7e:	b5 df       	rcall	.-150    	; 0x19ea <__fp_pscA>
    1a80:	28 f0       	brcs	.+10     	; 0x1a8c <__mulsf3+0x12>
    1a82:	ba df       	rcall	.-140    	; 0x19f8 <__fp_pscB>
    1a84:	18 f0       	brcs	.+6      	; 0x1a8c <__mulsf3+0x12>
    1a86:	95 23       	and	r25, r21
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <__mulsf3+0x12>
    1a8a:	a6 cf       	rjmp	.-180    	; 0x19d8 <__fp_inf>
    1a8c:	ab cf       	rjmp	.-170    	; 0x19e4 <__fp_nan>
    1a8e:	11 24       	eor	r1, r1
    1a90:	ee cf       	rjmp	.-36     	; 0x1a6e <__fp_szero>

00001a92 <__mulsf3x>:
    1a92:	ca df       	rcall	.-108    	; 0x1a28 <__fp_split3>
    1a94:	a0 f3       	brcs	.-24     	; 0x1a7e <__mulsf3+0x4>

00001a96 <__mulsf3_pse>:
    1a96:	95 9f       	mul	r25, r21
    1a98:	d1 f3       	breq	.-12     	; 0x1a8e <__mulsf3+0x14>
    1a9a:	95 0f       	add	r25, r21
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	55 1f       	adc	r21, r21
    1aa0:	62 9f       	mul	r22, r18
    1aa2:	f0 01       	movw	r30, r0
    1aa4:	72 9f       	mul	r23, r18
    1aa6:	bb 27       	eor	r27, r27
    1aa8:	f0 0d       	add	r31, r0
    1aaa:	b1 1d       	adc	r27, r1
    1aac:	63 9f       	mul	r22, r19
    1aae:	aa 27       	eor	r26, r26
    1ab0:	f0 0d       	add	r31, r0
    1ab2:	b1 1d       	adc	r27, r1
    1ab4:	aa 1f       	adc	r26, r26
    1ab6:	64 9f       	mul	r22, r20
    1ab8:	66 27       	eor	r22, r22
    1aba:	b0 0d       	add	r27, r0
    1abc:	a1 1d       	adc	r26, r1
    1abe:	66 1f       	adc	r22, r22
    1ac0:	82 9f       	mul	r24, r18
    1ac2:	22 27       	eor	r18, r18
    1ac4:	b0 0d       	add	r27, r0
    1ac6:	a1 1d       	adc	r26, r1
    1ac8:	62 1f       	adc	r22, r18
    1aca:	73 9f       	mul	r23, r19
    1acc:	b0 0d       	add	r27, r0
    1ace:	a1 1d       	adc	r26, r1
    1ad0:	62 1f       	adc	r22, r18
    1ad2:	83 9f       	mul	r24, r19
    1ad4:	a0 0d       	add	r26, r0
    1ad6:	61 1d       	adc	r22, r1
    1ad8:	22 1f       	adc	r18, r18
    1ada:	74 9f       	mul	r23, r20
    1adc:	33 27       	eor	r19, r19
    1ade:	a0 0d       	add	r26, r0
    1ae0:	61 1d       	adc	r22, r1
    1ae2:	23 1f       	adc	r18, r19
    1ae4:	84 9f       	mul	r24, r20
    1ae6:	60 0d       	add	r22, r0
    1ae8:	21 1d       	adc	r18, r1
    1aea:	82 2f       	mov	r24, r18
    1aec:	76 2f       	mov	r23, r22
    1aee:	6a 2f       	mov	r22, r26
    1af0:	11 24       	eor	r1, r1
    1af2:	9f 57       	subi	r25, 0x7F	; 127
    1af4:	50 40       	sbci	r21, 0x00	; 0
    1af6:	8a f0       	brmi	.+34     	; 0x1b1a <__mulsf3_pse+0x84>
    1af8:	e1 f0       	breq	.+56     	; 0x1b32 <__mulsf3_pse+0x9c>
    1afa:	88 23       	and	r24, r24
    1afc:	4a f0       	brmi	.+18     	; 0x1b10 <__mulsf3_pse+0x7a>
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	bb 1f       	adc	r27, r27
    1b04:	66 1f       	adc	r22, r22
    1b06:	77 1f       	adc	r23, r23
    1b08:	88 1f       	adc	r24, r24
    1b0a:	91 50       	subi	r25, 0x01	; 1
    1b0c:	50 40       	sbci	r21, 0x00	; 0
    1b0e:	a9 f7       	brne	.-22     	; 0x1afa <__mulsf3_pse+0x64>
    1b10:	9e 3f       	cpi	r25, 0xFE	; 254
    1b12:	51 05       	cpc	r21, r1
    1b14:	70 f0       	brcs	.+28     	; 0x1b32 <__mulsf3_pse+0x9c>
    1b16:	60 cf       	rjmp	.-320    	; 0x19d8 <__fp_inf>
    1b18:	aa cf       	rjmp	.-172    	; 0x1a6e <__fp_szero>
    1b1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b1c:	ec f3       	brlt	.-6      	; 0x1b18 <__mulsf3_pse+0x82>
    1b1e:	98 3e       	cpi	r25, 0xE8	; 232
    1b20:	dc f3       	brlt	.-10     	; 0x1b18 <__mulsf3_pse+0x82>
    1b22:	86 95       	lsr	r24
    1b24:	77 95       	ror	r23
    1b26:	67 95       	ror	r22
    1b28:	b7 95       	ror	r27
    1b2a:	f7 95       	ror	r31
    1b2c:	e7 95       	ror	r30
    1b2e:	9f 5f       	subi	r25, 0xFF	; 255
    1b30:	c1 f7       	brne	.-16     	; 0x1b22 <__mulsf3_pse+0x8c>
    1b32:	fe 2b       	or	r31, r30
    1b34:	88 0f       	add	r24, r24
    1b36:	91 1d       	adc	r25, r1
    1b38:	96 95       	lsr	r25
    1b3a:	87 95       	ror	r24
    1b3c:	97 f9       	bld	r25, 7
    1b3e:	08 95       	ret

00001b40 <__udivmodhi4>:
    1b40:	aa 1b       	sub	r26, r26
    1b42:	bb 1b       	sub	r27, r27
    1b44:	51 e1       	ldi	r21, 0x11	; 17
    1b46:	07 c0       	rjmp	.+14     	; 0x1b56 <__udivmodhi4_ep>

00001b48 <__udivmodhi4_loop>:
    1b48:	aa 1f       	adc	r26, r26
    1b4a:	bb 1f       	adc	r27, r27
    1b4c:	a6 17       	cp	r26, r22
    1b4e:	b7 07       	cpc	r27, r23
    1b50:	10 f0       	brcs	.+4      	; 0x1b56 <__udivmodhi4_ep>
    1b52:	a6 1b       	sub	r26, r22
    1b54:	b7 0b       	sbc	r27, r23

00001b56 <__udivmodhi4_ep>:
    1b56:	88 1f       	adc	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	5a 95       	dec	r21
    1b5c:	a9 f7       	brne	.-22     	; 0x1b48 <__udivmodhi4_loop>
    1b5e:	80 95       	com	r24
    1b60:	90 95       	com	r25
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	08 95       	ret

00001b68 <__divmodhi4>:
    1b68:	97 fb       	bst	r25, 7
    1b6a:	07 2e       	mov	r0, r23
    1b6c:	16 f4       	brtc	.+4      	; 0x1b72 <__divmodhi4+0xa>
    1b6e:	00 94       	com	r0
    1b70:	06 d0       	rcall	.+12     	; 0x1b7e <__divmodhi4_neg1>
    1b72:	77 fd       	sbrc	r23, 7
    1b74:	08 d0       	rcall	.+16     	; 0x1b86 <__divmodhi4_neg2>
    1b76:	e4 df       	rcall	.-56     	; 0x1b40 <__udivmodhi4>
    1b78:	07 fc       	sbrc	r0, 7
    1b7a:	05 d0       	rcall	.+10     	; 0x1b86 <__divmodhi4_neg2>
    1b7c:	3e f4       	brtc	.+14     	; 0x1b8c <__divmodhi4_exit>

00001b7e <__divmodhi4_neg1>:
    1b7e:	90 95       	com	r25
    1b80:	81 95       	neg	r24
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
    1b84:	08 95       	ret

00001b86 <__divmodhi4_neg2>:
    1b86:	70 95       	com	r23
    1b88:	61 95       	neg	r22
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255

00001b8c <__divmodhi4_exit>:
    1b8c:	08 95       	ret

00001b8e <__udivmodsi4>:
    1b8e:	a1 e2       	ldi	r26, 0x21	; 33
    1b90:	1a 2e       	mov	r1, r26
    1b92:	aa 1b       	sub	r26, r26
    1b94:	bb 1b       	sub	r27, r27
    1b96:	fd 01       	movw	r30, r26
    1b98:	0d c0       	rjmp	.+26     	; 0x1bb4 <__udivmodsi4_ep>

00001b9a <__udivmodsi4_loop>:
    1b9a:	aa 1f       	adc	r26, r26
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	ee 1f       	adc	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	a2 17       	cp	r26, r18
    1ba4:	b3 07       	cpc	r27, r19
    1ba6:	e4 07       	cpc	r30, r20
    1ba8:	f5 07       	cpc	r31, r21
    1baa:	20 f0       	brcs	.+8      	; 0x1bb4 <__udivmodsi4_ep>
    1bac:	a2 1b       	sub	r26, r18
    1bae:	b3 0b       	sbc	r27, r19
    1bb0:	e4 0b       	sbc	r30, r20
    1bb2:	f5 0b       	sbc	r31, r21

00001bb4 <__udivmodsi4_ep>:
    1bb4:	66 1f       	adc	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	1a 94       	dec	r1
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <__udivmodsi4_loop>
    1bc0:	60 95       	com	r22
    1bc2:	70 95       	com	r23
    1bc4:	80 95       	com	r24
    1bc6:	90 95       	com	r25
    1bc8:	9b 01       	movw	r18, r22
    1bca:	ac 01       	movw	r20, r24
    1bcc:	bd 01       	movw	r22, r26
    1bce:	cf 01       	movw	r24, r30
    1bd0:	08 95       	ret

00001bd2 <__tablejump2__>:
    1bd2:	ee 0f       	add	r30, r30
    1bd4:	ff 1f       	adc	r31, r31

00001bd6 <__tablejump__>:
    1bd6:	05 90       	lpm	r0, Z+
    1bd8:	f4 91       	lpm	r31, Z
    1bda:	e0 2d       	mov	r30, r0
    1bdc:	09 94       	ijmp

00001bde <isupper>:
    1bde:	85 fd       	sbrc	r24, 5
    1be0:	1f c2       	rjmp	.+1086   	; 0x2020 <__ctype_isfalse>

00001be2 <isalpha>:
    1be2:	80 62       	ori	r24, 0x20	; 32

00001be4 <islower>:
    1be4:	91 11       	cpse	r25, r1
    1be6:	1c c2       	rjmp	.+1080   	; 0x2020 <__ctype_isfalse>
    1be8:	81 56       	subi	r24, 0x61	; 97
    1bea:	8a 51       	subi	r24, 0x1A	; 26
    1bec:	e0 f7       	brcc	.-8      	; 0x1be6 <islower+0x2>
    1bee:	08 95       	ret

00001bf0 <fputc>:
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	8c 01       	movw	r16, r24
    1bfa:	eb 01       	movw	r28, r22
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	81 fd       	sbrc	r24, 1
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <fputc+0x18>
    1c02:	0f ef       	ldi	r16, 0xFF	; 255
    1c04:	1f ef       	ldi	r17, 0xFF	; 255
    1c06:	1a c0       	rjmp	.+52     	; 0x1c3c <fputc+0x4c>
    1c08:	82 ff       	sbrs	r24, 2
    1c0a:	0d c0       	rjmp	.+26     	; 0x1c26 <fputc+0x36>
    1c0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	28 17       	cp	r18, r24
    1c16:	39 07       	cpc	r19, r25
    1c18:	64 f4       	brge	.+24     	; 0x1c32 <fputc+0x42>
    1c1a:	e8 81       	ld	r30, Y
    1c1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c1e:	01 93       	st	Z+, r16
    1c20:	f9 83       	std	Y+1, r31	; 0x01
    1c22:	e8 83       	st	Y, r30
    1c24:	06 c0       	rjmp	.+12     	; 0x1c32 <fputc+0x42>
    1c26:	e8 85       	ldd	r30, Y+8	; 0x08
    1c28:	f9 85       	ldd	r31, Y+9	; 0x09
    1c2a:	80 2f       	mov	r24, r16
    1c2c:	09 95       	icall
    1c2e:	89 2b       	or	r24, r25
    1c30:	41 f7       	brne	.-48     	; 0x1c02 <fputc+0x12>
    1c32:	8e 81       	ldd	r24, Y+6	; 0x06
    1c34:	9f 81       	ldd	r25, Y+7	; 0x07
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	9f 83       	std	Y+7, r25	; 0x07
    1c3a:	8e 83       	std	Y+6, r24	; 0x06
    1c3c:	c8 01       	movw	r24, r16
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <sprintf>:
    1c48:	ae e0       	ldi	r26, 0x0E	; 14
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e9 e2       	ldi	r30, 0x29	; 41
    1c4e:	fe e0       	ldi	r31, 0x0E	; 14
    1c50:	6c c2       	rjmp	.+1240   	; 0x212a <__prologue_saves__+0x1c>
    1c52:	0d 89       	ldd	r16, Y+21	; 0x15
    1c54:	1e 89       	ldd	r17, Y+22	; 0x16
    1c56:	86 e0       	ldi	r24, 0x06	; 6
    1c58:	8c 83       	std	Y+4, r24	; 0x04
    1c5a:	1a 83       	std	Y+2, r17	; 0x02
    1c5c:	09 83       	std	Y+1, r16	; 0x01
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	9f e7       	ldi	r25, 0x7F	; 127
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	ce 01       	movw	r24, r28
    1c68:	49 96       	adiw	r24, 0x19	; 25
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	6f 89       	ldd	r22, Y+23	; 0x17
    1c6e:	78 8d       	ldd	r23, Y+24	; 0x18
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	08 d0       	rcall	.+16     	; 0x1c86 <vfprintf>
    1c76:	ef 81       	ldd	r30, Y+7	; 0x07
    1c78:	f8 85       	ldd	r31, Y+8	; 0x08
    1c7a:	e0 0f       	add	r30, r16
    1c7c:	f1 1f       	adc	r31, r17
    1c7e:	10 82       	st	Z, r1
    1c80:	2e 96       	adiw	r28, 0x0e	; 14
    1c82:	e4 e0       	ldi	r30, 0x04	; 4
    1c84:	6e c2       	rjmp	.+1244   	; 0x2162 <__epilogue_restores__+0x1c>

00001c86 <vfprintf>:
    1c86:	ac e0       	ldi	r26, 0x0C	; 12
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e8 e4       	ldi	r30, 0x48	; 72
    1c8c:	fe e0       	ldi	r31, 0x0E	; 14
    1c8e:	3f c2       	rjmp	.+1150   	; 0x210e <__prologue_saves__>
    1c90:	7c 01       	movw	r14, r24
    1c92:	6b 01       	movw	r12, r22
    1c94:	8a 01       	movw	r16, r20
    1c96:	fc 01       	movw	r30, r24
    1c98:	17 82       	std	Z+7, r1	; 0x07
    1c9a:	16 82       	std	Z+6, r1	; 0x06
    1c9c:	83 81       	ldd	r24, Z+3	; 0x03
    1c9e:	81 ff       	sbrs	r24, 1
    1ca0:	b9 c1       	rjmp	.+882    	; 0x2014 <vfprintf+0x38e>
    1ca2:	88 24       	eor	r8, r8
    1ca4:	83 94       	inc	r8
    1ca6:	91 2c       	mov	r9, r1
    1ca8:	8c 0e       	add	r8, r28
    1caa:	9d 1e       	adc	r9, r29
    1cac:	f7 01       	movw	r30, r14
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	f6 01       	movw	r30, r12
    1cb2:	93 fd       	sbrc	r25, 3
    1cb4:	85 91       	lpm	r24, Z+
    1cb6:	93 ff       	sbrs	r25, 3
    1cb8:	81 91       	ld	r24, Z+
    1cba:	6f 01       	movw	r12, r30
    1cbc:	88 23       	and	r24, r24
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <vfprintf+0x3c>
    1cc0:	a5 c1       	rjmp	.+842    	; 0x200c <vfprintf+0x386>
    1cc2:	85 32       	cpi	r24, 0x25	; 37
    1cc4:	39 f4       	brne	.+14     	; 0x1cd4 <vfprintf+0x4e>
    1cc6:	93 fd       	sbrc	r25, 3
    1cc8:	85 91       	lpm	r24, Z+
    1cca:	93 ff       	sbrs	r25, 3
    1ccc:	81 91       	ld	r24, Z+
    1cce:	6f 01       	movw	r12, r30
    1cd0:	85 32       	cpi	r24, 0x25	; 37
    1cd2:	21 f4       	brne	.+8      	; 0x1cdc <vfprintf+0x56>
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	8b df       	rcall	.-234    	; 0x1bf0 <fputc>
    1cda:	e8 cf       	rjmp	.-48     	; 0x1cac <vfprintf+0x26>
    1cdc:	51 2c       	mov	r5, r1
    1cde:	31 2c       	mov	r3, r1
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	20 32       	cpi	r18, 0x20	; 32
    1ce4:	a8 f4       	brcc	.+42     	; 0x1d10 <vfprintf+0x8a>
    1ce6:	8b 32       	cpi	r24, 0x2B	; 43
    1ce8:	61 f0       	breq	.+24     	; 0x1d02 <vfprintf+0x7c>
    1cea:	28 f4       	brcc	.+10     	; 0x1cf6 <vfprintf+0x70>
    1cec:	80 32       	cpi	r24, 0x20	; 32
    1cee:	51 f0       	breq	.+20     	; 0x1d04 <vfprintf+0x7e>
    1cf0:	83 32       	cpi	r24, 0x23	; 35
    1cf2:	71 f4       	brne	.+28     	; 0x1d10 <vfprintf+0x8a>
    1cf4:	0b c0       	rjmp	.+22     	; 0x1d0c <vfprintf+0x86>
    1cf6:	8d 32       	cpi	r24, 0x2D	; 45
    1cf8:	39 f0       	breq	.+14     	; 0x1d08 <vfprintf+0x82>
    1cfa:	80 33       	cpi	r24, 0x30	; 48
    1cfc:	49 f4       	brne	.+18     	; 0x1d10 <vfprintf+0x8a>
    1cfe:	21 60       	ori	r18, 0x01	; 1
    1d00:	28 c0       	rjmp	.+80     	; 0x1d52 <vfprintf+0xcc>
    1d02:	22 60       	ori	r18, 0x02	; 2
    1d04:	24 60       	ori	r18, 0x04	; 4
    1d06:	25 c0       	rjmp	.+74     	; 0x1d52 <vfprintf+0xcc>
    1d08:	28 60       	ori	r18, 0x08	; 8
    1d0a:	23 c0       	rjmp	.+70     	; 0x1d52 <vfprintf+0xcc>
    1d0c:	20 61       	ori	r18, 0x10	; 16
    1d0e:	21 c0       	rjmp	.+66     	; 0x1d52 <vfprintf+0xcc>
    1d10:	27 fd       	sbrc	r18, 7
    1d12:	27 c0       	rjmp	.+78     	; 0x1d62 <vfprintf+0xdc>
    1d14:	38 2f       	mov	r19, r24
    1d16:	30 53       	subi	r19, 0x30	; 48
    1d18:	3a 30       	cpi	r19, 0x0A	; 10
    1d1a:	78 f4       	brcc	.+30     	; 0x1d3a <vfprintf+0xb4>
    1d1c:	26 ff       	sbrs	r18, 6
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <vfprintf+0xa6>
    1d20:	fa e0       	ldi	r31, 0x0A	; 10
    1d22:	5f 9e       	mul	r5, r31
    1d24:	30 0d       	add	r19, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	53 2e       	mov	r5, r19
    1d2a:	13 c0       	rjmp	.+38     	; 0x1d52 <vfprintf+0xcc>
    1d2c:	8a e0       	ldi	r24, 0x0A	; 10
    1d2e:	38 9e       	mul	r3, r24
    1d30:	30 0d       	add	r19, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	33 2e       	mov	r3, r19
    1d36:	20 62       	ori	r18, 0x20	; 32
    1d38:	0c c0       	rjmp	.+24     	; 0x1d52 <vfprintf+0xcc>
    1d3a:	8e 32       	cpi	r24, 0x2E	; 46
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <vfprintf+0xc0>
    1d3e:	26 fd       	sbrc	r18, 6
    1d40:	65 c1       	rjmp	.+714    	; 0x200c <vfprintf+0x386>
    1d42:	20 64       	ori	r18, 0x40	; 64
    1d44:	06 c0       	rjmp	.+12     	; 0x1d52 <vfprintf+0xcc>
    1d46:	8c 36       	cpi	r24, 0x6C	; 108
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <vfprintf+0xc8>
    1d4a:	20 68       	ori	r18, 0x80	; 128
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <vfprintf+0xcc>
    1d4e:	88 36       	cpi	r24, 0x68	; 104
    1d50:	41 f4       	brne	.+16     	; 0x1d62 <vfprintf+0xdc>
    1d52:	f6 01       	movw	r30, r12
    1d54:	93 fd       	sbrc	r25, 3
    1d56:	85 91       	lpm	r24, Z+
    1d58:	93 ff       	sbrs	r25, 3
    1d5a:	81 91       	ld	r24, Z+
    1d5c:	6f 01       	movw	r12, r30
    1d5e:	81 11       	cpse	r24, r1
    1d60:	c0 cf       	rjmp	.-128    	; 0x1ce2 <vfprintf+0x5c>
    1d62:	98 2f       	mov	r25, r24
    1d64:	95 54       	subi	r25, 0x45	; 69
    1d66:	93 30       	cpi	r25, 0x03	; 3
    1d68:	18 f0       	brcs	.+6      	; 0x1d70 <vfprintf+0xea>
    1d6a:	90 52       	subi	r25, 0x20	; 32
    1d6c:	93 30       	cpi	r25, 0x03	; 3
    1d6e:	28 f4       	brcc	.+10     	; 0x1d7a <vfprintf+0xf4>
    1d70:	0c 5f       	subi	r16, 0xFC	; 252
    1d72:	1f 4f       	sbci	r17, 0xFF	; 255
    1d74:	ff e3       	ldi	r31, 0x3F	; 63
    1d76:	f9 83       	std	Y+1, r31	; 0x01
    1d78:	0d c0       	rjmp	.+26     	; 0x1d94 <vfprintf+0x10e>
    1d7a:	83 36       	cpi	r24, 0x63	; 99
    1d7c:	31 f0       	breq	.+12     	; 0x1d8a <vfprintf+0x104>
    1d7e:	83 37       	cpi	r24, 0x73	; 115
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <vfprintf+0x118>
    1d82:	83 35       	cpi	r24, 0x53	; 83
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <vfprintf+0x102>
    1d86:	5a c0       	rjmp	.+180    	; 0x1e3c <vfprintf+0x1b6>
    1d88:	22 c0       	rjmp	.+68     	; 0x1dce <vfprintf+0x148>
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	80 81       	ld	r24, Z
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	0e 5f       	subi	r16, 0xFE	; 254
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	44 24       	eor	r4, r4
    1d96:	43 94       	inc	r4
    1d98:	51 2c       	mov	r5, r1
    1d9a:	54 01       	movw	r10, r8
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <vfprintf+0x140>
    1d9e:	38 01       	movw	r6, r16
    1da0:	f2 e0       	ldi	r31, 0x02	; 2
    1da2:	6f 0e       	add	r6, r31
    1da4:	71 1c       	adc	r7, r1
    1da6:	f8 01       	movw	r30, r16
    1da8:	a0 80       	ld	r10, Z
    1daa:	b1 80       	ldd	r11, Z+1	; 0x01
    1dac:	26 ff       	sbrs	r18, 6
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <vfprintf+0x130>
    1db0:	65 2d       	mov	r22, r5
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <vfprintf+0x134>
    1db6:	6f ef       	ldi	r22, 0xFF	; 255
    1db8:	7f ef       	ldi	r23, 0xFF	; 255
    1dba:	c5 01       	movw	r24, r10
    1dbc:	2c 87       	std	Y+12, r18	; 0x0c
    1dbe:	3e d1       	rcall	.+636    	; 0x203c <strnlen>
    1dc0:	2c 01       	movw	r4, r24
    1dc2:	83 01       	movw	r16, r6
    1dc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dc6:	6f e7       	ldi	r22, 0x7F	; 127
    1dc8:	26 2e       	mov	r2, r22
    1dca:	22 22       	and	r2, r18
    1dcc:	17 c0       	rjmp	.+46     	; 0x1dfc <vfprintf+0x176>
    1dce:	38 01       	movw	r6, r16
    1dd0:	f2 e0       	ldi	r31, 0x02	; 2
    1dd2:	6f 0e       	add	r6, r31
    1dd4:	71 1c       	adc	r7, r1
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	a0 80       	ld	r10, Z
    1dda:	b1 80       	ldd	r11, Z+1	; 0x01
    1ddc:	26 ff       	sbrs	r18, 6
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <vfprintf+0x160>
    1de0:	65 2d       	mov	r22, r5
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <vfprintf+0x164>
    1de6:	6f ef       	ldi	r22, 0xFF	; 255
    1de8:	7f ef       	ldi	r23, 0xFF	; 255
    1dea:	c5 01       	movw	r24, r10
    1dec:	2c 87       	std	Y+12, r18	; 0x0c
    1dee:	1b d1       	rcall	.+566    	; 0x2026 <strnlen_P>
    1df0:	2c 01       	movw	r4, r24
    1df2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1df4:	50 e8       	ldi	r21, 0x80	; 128
    1df6:	25 2e       	mov	r2, r21
    1df8:	22 2a       	or	r2, r18
    1dfa:	83 01       	movw	r16, r6
    1dfc:	23 fc       	sbrc	r2, 3
    1dfe:	1a c0       	rjmp	.+52     	; 0x1e34 <vfprintf+0x1ae>
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <vfprintf+0x186>
    1e02:	b7 01       	movw	r22, r14
    1e04:	80 e2       	ldi	r24, 0x20	; 32
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	f3 de       	rcall	.-538    	; 0x1bf0 <fputc>
    1e0a:	3a 94       	dec	r3
    1e0c:	83 2d       	mov	r24, r3
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	48 16       	cp	r4, r24
    1e12:	59 06       	cpc	r5, r25
    1e14:	b0 f3       	brcs	.-20     	; 0x1e02 <vfprintf+0x17c>
    1e16:	0e c0       	rjmp	.+28     	; 0x1e34 <vfprintf+0x1ae>
    1e18:	f5 01       	movw	r30, r10
    1e1a:	27 fc       	sbrc	r2, 7
    1e1c:	85 91       	lpm	r24, Z+
    1e1e:	27 fe       	sbrs	r2, 7
    1e20:	81 91       	ld	r24, Z+
    1e22:	5f 01       	movw	r10, r30
    1e24:	b7 01       	movw	r22, r14
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	e3 de       	rcall	.-570    	; 0x1bf0 <fputc>
    1e2a:	31 10       	cpse	r3, r1
    1e2c:	3a 94       	dec	r3
    1e2e:	f1 e0       	ldi	r31, 0x01	; 1
    1e30:	4f 1a       	sub	r4, r31
    1e32:	51 08       	sbc	r5, r1
    1e34:	41 14       	cp	r4, r1
    1e36:	51 04       	cpc	r5, r1
    1e38:	79 f7       	brne	.-34     	; 0x1e18 <vfprintf+0x192>
    1e3a:	e5 c0       	rjmp	.+458    	; 0x2006 <vfprintf+0x380>
    1e3c:	84 36       	cpi	r24, 0x64	; 100
    1e3e:	11 f0       	breq	.+4      	; 0x1e44 <vfprintf+0x1be>
    1e40:	89 36       	cpi	r24, 0x69	; 105
    1e42:	39 f5       	brne	.+78     	; 0x1e92 <vfprintf+0x20c>
    1e44:	f8 01       	movw	r30, r16
    1e46:	27 ff       	sbrs	r18, 7
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <vfprintf+0x1d2>
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	0c 5f       	subi	r16, 0xFC	; 252
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	08 c0       	rjmp	.+16     	; 0x1e68 <vfprintf+0x1e2>
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	88 27       	eor	r24, r24
    1e5e:	77 fd       	sbrc	r23, 7
    1e60:	80 95       	com	r24
    1e62:	98 2f       	mov	r25, r24
    1e64:	0e 5f       	subi	r16, 0xFE	; 254
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	4f e6       	ldi	r20, 0x6F	; 111
    1e6a:	b4 2e       	mov	r11, r20
    1e6c:	b2 22       	and	r11, r18
    1e6e:	97 ff       	sbrs	r25, 7
    1e70:	09 c0       	rjmp	.+18     	; 0x1e84 <vfprintf+0x1fe>
    1e72:	90 95       	com	r25
    1e74:	80 95       	com	r24
    1e76:	70 95       	com	r23
    1e78:	61 95       	neg	r22
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e80:	f0 e8       	ldi	r31, 0x80	; 128
    1e82:	bf 2a       	or	r11, r31
    1e84:	2a e0       	ldi	r18, 0x0A	; 10
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	a4 01       	movw	r20, r8
    1e8a:	e3 d0       	rcall	.+454    	; 0x2052 <__ultoa_invert>
    1e8c:	a8 2e       	mov	r10, r24
    1e8e:	a8 18       	sub	r10, r8
    1e90:	42 c0       	rjmp	.+132    	; 0x1f16 <vfprintf+0x290>
    1e92:	85 37       	cpi	r24, 0x75	; 117
    1e94:	31 f4       	brne	.+12     	; 0x1ea2 <vfprintf+0x21c>
    1e96:	3f ee       	ldi	r19, 0xEF	; 239
    1e98:	b3 2e       	mov	r11, r19
    1e9a:	b2 22       	and	r11, r18
    1e9c:	2a e0       	ldi	r18, 0x0A	; 10
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	24 c0       	rjmp	.+72     	; 0x1eea <vfprintf+0x264>
    1ea2:	99 ef       	ldi	r25, 0xF9	; 249
    1ea4:	b9 2e       	mov	r11, r25
    1ea6:	b2 22       	and	r11, r18
    1ea8:	8f 36       	cpi	r24, 0x6F	; 111
    1eaa:	b9 f0       	breq	.+46     	; 0x1eda <vfprintf+0x254>
    1eac:	20 f4       	brcc	.+8      	; 0x1eb6 <vfprintf+0x230>
    1eae:	88 35       	cpi	r24, 0x58	; 88
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <vfprintf+0x22e>
    1eb2:	ac c0       	rjmp	.+344    	; 0x200c <vfprintf+0x386>
    1eb4:	0d c0       	rjmp	.+26     	; 0x1ed0 <vfprintf+0x24a>
    1eb6:	80 37       	cpi	r24, 0x70	; 112
    1eb8:	21 f0       	breq	.+8      	; 0x1ec2 <vfprintf+0x23c>
    1eba:	88 37       	cpi	r24, 0x78	; 120
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <vfprintf+0x23a>
    1ebe:	a6 c0       	rjmp	.+332    	; 0x200c <vfprintf+0x386>
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x240>
    1ec2:	20 e1       	ldi	r18, 0x10	; 16
    1ec4:	b2 2a       	or	r11, r18
    1ec6:	b4 fe       	sbrs	r11, 4
    1ec8:	0b c0       	rjmp	.+22     	; 0x1ee0 <vfprintf+0x25a>
    1eca:	84 e0       	ldi	r24, 0x04	; 4
    1ecc:	b8 2a       	or	r11, r24
    1ece:	08 c0       	rjmp	.+16     	; 0x1ee0 <vfprintf+0x25a>
    1ed0:	24 ff       	sbrs	r18, 4
    1ed2:	09 c0       	rjmp	.+18     	; 0x1ee6 <vfprintf+0x260>
    1ed4:	e6 e0       	ldi	r30, 0x06	; 6
    1ed6:	be 2a       	or	r11, r30
    1ed8:	06 c0       	rjmp	.+12     	; 0x1ee6 <vfprintf+0x260>
    1eda:	28 e0       	ldi	r18, 0x08	; 8
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	05 c0       	rjmp	.+10     	; 0x1eea <vfprintf+0x264>
    1ee0:	20 e1       	ldi	r18, 0x10	; 16
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <vfprintf+0x264>
    1ee6:	20 e1       	ldi	r18, 0x10	; 16
    1ee8:	32 e0       	ldi	r19, 0x02	; 2
    1eea:	f8 01       	movw	r30, r16
    1eec:	b7 fe       	sbrs	r11, 7
    1eee:	07 c0       	rjmp	.+14     	; 0x1efe <vfprintf+0x278>
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	0c 5f       	subi	r16, 0xFC	; 252
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	06 c0       	rjmp	.+12     	; 0x1f0a <vfprintf+0x284>
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 5f       	subi	r16, 0xFE	; 254
    1f08:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0a:	a4 01       	movw	r20, r8
    1f0c:	a2 d0       	rcall	.+324    	; 0x2052 <__ultoa_invert>
    1f0e:	a8 2e       	mov	r10, r24
    1f10:	a8 18       	sub	r10, r8
    1f12:	ff e7       	ldi	r31, 0x7F	; 127
    1f14:	bf 22       	and	r11, r31
    1f16:	b6 fe       	sbrs	r11, 6
    1f18:	0b c0       	rjmp	.+22     	; 0x1f30 <vfprintf+0x2aa>
    1f1a:	2b 2d       	mov	r18, r11
    1f1c:	2e 7f       	andi	r18, 0xFE	; 254
    1f1e:	a5 14       	cp	r10, r5
    1f20:	50 f4       	brcc	.+20     	; 0x1f36 <vfprintf+0x2b0>
    1f22:	b4 fe       	sbrs	r11, 4
    1f24:	0a c0       	rjmp	.+20     	; 0x1f3a <vfprintf+0x2b4>
    1f26:	b2 fc       	sbrc	r11, 2
    1f28:	08 c0       	rjmp	.+16     	; 0x1f3a <vfprintf+0x2b4>
    1f2a:	2b 2d       	mov	r18, r11
    1f2c:	2e 7e       	andi	r18, 0xEE	; 238
    1f2e:	05 c0       	rjmp	.+10     	; 0x1f3a <vfprintf+0x2b4>
    1f30:	7a 2c       	mov	r7, r10
    1f32:	2b 2d       	mov	r18, r11
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <vfprintf+0x2b6>
    1f36:	7a 2c       	mov	r7, r10
    1f38:	01 c0       	rjmp	.+2      	; 0x1f3c <vfprintf+0x2b6>
    1f3a:	75 2c       	mov	r7, r5
    1f3c:	24 ff       	sbrs	r18, 4
    1f3e:	0d c0       	rjmp	.+26     	; 0x1f5a <vfprintf+0x2d4>
    1f40:	fe 01       	movw	r30, r28
    1f42:	ea 0d       	add	r30, r10
    1f44:	f1 1d       	adc	r31, r1
    1f46:	80 81       	ld	r24, Z
    1f48:	80 33       	cpi	r24, 0x30	; 48
    1f4a:	11 f4       	brne	.+4      	; 0x1f50 <vfprintf+0x2ca>
    1f4c:	29 7e       	andi	r18, 0xE9	; 233
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <vfprintf+0x2dc>
    1f50:	22 ff       	sbrs	r18, 2
    1f52:	06 c0       	rjmp	.+12     	; 0x1f60 <vfprintf+0x2da>
    1f54:	73 94       	inc	r7
    1f56:	73 94       	inc	r7
    1f58:	04 c0       	rjmp	.+8      	; 0x1f62 <vfprintf+0x2dc>
    1f5a:	82 2f       	mov	r24, r18
    1f5c:	86 78       	andi	r24, 0x86	; 134
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <vfprintf+0x2dc>
    1f60:	73 94       	inc	r7
    1f62:	23 fd       	sbrc	r18, 3
    1f64:	13 c0       	rjmp	.+38     	; 0x1f8c <vfprintf+0x306>
    1f66:	20 ff       	sbrs	r18, 0
    1f68:	0e c0       	rjmp	.+28     	; 0x1f86 <vfprintf+0x300>
    1f6a:	5a 2c       	mov	r5, r10
    1f6c:	73 14       	cp	r7, r3
    1f6e:	58 f4       	brcc	.+22     	; 0x1f86 <vfprintf+0x300>
    1f70:	53 0c       	add	r5, r3
    1f72:	57 18       	sub	r5, r7
    1f74:	73 2c       	mov	r7, r3
    1f76:	07 c0       	rjmp	.+14     	; 0x1f86 <vfprintf+0x300>
    1f78:	b7 01       	movw	r22, r14
    1f7a:	80 e2       	ldi	r24, 0x20	; 32
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	2c 87       	std	Y+12, r18	; 0x0c
    1f80:	37 de       	rcall	.-914    	; 0x1bf0 <fputc>
    1f82:	73 94       	inc	r7
    1f84:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f86:	73 14       	cp	r7, r3
    1f88:	b8 f3       	brcs	.-18     	; 0x1f78 <vfprintf+0x2f2>
    1f8a:	04 c0       	rjmp	.+8      	; 0x1f94 <vfprintf+0x30e>
    1f8c:	73 14       	cp	r7, r3
    1f8e:	10 f4       	brcc	.+4      	; 0x1f94 <vfprintf+0x30e>
    1f90:	37 18       	sub	r3, r7
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <vfprintf+0x310>
    1f94:	31 2c       	mov	r3, r1
    1f96:	24 ff       	sbrs	r18, 4
    1f98:	11 c0       	rjmp	.+34     	; 0x1fbc <vfprintf+0x336>
    1f9a:	b7 01       	movw	r22, r14
    1f9c:	80 e3       	ldi	r24, 0x30	; 48
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	2c 87       	std	Y+12, r18	; 0x0c
    1fa2:	26 de       	rcall	.-948    	; 0x1bf0 <fputc>
    1fa4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fa6:	22 ff       	sbrs	r18, 2
    1fa8:	1c c0       	rjmp	.+56     	; 0x1fe2 <vfprintf+0x35c>
    1faa:	21 ff       	sbrs	r18, 1
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <vfprintf+0x32e>
    1fae:	88 e5       	ldi	r24, 0x58	; 88
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <vfprintf+0x332>
    1fb4:	88 e7       	ldi	r24, 0x78	; 120
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	b7 01       	movw	r22, r14
    1fba:	0c c0       	rjmp	.+24     	; 0x1fd4 <vfprintf+0x34e>
    1fbc:	82 2f       	mov	r24, r18
    1fbe:	86 78       	andi	r24, 0x86	; 134
    1fc0:	81 f0       	breq	.+32     	; 0x1fe2 <vfprintf+0x35c>
    1fc2:	21 fd       	sbrc	r18, 1
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <vfprintf+0x344>
    1fc6:	80 e2       	ldi	r24, 0x20	; 32
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <vfprintf+0x346>
    1fca:	8b e2       	ldi	r24, 0x2B	; 43
    1fcc:	27 fd       	sbrc	r18, 7
    1fce:	8d e2       	ldi	r24, 0x2D	; 45
    1fd0:	b7 01       	movw	r22, r14
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0d de       	rcall	.-998    	; 0x1bf0 <fputc>
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <vfprintf+0x35c>
    1fd8:	b7 01       	movw	r22, r14
    1fda:	80 e3       	ldi	r24, 0x30	; 48
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	08 de       	rcall	.-1008   	; 0x1bf0 <fputc>
    1fe0:	5a 94       	dec	r5
    1fe2:	a5 14       	cp	r10, r5
    1fe4:	c8 f3       	brcs	.-14     	; 0x1fd8 <vfprintf+0x352>
    1fe6:	aa 94       	dec	r10
    1fe8:	f4 01       	movw	r30, r8
    1fea:	ea 0d       	add	r30, r10
    1fec:	f1 1d       	adc	r31, r1
    1fee:	b7 01       	movw	r22, r14
    1ff0:	80 81       	ld	r24, Z
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	fd dd       	rcall	.-1030   	; 0x1bf0 <fputc>
    1ff6:	a1 10       	cpse	r10, r1
    1ff8:	f6 cf       	rjmp	.-20     	; 0x1fe6 <vfprintf+0x360>
    1ffa:	05 c0       	rjmp	.+10     	; 0x2006 <vfprintf+0x380>
    1ffc:	b7 01       	movw	r22, r14
    1ffe:	80 e2       	ldi	r24, 0x20	; 32
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	f6 dd       	rcall	.-1044   	; 0x1bf0 <fputc>
    2004:	3a 94       	dec	r3
    2006:	31 10       	cpse	r3, r1
    2008:	f9 cf       	rjmp	.-14     	; 0x1ffc <vfprintf+0x376>
    200a:	50 ce       	rjmp	.-864    	; 0x1cac <vfprintf+0x26>
    200c:	f7 01       	movw	r30, r14
    200e:	26 81       	ldd	r18, Z+6	; 0x06
    2010:	37 81       	ldd	r19, Z+7	; 0x07
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <vfprintf+0x392>
    2014:	2f ef       	ldi	r18, 0xFF	; 255
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	c9 01       	movw	r24, r18
    201a:	2c 96       	adiw	r28, 0x0c	; 12
    201c:	e2 e1       	ldi	r30, 0x12	; 18
    201e:	93 c0       	rjmp	.+294    	; 0x2146 <__epilogue_restores__>

00002020 <__ctype_isfalse>:
    2020:	99 27       	eor	r25, r25
    2022:	88 27       	eor	r24, r24

00002024 <__ctype_istrue>:
    2024:	08 95       	ret

00002026 <strnlen_P>:
    2026:	fc 01       	movw	r30, r24
    2028:	05 90       	lpm	r0, Z+
    202a:	61 50       	subi	r22, 0x01	; 1
    202c:	70 40       	sbci	r23, 0x00	; 0
    202e:	01 10       	cpse	r0, r1
    2030:	d8 f7       	brcc	.-10     	; 0x2028 <strnlen_P+0x2>
    2032:	80 95       	com	r24
    2034:	90 95       	com	r25
    2036:	8e 0f       	add	r24, r30
    2038:	9f 1f       	adc	r25, r31
    203a:	08 95       	ret

0000203c <strnlen>:
    203c:	fc 01       	movw	r30, r24
    203e:	61 50       	subi	r22, 0x01	; 1
    2040:	70 40       	sbci	r23, 0x00	; 0
    2042:	01 90       	ld	r0, Z+
    2044:	01 10       	cpse	r0, r1
    2046:	d8 f7       	brcc	.-10     	; 0x203e <strnlen+0x2>
    2048:	80 95       	com	r24
    204a:	90 95       	com	r25
    204c:	8e 0f       	add	r24, r30
    204e:	9f 1f       	adc	r25, r31
    2050:	08 95       	ret

00002052 <__ultoa_invert>:
    2052:	fa 01       	movw	r30, r20
    2054:	aa 27       	eor	r26, r26
    2056:	28 30       	cpi	r18, 0x08	; 8
    2058:	51 f1       	breq	.+84     	; 0x20ae <__ultoa_invert+0x5c>
    205a:	20 31       	cpi	r18, 0x10	; 16
    205c:	81 f1       	breq	.+96     	; 0x20be <__ultoa_invert+0x6c>
    205e:	e8 94       	clt
    2060:	6f 93       	push	r22
    2062:	6e 7f       	andi	r22, 0xFE	; 254
    2064:	6e 5f       	subi	r22, 0xFE	; 254
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	8f 4f       	sbci	r24, 0xFF	; 255
    206a:	9f 4f       	sbci	r25, 0xFF	; 255
    206c:	af 4f       	sbci	r26, 0xFF	; 255
    206e:	b1 e0       	ldi	r27, 0x01	; 1
    2070:	3e d0       	rcall	.+124    	; 0x20ee <__ultoa_invert+0x9c>
    2072:	b4 e0       	ldi	r27, 0x04	; 4
    2074:	3c d0       	rcall	.+120    	; 0x20ee <__ultoa_invert+0x9c>
    2076:	67 0f       	add	r22, r23
    2078:	78 1f       	adc	r23, r24
    207a:	89 1f       	adc	r24, r25
    207c:	9a 1f       	adc	r25, r26
    207e:	a1 1d       	adc	r26, r1
    2080:	68 0f       	add	r22, r24
    2082:	79 1f       	adc	r23, r25
    2084:	8a 1f       	adc	r24, r26
    2086:	91 1d       	adc	r25, r1
    2088:	a1 1d       	adc	r26, r1
    208a:	6a 0f       	add	r22, r26
    208c:	71 1d       	adc	r23, r1
    208e:	81 1d       	adc	r24, r1
    2090:	91 1d       	adc	r25, r1
    2092:	a1 1d       	adc	r26, r1
    2094:	20 d0       	rcall	.+64     	; 0x20d6 <__ultoa_invert+0x84>
    2096:	09 f4       	brne	.+2      	; 0x209a <__ultoa_invert+0x48>
    2098:	68 94       	set
    209a:	3f 91       	pop	r19
    209c:	2a e0       	ldi	r18, 0x0A	; 10
    209e:	26 9f       	mul	r18, r22
    20a0:	11 24       	eor	r1, r1
    20a2:	30 19       	sub	r19, r0
    20a4:	30 5d       	subi	r19, 0xD0	; 208
    20a6:	31 93       	st	Z+, r19
    20a8:	de f6       	brtc	.-74     	; 0x2060 <__ultoa_invert+0xe>
    20aa:	cf 01       	movw	r24, r30
    20ac:	08 95       	ret
    20ae:	46 2f       	mov	r20, r22
    20b0:	47 70       	andi	r20, 0x07	; 7
    20b2:	40 5d       	subi	r20, 0xD0	; 208
    20b4:	41 93       	st	Z+, r20
    20b6:	b3 e0       	ldi	r27, 0x03	; 3
    20b8:	0f d0       	rcall	.+30     	; 0x20d8 <__ultoa_invert+0x86>
    20ba:	c9 f7       	brne	.-14     	; 0x20ae <__ultoa_invert+0x5c>
    20bc:	f6 cf       	rjmp	.-20     	; 0x20aa <__ultoa_invert+0x58>
    20be:	46 2f       	mov	r20, r22
    20c0:	4f 70       	andi	r20, 0x0F	; 15
    20c2:	40 5d       	subi	r20, 0xD0	; 208
    20c4:	4a 33       	cpi	r20, 0x3A	; 58
    20c6:	18 f0       	brcs	.+6      	; 0x20ce <__ultoa_invert+0x7c>
    20c8:	49 5d       	subi	r20, 0xD9	; 217
    20ca:	31 fd       	sbrc	r19, 1
    20cc:	40 52       	subi	r20, 0x20	; 32
    20ce:	41 93       	st	Z+, r20
    20d0:	02 d0       	rcall	.+4      	; 0x20d6 <__ultoa_invert+0x84>
    20d2:	a9 f7       	brne	.-22     	; 0x20be <__ultoa_invert+0x6c>
    20d4:	ea cf       	rjmp	.-44     	; 0x20aa <__ultoa_invert+0x58>
    20d6:	b4 e0       	ldi	r27, 0x04	; 4
    20d8:	a6 95       	lsr	r26
    20da:	97 95       	ror	r25
    20dc:	87 95       	ror	r24
    20de:	77 95       	ror	r23
    20e0:	67 95       	ror	r22
    20e2:	ba 95       	dec	r27
    20e4:	c9 f7       	brne	.-14     	; 0x20d8 <__ultoa_invert+0x86>
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	61 05       	cpc	r22, r1
    20ea:	71 05       	cpc	r23, r1
    20ec:	08 95       	ret
    20ee:	9b 01       	movw	r18, r22
    20f0:	ac 01       	movw	r20, r24
    20f2:	0a 2e       	mov	r0, r26
    20f4:	06 94       	lsr	r0
    20f6:	57 95       	ror	r21
    20f8:	47 95       	ror	r20
    20fa:	37 95       	ror	r19
    20fc:	27 95       	ror	r18
    20fe:	ba 95       	dec	r27
    2100:	c9 f7       	brne	.-14     	; 0x20f4 <__ultoa_invert+0xa2>
    2102:	62 0f       	add	r22, r18
    2104:	73 1f       	adc	r23, r19
    2106:	84 1f       	adc	r24, r20
    2108:	95 1f       	adc	r25, r21
    210a:	a0 1d       	adc	r26, r0
    210c:	08 95       	ret

0000210e <__prologue_saves__>:
    210e:	2f 92       	push	r2
    2110:	3f 92       	push	r3
    2112:	4f 92       	push	r4
    2114:	5f 92       	push	r5
    2116:	6f 92       	push	r6
    2118:	7f 92       	push	r7
    211a:	8f 92       	push	r8
    211c:	9f 92       	push	r9
    211e:	af 92       	push	r10
    2120:	bf 92       	push	r11
    2122:	cf 92       	push	r12
    2124:	df 92       	push	r13
    2126:	ef 92       	push	r14
    2128:	ff 92       	push	r15
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	ca 1b       	sub	r28, r26
    2138:	db 0b       	sbc	r29, r27
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	09 94       	ijmp

00002146 <__epilogue_restores__>:
    2146:	2a 88       	ldd	r2, Y+18	; 0x12
    2148:	39 88       	ldd	r3, Y+17	; 0x11
    214a:	48 88       	ldd	r4, Y+16	; 0x10
    214c:	5f 84       	ldd	r5, Y+15	; 0x0f
    214e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2150:	7d 84       	ldd	r7, Y+13	; 0x0d
    2152:	8c 84       	ldd	r8, Y+12	; 0x0c
    2154:	9b 84       	ldd	r9, Y+11	; 0x0b
    2156:	aa 84       	ldd	r10, Y+10	; 0x0a
    2158:	b9 84       	ldd	r11, Y+9	; 0x09
    215a:	c8 84       	ldd	r12, Y+8	; 0x08
    215c:	df 80       	ldd	r13, Y+7	; 0x07
    215e:	ee 80       	ldd	r14, Y+6	; 0x06
    2160:	fd 80       	ldd	r15, Y+5	; 0x05
    2162:	0c 81       	ldd	r16, Y+4	; 0x04
    2164:	1b 81       	ldd	r17, Y+3	; 0x03
    2166:	aa 81       	ldd	r26, Y+2	; 0x02
    2168:	b9 81       	ldd	r27, Y+1	; 0x01
    216a:	ce 0f       	add	r28, r30
    216c:	d1 1d       	adc	r29, r1
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	ed 01       	movw	r28, r26
    217a:	08 95       	ret

0000217c <_exit>:
    217c:	f8 94       	cli

0000217e <__stop_program>:
    217e:	ff cf       	rjmp	.-2      	; 0x217e <__stop_program>
