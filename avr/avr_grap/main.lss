
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001a7a  00001b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f4  00800126  00800126  00001b34  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  00001b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c98  00000000  00000000  00004468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000838  00000000  00000000  0000512f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000beec  00000000  00000000  00005967  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036d4  00000000  00000000  00011853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000079c9  00000000  00000000  00014f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000148c  00000000  00000000  0001c8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000044b5  00000000  00000000  0001dd7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000078f4  00000000  00000000  00022231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000868  00000000  00000000  00029b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9c c0       	rjmp	.+312    	; 0x13a <__ctors_end>
       2:	00 00       	nop
       4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
       6:	00 00       	nop
       8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_3>
      10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
      12:	00 00       	nop
      14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
      16:	00 00       	nop
      18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
      22:	00 00       	nop
      24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c3       	rjmp	.+1720   	; 0x6e2 <__vector_10>
      2a:	00 00       	nop
      2c:	25 c4       	rjmp	.+2122   	; 0x878 <__vector_11>
      2e:	00 00       	nop
      30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
      32:	00 00       	nop
      34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
      36:	00 00       	nop
      38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
      42:	00 00       	nop
      44:	a1 c0       	rjmp	.+322    	; 0x188 <__bad_interrupt>
      46:	00 00       	nop
      48:	9f c0       	rjmp	.+318    	; 0x188 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
      52:	00 00       	nop
      54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
      56:	00 00       	nop
      58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_23>
      60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
      66:	00 00       	nop
      68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
      72:	00 00       	nop
      74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
      76:	00 00       	nop
      78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
      7e:	00 00       	nop
      80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
      82:	00 00       	nop
      84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
      86:	00 00       	nop
      88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
      92:	00 00       	nop
      94:	79 c0       	rjmp	.+242    	; 0x188 <__bad_interrupt>
      96:	00 00       	nop
      98:	77 c0       	rjmp	.+238    	; 0x188 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	75 c0       	rjmp	.+234    	; 0x188 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	73 c0       	rjmp	.+230    	; 0x188 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d5 c7       	rjmp	.+4010   	; 0x1050 <__vector_41>
      a6:	00 00       	nop
      a8:	6f c0       	rjmp	.+222    	; 0x188 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <__ctors_start>:
     138:	f4 09       	sbc	r31, r4

0000013a <__ctors_end>:
     13a:	11 24       	eor	r1, r1
     13c:	1f be       	out	0x3f, r1	; 63
     13e:	cf ef       	ldi	r28, 0xFF	; 255
     140:	da e0       	ldi	r29, 0x0A	; 10
     142:	de bf       	out	0x3e, r29	; 62
     144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
     146:	11 e0       	ldi	r17, 0x01	; 1
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	ea e7       	ldi	r30, 0x7A	; 122
     14e:	fa e1       	ldi	r31, 0x1A	; 26
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x10>
     152:	05 90       	lpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a6 32       	cpi	r26, 0x26	; 38
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0xc>

0000015c <__do_clear_bss>:
     15c:	22 e0       	ldi	r18, 0x02	; 2
     15e:	a6 e2       	ldi	r26, 0x26	; 38
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	aa 31       	cpi	r26, 0x1A	; 26
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	ca e3       	ldi	r28, 0x3A	; 58
     170:	d1 e0       	ldi	r29, 0x01	; 1
     172:	04 c0       	rjmp	.+8      	; 0x17c <__do_global_ctors+0x10>
     174:	22 97       	sbiw	r28, 0x02	; 2
     176:	fe 01       	movw	r30, r28
     178:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__tablejump__>
     17c:	c8 33       	cpi	r28, 0x38	; 56
     17e:	d1 07       	cpc	r29, r17
     180:	c9 f7       	brne	.-14     	; 0x174 <__do_global_ctors+0x8>
     182:	54 d0       	rcall	.+168    	; 0x22c <main>
     184:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <_exit>

00000188 <__bad_interrupt>:
     188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <EVENT_USB_Device_Connect>:
	uint8_t hi = ADCH;
	
	uint16_t val = (hi << 8) + lo;
	
	return val;
}
     18a:	08 95       	ret

0000018c <EVENT_USB_Device_Disconnect>:
     18c:	08 95       	ret

0000018e <EVENT_USB_Device_ConfigurationChanged>:
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	3b c5       	rjmp	.+2678   	; 0xc0a <CDC_Device_ConfigureEndpoints>

00000194 <EVENT_USB_Device_ControlRequest>:
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	2e c6       	rjmp	.+3164   	; 0xdf6 <CDC_Device_ProcessControlRequest>

0000019a <EVENT_CDC_Device_ControLineStateChanged>:
     19a:	08 95       	ret

0000019c <IrReceived>:
			PORTC &= ~_BV(7);
#endif

void IrReceived(int data)
{
	switch(data){
     19c:	8a 36       	cpi	r24, 0x6A	; 106
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	92 07       	cpc	r25, r18
     1a2:	91 f0       	breq	.+36     	; 0x1c8 <IrReceived+0x2c>
     1a4:	2c f4       	brge	.+10     	; 0x1b0 <IrReceived+0x14>
     1a6:	89 36       	cpi	r24, 0x69	; 105
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	92 07       	cpc	r25, r18
     1ac:	99 f4       	brne	.+38     	; 0x1d4 <IrReceived+0x38>
     1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <IrReceived+0x26>
     1b0:	8b 36       	cpi	r24, 0x6B	; 107
     1b2:	41 e0       	ldi	r20, 0x01	; 1
     1b4:	94 07       	cpc	r25, r20
     1b6:	59 f0       	breq	.+22     	; 0x1ce <IrReceived+0x32>
     1b8:	81 15       	cp	r24, r1
     1ba:	24 e0       	ldi	r18, 0x04	; 4
     1bc:	92 07       	cpc	r25, r18
     1be:	51 f4       	brne	.+20     	; 0x1d4 <IrReceived+0x38>
     1c0:	08 95       	ret
	case IR_CODE_RELAY_ON:
		RELAY_ON;
     1c2:	29 9a       	sbi	0x05, 1	; 5
		LEDG_ON;
     1c4:	8d 9a       	sbi	0x11, 5	; 17
		break;
     1c6:	08 95       	ret
	case IR_CODE_RELAY_OFF:
		RELAY_OFF;
     1c8:	29 98       	cbi	0x05, 1	; 5
		LEDG_OFF;
     1ca:	8d 98       	cbi	0x11, 5	; 17
		break;
     1cc:	08 95       	ret
	case IR_CODE_MOTOR_OFF:
		MotorPwm(0);
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <IrReceived+0x44>
		break;
	case IR_CODE_INVALID:
		break;
	default:
		if(-256 < data && data < 256) MotorPwm(data);
     1d4:	9c 01       	movw	r18, r24
     1d6:	21 50       	subi	r18, 0x01	; 1
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	2f 3f       	cpi	r18, 0xFF	; 255
     1dc:	31 40       	sbci	r19, 0x01	; 1
     1de:	10 f4       	brcc	.+4      	; 0x1e4 <IrReceived+0x48>
     1e0:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <MotorPwm>
     1e4:	08 95       	ret

000001e6 <SetupHardware>:
		_delay_ms(100);
	}
}

void SetupHardware(void)
{
     1e6:	cf 93       	push	r28
	MCUSR &= ~(1 << WDRF);
     1e8:	84 b7       	in	r24, 0x34	; 52
     1ea:	87 7f       	andi	r24, 0xF7	; 247
     1ec:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1ee:	88 e1       	ldi	r24, 0x18	; 24
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	80 93 60 00 	sts	0x0060, r24
     1f8:	10 92 60 00 	sts	0x0060, r1
     1fc:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1fe:	c0 e8       	ldi	r28, 0x80	; 128
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	c0 93 61 00 	sts	0x0061, r28
     20a:	80 93 61 00 	sts	0x0061, r24
     20e:	0f be       	out	0x3f, r0	; 63

	clock_prescale_set(clock_div_1);

	USB_Init();
     210:	4b d2       	rcall	.+1174   	; 0x6a8 <USB_Init>

	// disable JTAG on borad
	MCUCR = 0x80; MCUCR = 0x80;
     212:	c5 bf       	out	0x35, r28	; 53
     214:	c5 bf       	out	0x35, r28	; 53

#if IR_RECEIVER
	IrReceiveSetup();
     216:	0e 94 8e 09 	call	0x131c	; 0x131c <IrReceiveSetup>
	InitMotor();
     21a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <InitMotor>
	InitRotEncoder();
#endif

	// ------------------------------------------------------------

	sbi(DDRC, 7);	// BOARD LED
     21e:	3f 9a       	sbi	0x07, 7	; 7

#if IR_RECEIVER
	sbi(DDRB, 1);	// RELAY
     220:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRF, 4);	// LED0
     222:	84 9a       	sbi	0x10, 4	; 16
	sbi(DDRF, 5);	// LED1
     224:	85 9a       	sbi	0x10, 5	; 16
	sbi(DDRF, 6);	// LED2
     226:	86 9a       	sbi	0x10, 6	; 16
	ADCSRA |= _BV(ADPS0);  // prescaler 128 -> ADC clock 125kHz
	ADCSRA |= _BV(ADPS1);
	ADCSRA |= _BV(ADPS2);
	ADCSRA |= _BV(ADEN); // A/D enable
#endif
}
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <main>:
	//fprintf(&USBSerialStream, "received : %d\r\n", sdata);
}

int main(void)
{
	SetupHardware();
     22c:	dc df       	rcall	.-72     	; 0x1e6 <SetupHardware>
	
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     22e:	6b ef       	ldi	r22, 0xFB	; 251
     230:	71 e0       	ldi	r23, 0x01	; 1
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	cb d5       	rcall	.+2966   	; 0xdce <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     238:	78 94       	sei
	GlobalInterruptEnable();

	int  cnt;
	char str[256];
	for(cnt = 0; ; cnt++){
		char c = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	85 d5       	rcall	.+2826   	; 0xd4a <CDC_Device_ReceiveByte>
     240:	ec 01       	movw	r28, r24
		if(isalpha(c)){
     242:	dd 27       	eor	r29, r29
     244:	ce 01       	movw	r24, r28
     246:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <isalpha>
     24a:	89 2b       	or	r24, r25
     24c:	59 f0       	breq	.+22     	; 0x264 <main+0x38>
			fputc(c   , &USBSerialStream);
     24e:	6b ef       	ldi	r22, 0xFB	; 251
     250:	71 e0       	ldi	r23, 0x01	; 1
     252:	ce 01       	movw	r24, r28
     254:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <fputc>
			fputc('\n', &USBSerialStream);
     258:	6b ef       	ldi	r22, 0xFB	; 251
     25a:	71 e0       	ldi	r23, 0x01	; 1
     25c:	8a e0       	ldi	r24, 0x0A	; 10
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <fputc>
		//sprintf(str, "%d \r\n", cnt);
		//fputs(str, &USBSerialStream);
			
#if IR_RECEIVER
		{
			int data = IrReceive();
     264:	0e 94 c8 09 	call	0x1390	; 0x1390 <IrReceive>
			if(data != IR_CODE_INVALID) IrReceived(data);
     268:	81 15       	cp	r24, r1
     26a:	24 e0       	ldi	r18, 0x04	; 4
     26c:	92 07       	cpc	r25, r18
     26e:	09 f0       	breq	.+2      	; 0x272 <main+0x46>
     270:	95 df       	rcall	.-214    	; 0x19c <IrReceived>
		if(cnt % 4 == 3) LEDW_ON;
#endif
#endif
#endif

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	53 d5       	rcall	.+2726   	; 0xd1e <CDC_Device_USBTask>
		USB_USBTask();
     278:	ac d4       	rcall	.+2392   	; 0xbd2 <USB_USBTask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	91 ee       	ldi	r25, 0xE1	; 225
     27e:	24 e0       	ldi	r18, 0x04	; 4
     280:	81 50       	subi	r24, 0x01	; 1
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	20 40       	sbci	r18, 0x00	; 0
     286:	e1 f7       	brne	.-8      	; 0x280 <main+0x54>
     288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x5e>
     28a:	00 00       	nop
		
		_delay_ms(100);
	}
     28c:	d6 cf       	rjmp	.-84     	; 0x23a <main+0xe>

0000028e <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     28e:	29 2f       	mov	r18, r25
     290:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     292:	22 30       	cpi	r18, 0x02	; 2
     294:	31 05       	cpc	r19, r1
     296:	39 f0       	breq	.+14     	; 0x2a6 <CALLBACK_USB_GetDescriptor+0x18>
     298:	23 30       	cpi	r18, 0x03	; 3
     29a:	31 05       	cpc	r19, r1
     29c:	49 f0       	breq	.+18     	; 0x2b0 <CALLBACK_USB_GetDescriptor+0x22>
     29e:	21 30       	cpi	r18, 0x01	; 1
     2a0:	31 05       	cpc	r19, r1
     2a2:	21 f1       	breq	.+72     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x5e>
     2a4:	28 c0       	rjmp	.+80     	; 0x2f6 <CALLBACK_USB_GetDescriptor+0x68>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2a6:	ee e3       	ldi	r30, 0x3E	; 62
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     2aa:	88 ee       	ldi	r24, 0xE8	; 232
     2ac:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     2ae:	27 c0       	rjmp	.+78     	; 0x2fe <CALLBACK_USB_GetDescriptor+0x70>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     2b0:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	91 05       	cpc	r25, r1
     2b6:	61 f0       	breq	.+24     	; 0x2d0 <CALLBACK_USB_GetDescriptor+0x42>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	91 05       	cpc	r25, r1
     2bc:	81 f0       	breq	.+32     	; 0x2de <CALLBACK_USB_GetDescriptor+0x50>
     2be:	89 2b       	or	r24, r25
     2c0:	d1 f4       	brne	.+52     	; 0x2f6 <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     2c2:	e4 ee       	ldi	r30, 0xE4	; 228
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	e4 91       	lpm	r30, Z
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     2ca:	84 ee       	ldi	r24, 0xE4	; 228
     2cc:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     2ce:	17 c0       	rjmp	.+46     	; 0x2fe <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     2d0:	ea ec       	ldi	r30, 0xCA	; 202
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	e4 91       	lpm	r30, Z
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     2d8:	8a ec       	ldi	r24, 0xCA	; 202
     2da:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     2dc:	10 c0       	rjmp	.+32     	; 0x2fe <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     2de:	ec ea       	ldi	r30, 0xAC	; 172
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	e4 91       	lpm	r30, Z
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     2e6:	8c ea       	ldi	r24, 0xAC	; 172
     2e8:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     2ea:	09 c0       	rjmp	.+18     	; 0x2fe <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     2ec:	e2 e1       	ldi	r30, 0x12	; 18
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     2f0:	86 e2       	ldi	r24, 0x26	; 38
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     2f6:	e0 e0       	ldi	r30, 0x00	; 0
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     2fe:	da 01       	movw	r26, r20
     300:	8d 93       	st	X+, r24
     302:	9c 93       	st	X, r25
	return Size;
}
     304:	cf 01       	movw	r24, r30
     306:	08 95       	ret

00000308 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     308:	40 91 14 02 	lds	r20, 0x0214
     30c:	50 91 15 02 	lds	r21, 0x0215
     310:	46 17       	cp	r20, r22
     312:	57 07       	cpc	r21, r23
     314:	48 f0       	brcs	.+18     	; 0x328 <Endpoint_Write_Control_Stream_LE+0x20>
     316:	61 15       	cp	r22, r1
     318:	71 05       	cpc	r23, r1
     31a:	39 f4       	brne	.+14     	; 0x32a <Endpoint_Write_Control_Stream_LE+0x22>
     31c:	40 91 e8 00 	lds	r20, 0x00E8
     320:	4e 77       	andi	r20, 0x7E	; 126
     322:	40 93 e8 00 	sts	0x00E8, r20
     326:	01 c0       	rjmp	.+2      	; 0x32a <Endpoint_Write_Control_Stream_LE+0x22>
     328:	ba 01       	movw	r22, r20
     32a:	fc 01       	movw	r30, r24
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	33 c0       	rjmp	.+102    	; 0x396 <Endpoint_Write_Control_Stream_LE+0x8e>
     330:	80 91 0d 02 	lds	r24, 0x020D
     334:	88 23       	and	r24, r24
     336:	09 f4       	brne	.+2      	; 0x33a <Endpoint_Write_Control_Stream_LE+0x32>
     338:	44 c0       	rjmp	.+136    	; 0x3c2 <Endpoint_Write_Control_Stream_LE+0xba>
     33a:	85 30       	cpi	r24, 0x05	; 5
     33c:	09 f4       	brne	.+2      	; 0x340 <Endpoint_Write_Control_Stream_LE+0x38>
     33e:	43 c0       	rjmp	.+134    	; 0x3c6 <Endpoint_Write_Control_Stream_LE+0xbe>
     340:	80 91 e8 00 	lds	r24, 0x00E8
     344:	83 fd       	sbrc	r24, 3
     346:	41 c0       	rjmp	.+130    	; 0x3ca <Endpoint_Write_Control_Stream_LE+0xc2>
     348:	80 91 e8 00 	lds	r24, 0x00E8
     34c:	82 fd       	sbrc	r24, 2
     34e:	33 c0       	rjmp	.+102    	; 0x3b6 <Endpoint_Write_Control_Stream_LE+0xae>
     350:	80 91 e8 00 	lds	r24, 0x00E8
     354:	80 ff       	sbrs	r24, 0
     356:	1f c0       	rjmp	.+62     	; 0x396 <Endpoint_Write_Control_Stream_LE+0x8e>
     358:	90 91 f3 00 	lds	r25, 0x00F3
     35c:	80 91 f2 00 	lds	r24, 0x00F2
     360:	39 2f       	mov	r19, r25
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	a9 01       	movw	r20, r18
     366:	48 2b       	or	r20, r24
     368:	ca 01       	movw	r24, r20
     36a:	06 c0       	rjmp	.+12     	; 0x378 <Endpoint_Write_Control_Stream_LE+0x70>
     36c:	41 91       	ld	r20, Z+
     36e:	40 93 f1 00 	sts	0x00F1, r20
     372:	61 50       	subi	r22, 0x01	; 1
     374:	71 09       	sbc	r23, r1
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	61 15       	cp	r22, r1
     37a:	71 05       	cpc	r23, r1
     37c:	19 f0       	breq	.+6      	; 0x384 <Endpoint_Write_Control_Stream_LE+0x7c>
     37e:	88 30       	cpi	r24, 0x08	; 8
     380:	91 05       	cpc	r25, r1
     382:	a0 f3       	brcs	.-24     	; 0x36c <Endpoint_Write_Control_Stream_LE+0x64>
     384:	41 e0       	ldi	r20, 0x01	; 1
     386:	08 97       	sbiw	r24, 0x08	; 8
     388:	09 f0       	breq	.+2      	; 0x38c <Endpoint_Write_Control_Stream_LE+0x84>
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	80 91 e8 00 	lds	r24, 0x00E8
     390:	8e 77       	andi	r24, 0x7E	; 126
     392:	80 93 e8 00 	sts	0x00E8, r24
     396:	61 15       	cp	r22, r1
     398:	71 05       	cpc	r23, r1
     39a:	51 f6       	brne	.-108    	; 0x330 <Endpoint_Write_Control_Stream_LE+0x28>
     39c:	41 11       	cpse	r20, r1
     39e:	c8 cf       	rjmp	.-112    	; 0x330 <Endpoint_Write_Control_Stream_LE+0x28>
     3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <Endpoint_Write_Control_Stream_LE+0xae>
     3a2:	80 91 0d 02 	lds	r24, 0x020D
     3a6:	88 23       	and	r24, r24
     3a8:	61 f0       	breq	.+24     	; 0x3c2 <Endpoint_Write_Control_Stream_LE+0xba>
     3aa:	85 30       	cpi	r24, 0x05	; 5
     3ac:	61 f0       	breq	.+24     	; 0x3c6 <Endpoint_Write_Control_Stream_LE+0xbe>
     3ae:	80 91 e8 00 	lds	r24, 0x00E8
     3b2:	83 fd       	sbrc	r24, 3
     3b4:	0a c0       	rjmp	.+20     	; 0x3ca <Endpoint_Write_Control_Stream_LE+0xc2>
     3b6:	80 91 e8 00 	lds	r24, 0x00E8
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	f2 cf       	rjmp	.-28     	; 0x3a2 <Endpoint_Write_Control_Stream_LE+0x9a>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	08 95       	ret
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	08 95       	ret
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	08 95       	ret
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	08 95       	ret

000003ce <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3ce:	40 91 14 02 	lds	r20, 0x0214
     3d2:	50 91 15 02 	lds	r21, 0x0215
     3d6:	46 17       	cp	r20, r22
     3d8:	57 07       	cpc	r21, r23
     3da:	48 f0       	brcs	.+18     	; 0x3ee <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     3dc:	61 15       	cp	r22, r1
     3de:	71 05       	cpc	r23, r1
     3e0:	39 f4       	brne	.+14     	; 0x3f0 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3e2:	40 91 e8 00 	lds	r20, 0x00E8
     3e6:	4e 77       	andi	r20, 0x7E	; 126
     3e8:	40 93 e8 00 	sts	0x00E8, r20
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3ee:	ba 01       	movw	r22, r20
     3f0:	fc 01       	movw	r30, r24
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	34 c0       	rjmp	.+104    	; 0x45e <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     3f6:	80 91 0d 02 	lds	r24, 0x020D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     3fa:	88 23       	and	r24, r24
     3fc:	09 f4       	brne	.+2      	; 0x400 <Endpoint_Write_Control_PStream_LE+0x32>
     3fe:	45 c0       	rjmp	.+138    	; 0x48a <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     400:	85 30       	cpi	r24, 0x05	; 5
     402:	09 f4       	brne	.+2      	; 0x406 <Endpoint_Write_Control_PStream_LE+0x38>
     404:	44 c0       	rjmp	.+136    	; 0x48e <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     406:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     40a:	83 fd       	sbrc	r24, 3
     40c:	42 c0       	rjmp	.+132    	; 0x492 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     40e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     412:	82 fd       	sbrc	r24, 2
     414:	34 c0       	rjmp	.+104    	; 0x47e <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     416:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     41a:	80 ff       	sbrs	r24, 0
     41c:	20 c0       	rjmp	.+64     	; 0x45e <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     41e:	90 91 f3 00 	lds	r25, 0x00F3
     422:	80 91 f2 00 	lds	r24, 0x00F2
     426:	39 2f       	mov	r19, r25
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	a9 01       	movw	r20, r18
     42c:	48 2b       	or	r20, r24
     42e:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     430:	07 c0       	rjmp	.+14     	; 0x440 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     432:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     434:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     438:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     43a:	61 50       	subi	r22, 0x01	; 1
     43c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     43e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     440:	61 15       	cp	r22, r1
     442:	71 05       	cpc	r23, r1
     444:	19 f0       	breq	.+6      	; 0x44c <Endpoint_Write_Control_PStream_LE+0x7e>
     446:	88 30       	cpi	r24, 0x08	; 8
     448:	91 05       	cpc	r25, r1
     44a:	98 f3       	brcs	.-26     	; 0x432 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	08 97       	sbiw	r24, 0x08	; 8
     450:	09 f0       	breq	.+2      	; 0x454 <Endpoint_Write_Control_PStream_LE+0x86>
     452:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     454:	80 91 e8 00 	lds	r24, 0x00E8
     458:	8e 77       	andi	r24, 0x7E	; 126
     45a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     45e:	61 15       	cp	r22, r1
     460:	71 05       	cpc	r23, r1
     462:	49 f6       	brne	.-110    	; 0x3f6 <Endpoint_Write_Control_PStream_LE+0x28>
     464:	41 11       	cpse	r20, r1
     466:	c7 cf       	rjmp	.-114    	; 0x3f6 <Endpoint_Write_Control_PStream_LE+0x28>
     468:	0a c0       	rjmp	.+20     	; 0x47e <Endpoint_Write_Control_PStream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     46a:	80 91 0d 02 	lds	r24, 0x020D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     46e:	88 23       	and	r24, r24
     470:	61 f0       	breq	.+24     	; 0x48a <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     472:	85 30       	cpi	r24, 0x05	; 5
     474:	61 f0       	breq	.+24     	; 0x48e <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     476:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     47a:	83 fd       	sbrc	r24, 3
     47c:	0a c0       	rjmp	.+20     	; 0x492 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     47e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     482:	82 ff       	sbrs	r24, 2
     484:	f2 cf       	rjmp	.-28     	; 0x46a <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     492:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     494:	08 95       	ret

00000496 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     496:	98 2f       	mov	r25, r24
     498:	2c c0       	rjmp	.+88     	; 0x4f2 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     49a:	90 93 e9 00 	sts	0x00E9, r25
     49e:	98 17       	cp	r25, r24
     4a0:	39 f0       	breq	.+14     	; 0x4b0 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     4a2:	70 91 ec 00 	lds	r23, 0x00EC
     4a6:	20 91 ed 00 	lds	r18, 0x00ED
     4aa:	50 91 f0 00 	lds	r21, 0x00F0
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <Endpoint_ConfigureEndpoint_Prv+0x20>
     4b0:	24 2f       	mov	r18, r20
     4b2:	76 2f       	mov	r23, r22
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	21 fd       	sbrc	r18, 1
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <Endpoint_ConfigureEndpoint_Prv+0x28>
     4ba:	9f 5f       	subi	r25, 0xFF	; 255
     4bc:	1a c0       	rjmp	.+52     	; 0x4f2 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     4be:	30 91 eb 00 	lds	r19, 0x00EB
     4c2:	3e 7f       	andi	r19, 0xFE	; 254
     4c4:	30 93 eb 00 	sts	0x00EB, r19
     4c8:	30 91 ed 00 	lds	r19, 0x00ED
     4cc:	3d 7f       	andi	r19, 0xFD	; 253
     4ce:	30 93 ed 00 	sts	0x00ED, r19
     4d2:	30 91 eb 00 	lds	r19, 0x00EB
     4d6:	31 60       	ori	r19, 0x01	; 1
     4d8:	30 93 eb 00 	sts	0x00EB, r19
     4dc:	70 93 ec 00 	sts	0x00EC, r23
     4e0:	20 93 ed 00 	sts	0x00ED, r18
     4e4:	50 93 f0 00 	sts	0x00F0, r21
     4e8:	20 91 ee 00 	lds	r18, 0x00EE
     4ec:	27 fd       	sbrc	r18, 7
     4ee:	e5 cf       	rjmp	.-54     	; 0x4ba <Endpoint_ConfigureEndpoint_Prv+0x24>
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <Endpoint_ConfigureEndpoint_Prv+0x6a>
     4f2:	97 30       	cpi	r25, 0x07	; 7
     4f4:	90 f2       	brcs	.-92     	; 0x49a <Endpoint_ConfigureEndpoint_Prv+0x4>
     4f6:	8f 70       	andi	r24, 0x0F	; 15
     4f8:	80 93 e9 00 	sts	0x00E9, r24
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	08 95       	ret
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	08 95       	ret

00000504 <Endpoint_ConfigureEndpointTable>:
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	06 2f       	mov	r16, r22
     50e:	ec 01       	movw	r28, r24
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	2f c0       	rjmp	.+94     	; 0x572 <Endpoint_ConfigureEndpointTable+0x6e>
     514:	98 81       	ld	r25, Y
     516:	91 11       	cpse	r25, r1
     518:	03 c0       	rjmp	.+6      	; 0x520 <Endpoint_ConfigureEndpointTable+0x1c>
     51a:	1f 5f       	subi	r17, 0xFF	; 255
     51c:	25 96       	adiw	r28, 0x05	; 5
     51e:	29 c0       	rjmp	.+82     	; 0x572 <Endpoint_ConfigureEndpointTable+0x6e>
     520:	2c 81       	ldd	r18, Y+4	; 0x04
     522:	e9 81       	ldd	r30, Y+1	; 0x01
     524:	fa 81       	ldd	r31, Y+2	; 0x02
     526:	7b 81       	ldd	r23, Y+3	; 0x03
     528:	89 2f       	mov	r24, r25
     52a:	8f 70       	andi	r24, 0x0F	; 15
     52c:	87 30       	cpi	r24, 0x07	; 7
     52e:	10 f0       	brcs	.+4      	; 0x534 <Endpoint_ConfigureEndpointTable+0x30>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	22 c0       	rjmp	.+68     	; 0x578 <Endpoint_ConfigureEndpointTable+0x74>
     534:	22 30       	cpi	r18, 0x02	; 2
     536:	10 f0       	brcs	.+4      	; 0x53c <Endpoint_ConfigureEndpointTable+0x38>
     538:	56 e0       	ldi	r21, 0x06	; 6
     53a:	01 c0       	rjmp	.+2      	; 0x53e <Endpoint_ConfigureEndpointTable+0x3a>
     53c:	52 e0       	ldi	r21, 0x02	; 2
     53e:	28 e0       	ldi	r18, 0x08	; 8
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	03 c0       	rjmp	.+6      	; 0x54c <Endpoint_ConfigureEndpointTable+0x48>
     546:	4f 5f       	subi	r20, 0xFF	; 255
     548:	22 0f       	add	r18, r18
     54a:	33 1f       	adc	r19, r19
     54c:	2e 17       	cp	r18, r30
     54e:	3f 07       	cpc	r19, r31
     550:	d0 f3       	brcs	.-12     	; 0x546 <Endpoint_ConfigureEndpointTable+0x42>
     552:	42 95       	swap	r20
     554:	40 7f       	andi	r20, 0xF0	; 240
     556:	45 2b       	or	r20, r21
     558:	69 2f       	mov	r22, r25
     55a:	66 1f       	adc	r22, r22
     55c:	66 27       	eor	r22, r22
     55e:	66 1f       	adc	r22, r22
     560:	90 e4       	ldi	r25, 0x40	; 64
     562:	79 9f       	mul	r23, r25
     564:	90 01       	movw	r18, r0
     566:	11 24       	eor	r1, r1
     568:	62 2b       	or	r22, r18
     56a:	95 df       	rcall	.-214    	; 0x496 <Endpoint_ConfigureEndpoint_Prv>
     56c:	81 11       	cpse	r24, r1
     56e:	d5 cf       	rjmp	.-86     	; 0x51a <Endpoint_ConfigureEndpointTable+0x16>
     570:	df cf       	rjmp	.-66     	; 0x530 <Endpoint_ConfigureEndpointTable+0x2c>
     572:	10 13       	cpse	r17, r16
     574:	cf cf       	rjmp	.-98     	; 0x514 <Endpoint_ConfigureEndpointTable+0x10>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     582:	80 91 0e 02 	lds	r24, 0x020E
     586:	87 fd       	sbrc	r24, 7
     588:	05 c0       	rjmp	.+10     	; 0x594 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     58a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     58e:	80 ff       	sbrs	r24, 0
     590:	0e c0       	rjmp	.+28     	; 0x5ae <Endpoint_ClearStatusStage+0x2c>
     592:	12 c0       	rjmp	.+36     	; 0x5b8 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     594:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     598:	82 fd       	sbrc	r24, 2
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     59c:	80 91 0d 02 	lds	r24, 0x020D
     5a0:	81 11       	cpse	r24, r1
     5a2:	f8 cf       	rjmp	.-16     	; 0x594 <Endpoint_ClearStatusStage+0x12>
     5a4:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5a6:	80 91 e8 00 	lds	r24, 0x00E8
     5aa:	8b 77       	andi	r24, 0x7B	; 123
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     5ae:	80 91 0d 02 	lds	r24, 0x020D
     5b2:	81 11       	cpse	r24, r1
     5b4:	ea cf       	rjmp	.-44     	; 0x58a <Endpoint_ClearStatusStage+0x8>
     5b6:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5b8:	80 91 e8 00 	lds	r24, 0x00E8
     5bc:	8e 77       	andi	r24, 0x7E	; 126
     5be:	80 93 e8 00 	sts	0x00E8, r24
     5c2:	08 95       	ret

000005c4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     5c4:	80 91 e4 00 	lds	r24, 0x00E4
     5c8:	90 91 e5 00 	lds	r25, 0x00E5
     5cc:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     5ce:	20 91 ec 00 	lds	r18, 0x00EC
     5d2:	20 fd       	sbrc	r18, 0
     5d4:	1f c0       	rjmp	.+62     	; 0x614 <Endpoint_WaitUntilReady+0x50>
     5d6:	23 c0       	rjmp	.+70     	; 0x61e <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5d8:	20 91 0d 02 	lds	r18, 0x020D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5dc:	22 23       	and	r18, r18
     5de:	91 f0       	breq	.+36     	; 0x604 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5e0:	25 30       	cpi	r18, 0x05	; 5
     5e2:	91 f0       	breq	.+36     	; 0x608 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     5e4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     5e8:	25 fd       	sbrc	r18, 5
     5ea:	10 c0       	rjmp	.+32     	; 0x60c <Endpoint_WaitUntilReady+0x48>
     5ec:	20 91 e4 00 	lds	r18, 0x00E4
     5f0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     5f4:	28 17       	cp	r18, r24
     5f6:	39 07       	cpc	r19, r25
     5f8:	51 f3       	breq	.-44     	; 0x5ce <Endpoint_WaitUntilReady+0xa>
     5fa:	41 50       	subi	r20, 0x01	; 1
     5fc:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     5fe:	39 f7       	brne	.-50     	; 0x5ce <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     614:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     618:	20 ff       	sbrs	r18, 0
     61a:	de cf       	rjmp	.-68     	; 0x5d8 <Endpoint_WaitUntilReady+0x14>
     61c:	f9 cf       	rjmp	.-14     	; 0x610 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     61e:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     622:	22 ff       	sbrs	r18, 2
     624:	d9 cf       	rjmp	.-78     	; 0x5d8 <Endpoint_WaitUntilReady+0x14>
     626:	f4 cf       	rjmp	.-24     	; 0x610 <Endpoint_WaitUntilReady+0x4c>

00000628 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     630:	4b d0       	rcall	.+150    	; 0x6c8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     632:	52 d0       	rcall	.+164    	; 0x6d8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     634:	c8 ed       	ldi	r28, 0xD8	; 216
     636:	d0 e0       	ldi	r29, 0x00	; 0
     638:	88 81       	ld	r24, Y
     63a:	8f 77       	andi	r24, 0x7F	; 127
     63c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     63e:	88 81       	ld	r24, Y
     640:	80 68       	ori	r24, 0x80	; 128
     642:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     644:	88 81       	ld	r24, Y
     646:	8f 7d       	andi	r24, 0xDF	; 223
     648:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     64a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     64c:	10 92 0d 02 	sts	0x020D, r1
	USB_Device_ConfigurationNumber  = 0;
     650:	10 92 09 02 	sts	0x0209, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     654:	10 92 0b 02 	sts	0x020B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     658:	10 92 0a 02 	sts	0x020A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     65c:	00 ee       	ldi	r16, 0xE0	; 224
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	f8 01       	movw	r30, r16
     662:	80 81       	ld	r24, Z
     664:	8b 7f       	andi	r24, 0xFB	; 251
     666:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     668:	88 81       	ld	r24, Y
     66a:	81 60       	ori	r24, 0x01	; 1
     66c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     66e:	42 e0       	ldi	r20, 0x02	; 2
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	10 df       	rcall	.-480    	; 0x496 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     676:	e1 ee       	ldi	r30, 0xE1	; 225
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	8e 7f       	andi	r24, 0xFE	; 254
     67e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     680:	e2 ee       	ldi	r30, 0xE2	; 226
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	81 60       	ori	r24, 0x01	; 1
     688:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     68a:	80 81       	ld	r24, Z
     68c:	88 60       	ori	r24, 0x08	; 8
     68e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     690:	f8 01       	movw	r30, r16
     692:	80 81       	ld	r24, Z
     694:	8e 7f       	andi	r24, 0xFE	; 254
     696:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     698:	88 81       	ld	r24, Y
     69a:	80 61       	ori	r24, 0x10	; 16
     69c:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	08 95       	ret

000006a8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     6a8:	e8 ed       	ldi	r30, 0xD8	; 216
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	8f 7e       	andi	r24, 0xEF	; 239
     6b0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     6b2:	e7 ed       	ldi	r30, 0xD7	; 215
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 81       	ld	r24, Z
     6b8:	81 60       	ori	r24, 0x01	; 1
     6ba:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     6bc:	84 e0       	ldi	r24, 0x04	; 4
     6be:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 0c 02 	sts	0x020C, r24

	USB_ResetInterface();
     6c6:	b0 cf       	rjmp	.-160    	; 0x628 <USB_ResetInterface>

000006c8 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     6c8:	e8 ed       	ldi	r30, 0xD8	; 216
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	8e 7f       	andi	r24, 0xFE	; 254
     6d0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     6d2:	10 92 e2 00 	sts	0x00E2, r1
     6d6:	08 95       	ret

000006d8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     6d8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     6dc:	10 92 e1 00 	sts	0x00E1, r1
     6e0:	08 95       	ret

000006e2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	2f 93       	push	r18
     6ee:	3f 93       	push	r19
     6f0:	4f 93       	push	r20
     6f2:	5f 93       	push	r21
     6f4:	6f 93       	push	r22
     6f6:	7f 93       	push	r23
     6f8:	8f 93       	push	r24
     6fa:	9f 93       	push	r25
     6fc:	af 93       	push	r26
     6fe:	bf 93       	push	r27
     700:	ef 93       	push	r30
     702:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     704:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     708:	82 ff       	sbrs	r24, 2
     70a:	0a c0       	rjmp	.+20     	; 0x720 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     70c:	80 91 e2 00 	lds	r24, 0x00E2
     710:	82 ff       	sbrs	r24, 2
     712:	06 c0       	rjmp	.+12     	; 0x720 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     714:	80 91 e1 00 	lds	r24, 0x00E1
     718:	8b 7f       	andi	r24, 0xFB	; 251
     71a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     71e:	58 d2       	rcall	.+1200   	; 0xbd0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     720:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     724:	80 ff       	sbrs	r24, 0
     726:	1d c0       	rjmp	.+58     	; 0x762 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     728:	80 91 d8 00 	lds	r24, 0x00D8
     72c:	80 ff       	sbrs	r24, 0
     72e:	19 c0       	rjmp	.+50     	; 0x762 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     730:	80 91 da 00 	lds	r24, 0x00DA
     734:	8e 7f       	andi	r24, 0xFE	; 254
     736:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     73a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     73e:	80 ff       	sbrs	r24, 0
     740:	0c c0       	rjmp	.+24     	; 0x75a <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     742:	80 e1       	ldi	r24, 0x10	; 16
     744:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     746:	82 e1       	ldi	r24, 0x12	; 18
     748:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     74a:	09 b4       	in	r0, 0x29	; 41
     74c:	00 fe       	sbrs	r0, 0
     74e:	fd cf       	rjmp	.-6      	; 0x74a <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 0d 02 	sts	0x020D, r24
			EVENT_USB_Device_Connect();
     756:	19 dd       	rcall	.-1486   	; 0x18a <EVENT_USB_Device_Connect>
     758:	04 c0       	rjmp	.+8      	; 0x762 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     75a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     75c:	10 92 0d 02 	sts	0x020D, r1
			EVENT_USB_Device_Disconnect();
     760:	15 dd       	rcall	.-1494   	; 0x18c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     762:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     766:	80 ff       	sbrs	r24, 0
     768:	18 c0       	rjmp	.+48     	; 0x79a <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     76a:	80 91 e2 00 	lds	r24, 0x00E2
     76e:	80 ff       	sbrs	r24, 0
     770:	14 c0       	rjmp	.+40     	; 0x79a <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     772:	80 91 e2 00 	lds	r24, 0x00E2
     776:	8e 7f       	andi	r24, 0xFE	; 254
     778:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     77c:	80 91 e2 00 	lds	r24, 0x00E2
     780:	80 61       	ori	r24, 0x10	; 16
     782:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     786:	80 91 d8 00 	lds	r24, 0x00D8
     78a:	80 62       	ori	r24, 0x20	; 32
     78c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     790:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	80 93 0d 02 	sts	0x020D, r24
		EVENT_USB_Device_Suspend();
     798:	1b d2       	rcall	.+1078   	; 0xbd0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     79a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     79e:	84 ff       	sbrs	r24, 4
     7a0:	2f c0       	rjmp	.+94     	; 0x800 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     7a2:	80 91 e2 00 	lds	r24, 0x00E2
     7a6:	84 ff       	sbrs	r24, 4
     7a8:	2b c0       	rjmp	.+86     	; 0x800 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     7aa:	80 e1       	ldi	r24, 0x10	; 16
     7ac:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     7ae:	82 e1       	ldi	r24, 0x12	; 18
     7b0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     7b2:	09 b4       	in	r0, 0x29	; 41
     7b4:	00 fe       	sbrs	r0, 0
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7b8:	80 91 d8 00 	lds	r24, 0x00D8
     7bc:	8f 7d       	andi	r24, 0xDF	; 223
     7be:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     7c2:	80 91 e1 00 	lds	r24, 0x00E1
     7c6:	8f 7e       	andi	r24, 0xEF	; 239
     7c8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     7cc:	80 91 e2 00 	lds	r24, 0x00E2
     7d0:	8f 7e       	andi	r24, 0xEF	; 239
     7d2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7d6:	80 91 e2 00 	lds	r24, 0x00E2
     7da:	81 60       	ori	r24, 0x01	; 1
     7dc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     7e0:	80 91 09 02 	lds	r24, 0x0209
     7e4:	88 23       	and	r24, r24
     7e6:	11 f0       	breq	.+4      	; 0x7ec <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     7ec:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     7f0:	87 ff       	sbrs	r24, 7
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <__vector_10+0x116>
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <__vector_10+0x118>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 0d 02 	sts	0x020D, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     7fe:	e8 d1       	rcall	.+976    	; 0xbd0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     800:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     804:	83 ff       	sbrs	r24, 3
     806:	27 c0       	rjmp	.+78     	; 0x856 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     808:	80 91 e2 00 	lds	r24, 0x00E2
     80c:	83 ff       	sbrs	r24, 3
     80e:	23 c0       	rjmp	.+70     	; 0x856 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     810:	80 91 e1 00 	lds	r24, 0x00E1
     814:	87 7f       	andi	r24, 0xF7	; 247
     816:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	80 93 0d 02 	sts	0x020D, r24
		USB_Device_ConfigurationNumber = 0;
     820:	10 92 09 02 	sts	0x0209, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     824:	80 91 e1 00 	lds	r24, 0x00E1
     828:	8e 7f       	andi	r24, 0xFE	; 254
     82a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     82e:	80 91 e2 00 	lds	r24, 0x00E2
     832:	8e 7f       	andi	r24, 0xFE	; 254
     834:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     838:	80 91 e2 00 	lds	r24, 0x00E2
     83c:	80 61       	ori	r24, 0x10	; 16
     83e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     842:	42 e0       	ldi	r20, 0x02	; 2
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	26 de       	rcall	.-948    	; 0x496 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     84a:	80 91 f0 00 	lds	r24, 0x00F0
     84e:	88 60       	ori	r24, 0x08	; 8
     850:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     854:	bd d1       	rcall	.+890    	; 0xbd0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	7f 91       	pop	r23
     864:	6f 91       	pop	r22
     866:	5f 91       	pop	r21
     868:	4f 91       	pop	r20
     86a:	3f 91       	pop	r19
     86c:	2f 91       	pop	r18
     86e:	0f 90       	pop	r0
     870:	0f be       	out	0x3f, r0	; 63
     872:	0f 90       	pop	r0
     874:	1f 90       	pop	r1
     876:	18 95       	reti

00000878 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	2f 93       	push	r18
     884:	3f 93       	push	r19
     886:	4f 93       	push	r20
     888:	5f 93       	push	r21
     88a:	6f 93       	push	r22
     88c:	7f 93       	push	r23
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	af 93       	push	r26
     894:	bf 93       	push	r27
     896:	cf 93       	push	r28
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     89c:	80 91 e9 00 	lds	r24, 0x00E9
     8a0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     8a2:	90 91 ec 00 	lds	r25, 0x00EC
     8a6:	90 ff       	sbrs	r25, 0
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__vector_11+0x36>
     8aa:	90 e8       	ldi	r25, 0x80	; 128
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <__vector_11+0x38>
     8ae:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     8b0:	c9 2f       	mov	r28, r25
     8b2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8b4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     8b8:	80 91 f0 00 	lds	r24, 0x00F0
     8bc:	87 7f       	andi	r24, 0xF7	; 247
     8be:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     8c2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     8c4:	1c d0       	rcall	.+56     	; 0x8fe <USB_Device_ProcessControlRequest>
     8c6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     8ca:	80 91 f0 00 	lds	r24, 0x00F0
     8ce:	88 60       	ori	r24, 0x08	; 8
     8d0:	80 93 f0 00 	sts	0x00F0, r24
     8d4:	cf 70       	andi	r28, 0x0F	; 15
     8d6:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	cf 91       	pop	r28
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	ac 97       	sbiw	r28, 0x2c	; 44
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     914:	ee e0       	ldi	r30, 0x0E	; 14
     916:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     918:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     91c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     91e:	22 e0       	ldi	r18, 0x02	; 2
     920:	e6 31       	cpi	r30, 0x16	; 22
     922:	f2 07       	cpc	r31, r18
     924:	c9 f7       	brne	.-14     	; 0x918 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     926:	36 dc       	rcall	.-1940   	; 0x194 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     928:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     92c:	83 ff       	sbrs	r24, 3
     92e:	38 c1       	rjmp	.+624    	; 0xba0 <__stack+0xa1>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     930:	80 91 0e 02 	lds	r24, 0x020E

		switch (USB_ControlRequest.bRequest)
     934:	90 91 0f 02 	lds	r25, 0x020F
     938:	95 30       	cpi	r25, 0x05	; 5
     93a:	09 f4       	brne	.+2      	; 0x93e <USB_Device_ProcessControlRequest+0x40>
     93c:	89 c0       	rjmp	.+274    	; 0xa50 <USB_Device_ProcessControlRequest+0x152>
     93e:	38 f4       	brcc	.+14     	; 0x94e <USB_Device_ProcessControlRequest+0x50>
     940:	91 30       	cpi	r25, 0x01	; 1
     942:	c9 f1       	breq	.+114    	; 0x9b6 <USB_Device_ProcessControlRequest+0xb8>
     944:	70 f0       	brcs	.+28     	; 0x962 <USB_Device_ProcessControlRequest+0x64>
     946:	93 30       	cpi	r25, 0x03	; 3
     948:	09 f0       	breq	.+2      	; 0x94c <USB_Device_ProcessControlRequest+0x4e>
     94a:	2a c1       	rjmp	.+596    	; 0xba0 <__stack+0xa1>
     94c:	34 c0       	rjmp	.+104    	; 0x9b6 <USB_Device_ProcessControlRequest+0xb8>
     94e:	98 30       	cpi	r25, 0x08	; 8
     950:	09 f4       	brne	.+2      	; 0x954 <USB_Device_ProcessControlRequest+0x56>
     952:	f8 c0       	rjmp	.+496    	; 0xb44 <__stack+0x45>
     954:	99 30       	cpi	r25, 0x09	; 9
     956:	09 f4       	brne	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0x5c>
     958:	07 c1       	rjmp	.+526    	; 0xb68 <__stack+0x69>
     95a:	96 30       	cpi	r25, 0x06	; 6
     95c:	09 f0       	breq	.+2      	; 0x960 <USB_Device_ProcessControlRequest+0x62>
     95e:	20 c1       	rjmp	.+576    	; 0xba0 <__stack+0xa1>
     960:	9d c0       	rjmp	.+314    	; 0xa9c <USB_Device_ProcessControlRequest+0x19e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     962:	80 38       	cpi	r24, 0x80	; 128
     964:	21 f0       	breq	.+8      	; 0x96e <USB_Device_ProcessControlRequest+0x70>
     966:	82 38       	cpi	r24, 0x82	; 130
     968:	09 f0       	breq	.+2      	; 0x96c <USB_Device_ProcessControlRequest+0x6e>
     96a:	1a c1       	rjmp	.+564    	; 0xba0 <__stack+0xa1>
     96c:	08 c0       	rjmp	.+16     	; 0x97e <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     96e:	80 91 0a 02 	lds	r24, 0x020A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     972:	90 91 0b 02 	lds	r25, 0x020B
     976:	99 23       	and	r25, r25
     978:	a1 f0       	breq	.+40     	; 0x9a2 <USB_Device_ProcessControlRequest+0xa4>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     97a:	82 60       	ori	r24, 0x02	; 2
     97c:	12 c0       	rjmp	.+36     	; 0x9a2 <USB_Device_ProcessControlRequest+0xa4>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     97e:	80 91 12 02 	lds	r24, 0x0212
     982:	90 91 13 02 	lds	r25, 0x0213
     986:	8f 70       	andi	r24, 0x0F	; 15
     988:	99 27       	eor	r25, r25

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     98a:	87 30       	cpi	r24, 0x07	; 7
     98c:	08 f0       	brcs	.+2      	; 0x990 <USB_Device_ProcessControlRequest+0x92>
     98e:	08 c1       	rjmp	.+528    	; 0xba0 <__stack+0xa1>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     990:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     994:	80 91 eb 00 	lds	r24, 0x00EB
     998:	85 fb       	bst	r24, 5
     99a:	88 27       	eor	r24, r24
     99c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     99e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9a2:	90 91 e8 00 	lds	r25, 0x00E8
     9a6:	97 7f       	andi	r25, 0xF7	; 247
     9a8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9ac:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     9b0:	10 92 f1 00 	sts	0x00F1, r1
     9b4:	d2 c0       	rjmp	.+420    	; 0xb5a <__stack+0x5b>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9b6:	88 23       	and	r24, r24
     9b8:	19 f0       	breq	.+6      	; 0x9c0 <USB_Device_ProcessControlRequest+0xc2>
     9ba:	82 30       	cpi	r24, 0x02	; 2
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <USB_Device_ProcessControlRequest+0xc2>
     9be:	f0 c0       	rjmp	.+480    	; 0xba0 <__stack+0xa1>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     9c0:	8f 71       	andi	r24, 0x1F	; 31
     9c2:	21 f0       	breq	.+8      	; 0x9cc <USB_Device_ProcessControlRequest+0xce>
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	09 f0       	breq	.+2      	; 0x9ca <USB_Device_ProcessControlRequest+0xcc>
     9c8:	eb c0       	rjmp	.+470    	; 0xba0 <__stack+0xa1>
     9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     9cc:	80 91 10 02 	lds	r24, 0x0210
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <USB_Device_ProcessControlRequest+0xd8>
     9d4:	e5 c0       	rjmp	.+458    	; 0xba0 <__stack+0xa1>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     9d6:	93 30       	cpi	r25, 0x03	; 3
     9d8:	09 f0       	breq	.+2      	; 0x9dc <USB_Device_ProcessControlRequest+0xde>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	80 93 0b 02 	sts	0x020B, r24
     9e0:	31 c0       	rjmp	.+98     	; 0xa44 <USB_Device_ProcessControlRequest+0x146>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     9e2:	80 91 10 02 	lds	r24, 0x0210
     9e6:	81 11       	cpse	r24, r1
     9e8:	2d c0       	rjmp	.+90     	; 0xa44 <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     9ea:	80 91 12 02 	lds	r24, 0x0212
     9ee:	90 91 13 02 	lds	r25, 0x0213
     9f2:	8f 70       	andi	r24, 0x0F	; 15
     9f4:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     9f6:	28 2f       	mov	r18, r24
     9f8:	21 50       	subi	r18, 0x01	; 1
     9fa:	26 30       	cpi	r18, 0x06	; 6
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <USB_Device_ProcessControlRequest+0x102>
     9fe:	d0 c0       	rjmp	.+416    	; 0xba0 <__stack+0xa1>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a00:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a04:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a08:	20 ff       	sbrs	r18, 0
     a0a:	1c c0       	rjmp	.+56     	; 0xa44 <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a0c:	20 91 0f 02 	lds	r18, 0x020F
     a10:	23 30       	cpi	r18, 0x03	; 3
     a12:	21 f4       	brne	.+8      	; 0xa1c <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a14:	80 91 eb 00 	lds	r24, 0x00EB
     a18:	80 62       	ori	r24, 0x20	; 32
     a1a:	12 c0       	rjmp	.+36     	; 0xa40 <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a1c:	90 91 eb 00 	lds	r25, 0x00EB
     a20:	90 61       	ori	r25, 0x10	; 16
     a22:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0x130>
     a2c:	22 0f       	add	r18, r18
     a2e:	8a 95       	dec	r24
     a30:	ea f7       	brpl	.-6      	; 0xa2c <USB_Device_ProcessControlRequest+0x12e>
     a32:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
     a36:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a3a:	80 91 eb 00 	lds	r24, 0x00EB
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a44:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a48:	80 91 e8 00 	lds	r24, 0x00E8
     a4c:	87 7f       	andi	r24, 0xF7	; 247
     a4e:	88 c0       	rjmp	.+272    	; 0xb60 <__stack+0x61>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a50:	81 11       	cpse	r24, r1
     a52:	a6 c0       	rjmp	.+332    	; 0xba0 <__stack+0xa1>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     a54:	80 91 10 02 	lds	r24, 0x0210
     a58:	90 91 11 02 	lds	r25, 0x0211
     a5c:	8f 77       	andi	r24, 0x7F	; 127
     a5e:	99 27       	eor	r25, r25
     a60:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     a62:	90 91 e3 00 	lds	r25, 0x00E3
     a66:	90 78       	andi	r25, 0x80	; 128
     a68:	98 2b       	or	r25, r24
     a6a:	90 93 e3 00 	sts	0x00E3, r25
     a6e:	80 91 e8 00 	lds	r24, 0x00E8
     a72:	87 7f       	andi	r24, 0xF7	; 247
     a74:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     a78:	84 dd       	rcall	.-1272   	; 0x582 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a7a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     a7e:	80 ff       	sbrs	r24, 0
     a80:	fc cf       	rjmp	.-8      	; 0xa7a <USB_Device_ProcessControlRequest+0x17c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     a82:	80 91 e3 00 	lds	r24, 0x00E3
     a86:	80 68       	ori	r24, 0x80	; 128
     a88:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     a8c:	11 23       	and	r17, r17
     a8e:	11 f0       	breq	.+4      	; 0xa94 <USB_Device_ProcessControlRequest+0x196>
     a90:	83 e0       	ldi	r24, 0x03	; 3
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <USB_Device_ProcessControlRequest+0x198>
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	80 93 0d 02 	sts	0x020D, r24
     a9a:	82 c0       	rjmp	.+260    	; 0xba0 <__stack+0xa1>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a9c:	80 58       	subi	r24, 0x80	; 128
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0x1a6>
     aa2:	7e c0       	rjmp	.+252    	; 0xba0 <__stack+0xa1>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     aa4:	80 91 10 02 	lds	r24, 0x0210
     aa8:	90 91 11 02 	lds	r25, 0x0211
     aac:	8c 3d       	cpi	r24, 0xDC	; 220
     aae:	23 e0       	ldi	r18, 0x03	; 3
     ab0:	92 07       	cpc	r25, r18
     ab2:	71 f5       	brne	.+92     	; 0xb10 <__stack+0x11>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ab8:	8a e2       	ldi	r24, 0x2A	; 42
     aba:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     abc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     abe:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     ac0:	de 01       	movw	r26, r28
     ac2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ac4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     ac6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ac8:	51 e2       	ldi	r21, 0x21	; 33
     aca:	e3 2f       	mov	r30, r19
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	50 93 57 00 	sts	0x0057, r21
     ad2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     ad4:	20 ff       	sbrs	r18, 0
     ad6:	03 c0       	rjmp	.+6      	; 0xade <USB_Device_ProcessControlRequest+0x1e0>
					{
						SerialByte >>= 4;
     ad8:	e2 95       	swap	r30
     ada:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     adc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     ade:	ef 70       	andi	r30, 0x0F	; 15
     ae0:	8e 2f       	mov	r24, r30
     ae2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     ae4:	ea 30       	cpi	r30, 0x0A	; 10
     ae6:	10 f0       	brcs	.+4      	; 0xaec <USB_Device_ProcessControlRequest+0x1ee>
     ae8:	c7 96       	adiw	r24, 0x37	; 55
     aea:	01 c0       	rjmp	.+2      	; 0xaee <USB_Device_ProcessControlRequest+0x1f0>
     aec:	c0 96       	adiw	r24, 0x30	; 48
     aee:	8d 93       	st	X+, r24
     af0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     af2:	2f 5f       	subi	r18, 0xFF	; 255
     af4:	24 31       	cpi	r18, 0x14	; 20
     af6:	49 f7       	brne	.-46     	; 0xaca <USB_Device_ProcessControlRequest+0x1cc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     af8:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     afa:	80 91 e8 00 	lds	r24, 0x00E8
     afe:	87 7f       	andi	r24, 0xF7	; 247
     b00:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b04:	6a e2       	ldi	r22, 0x2A	; 42
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	fd db       	rcall	.-2054   	; 0x308 <Endpoint_Write_Control_Stream_LE>
     b0e:	14 c0       	rjmp	.+40     	; 0xb38 <__stack+0x39>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b10:	60 91 12 02 	lds	r22, 0x0212
     b14:	70 91 13 02 	lds	r23, 0x0213
     b18:	ae 01       	movw	r20, r28
     b1a:	45 5d       	subi	r20, 0xD5	; 213
     b1c:	5f 4f       	sbci	r21, 0xFF	; 255
     b1e:	b7 db       	rcall	.-2194   	; 0x28e <CALLBACK_USB_GetDescriptor>
     b20:	00 97       	sbiw	r24, 0x00	; 0
     b22:	09 f4       	brne	.+2      	; 0xb26 <__stack+0x27>
     b24:	3d c0       	rjmp	.+122    	; 0xba0 <__stack+0xa1>
     b26:	20 91 e8 00 	lds	r18, 0x00E8
     b2a:	27 7f       	andi	r18, 0xF7	; 247
     b2c:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b30:	bc 01       	movw	r22, r24
     b32:	8b a5       	ldd	r24, Y+43	; 0x2b
     b34:	9c a5       	ldd	r25, Y+44	; 0x2c
     b36:	4b dc       	rcall	.-1898   	; 0x3ce <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b38:	80 91 e8 00 	lds	r24, 0x00E8
     b3c:	8b 77       	andi	r24, 0x7B	; 123
     b3e:	80 93 e8 00 	sts	0x00E8, r24
     b42:	2e c0       	rjmp	.+92     	; 0xba0 <__stack+0xa1>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b44:	80 38       	cpi	r24, 0x80	; 128
     b46:	61 f5       	brne	.+88     	; 0xba0 <__stack+0xa1>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b48:	80 91 e8 00 	lds	r24, 0x00E8
     b4c:	87 7f       	andi	r24, 0xF7	; 247
     b4e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b52:	80 91 09 02 	lds	r24, 0x0209
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b56:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b5a:	80 91 e8 00 	lds	r24, 0x00E8
     b5e:	8e 77       	andi	r24, 0x7E	; 126
     b60:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     b64:	0e dd       	rcall	.-1508   	; 0x582 <Endpoint_ClearStatusStage>
     b66:	1c c0       	rjmp	.+56     	; 0xba0 <__stack+0xa1>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b68:	81 11       	cpse	r24, r1
     b6a:	1a c0       	rjmp	.+52     	; 0xba0 <__stack+0xa1>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     b6c:	90 91 10 02 	lds	r25, 0x0210
     b70:	92 30       	cpi	r25, 0x02	; 2
     b72:	b0 f4       	brcc	.+44     	; 0xba0 <__stack+0xa1>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b74:	80 91 e8 00 	lds	r24, 0x00E8
     b78:	87 7f       	andi	r24, 0xF7	; 247
     b7a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     b7e:	90 93 09 02 	sts	0x0209, r25

	Endpoint_ClearStatusStage();
     b82:	ff dc       	rcall	.-1538   	; 0x582 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     b84:	80 91 09 02 	lds	r24, 0x0209
     b88:	81 11       	cpse	r24, r1
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <__stack+0x95>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b8c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b90:	87 ff       	sbrs	r24, 7
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <__stack+0x99>
     b94:	84 e0       	ldi	r24, 0x04	; 4
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <__stack+0x9b>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	80 93 0d 02 	sts	0x020D, r24

	EVENT_USB_Device_ConfigurationChanged();
     b9e:	f7 da       	rcall	.-2578   	; 0x18e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ba0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ba4:	83 ff       	sbrs	r24, 3
     ba6:	0a c0       	rjmp	.+20     	; 0xbbc <__stack+0xbd>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ba8:	80 91 e8 00 	lds	r24, 0x00E8
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bb2:	80 91 eb 00 	lds	r24, 0x00EB
     bb6:	80 62       	ori	r24, 0x20	; 32
     bb8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     bbc:	ac 96       	adiw	r28, 0x2c	; 44
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	08 95       	ret

00000bd0 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     bd0:	08 95       	ret

00000bd2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     bd2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     bd4:	80 91 0d 02 	lds	r24, 0x020D
     bd8:	88 23       	and	r24, r24
     bda:	a9 f0       	breq	.+42     	; 0xc06 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bdc:	80 91 e9 00 	lds	r24, 0x00E9
     be0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     be2:	90 91 ec 00 	lds	r25, 0x00EC
     be6:	90 ff       	sbrs	r25, 0
     be8:	02 c0       	rjmp	.+4      	; 0xbee <USB_USBTask+0x1c>
     bea:	90 e8       	ldi	r25, 0x80	; 128
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <USB_USBTask+0x1e>
     bee:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bf0:	c9 2f       	mov	r28, r25
     bf2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bf4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bf8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     bfc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     bfe:	7f de       	rcall	.-770    	; 0x8fe <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c00:	cf 70       	andi	r28, 0x0F	; 15
     c02:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
     c10:	40 96       	adiw	r24, 0x10	; 16
     c12:	fc 01       	movw	r30, r24
     c14:	8b e0       	ldi	r24, 0x0B	; 11
     c16:	df 01       	movw	r26, r30
     c18:	1d 92       	st	X+, r1
     c1a:	8a 95       	dec	r24
     c1c:	e9 f7       	brne	.-6      	; 0xc18 <CDC_Device_ConfigureEndpoints+0xe>
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	8c 83       	std	Y+4, r24	; 0x04
     c22:	89 87       	std	Y+9, r24	; 0x09
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	8e 87       	std	Y+14, r24	; 0x0e
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	6a dc       	rcall	.-1836   	; 0x504 <Endpoint_ConfigureEndpointTable>
     c30:	88 23       	and	r24, r24
     c32:	61 f0       	breq	.+24     	; 0xc4c <CDC_Device_ConfigureEndpoints+0x42>
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	ce 01       	movw	r24, r28
     c38:	06 96       	adiw	r24, 0x06	; 6
     c3a:	64 dc       	rcall	.-1848   	; 0x504 <Endpoint_ConfigureEndpointTable>
     c3c:	88 23       	and	r24, r24
     c3e:	31 f0       	breq	.+12     	; 0xc4c <CDC_Device_ConfigureEndpoints+0x42>
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	ce 01       	movw	r24, r28
     c44:	0b 96       	adiw	r24, 0x0b	; 11
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	5c cc       	rjmp	.-1864   	; 0x504 <Endpoint_ConfigureEndpointTable>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <CDC_Device_SendByte>:
     c54:	cf 93       	push	r28
     c56:	c6 2f       	mov	r28, r22
     c58:	20 91 0d 02 	lds	r18, 0x020D
     c5c:	24 30       	cpi	r18, 0x04	; 4
     c5e:	f1 f4       	brne	.+60     	; 0xc9c <CDC_Device_SendByte+0x48>
     c60:	fc 01       	movw	r30, r24
     c62:	44 89       	ldd	r20, Z+20	; 0x14
     c64:	55 89       	ldd	r21, Z+21	; 0x15
     c66:	66 89       	ldd	r22, Z+22	; 0x16
     c68:	77 89       	ldd	r23, Z+23	; 0x17
     c6a:	45 2b       	or	r20, r21
     c6c:	46 2b       	or	r20, r22
     c6e:	47 2b       	or	r20, r23
     c70:	a9 f0       	breq	.+42     	; 0xc9c <CDC_Device_SendByte+0x48>
     c72:	81 81       	ldd	r24, Z+1	; 0x01
     c74:	8f 70       	andi	r24, 0x0F	; 15
     c76:	80 93 e9 00 	sts	0x00E9, r24
     c7a:	80 91 e8 00 	lds	r24, 0x00E8
     c7e:	85 ff       	sbrs	r24, 5
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <CDC_Device_SendByte+0x36>
     c82:	c0 93 f1 00 	sts	0x00F1, r28
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0a c0       	rjmp	.+20     	; 0xc9e <CDC_Device_SendByte+0x4a>
     c8a:	80 91 e8 00 	lds	r24, 0x00E8
     c8e:	8e 77       	andi	r24, 0x7E	; 126
     c90:	80 93 e8 00 	sts	0x00E8, r24
     c94:	97 dc       	rcall	.-1746   	; 0x5c4 <Endpoint_WaitUntilReady>
     c96:	88 23       	and	r24, r24
     c98:	a1 f3       	breq	.-24     	; 0xc82 <CDC_Device_SendByte+0x2e>
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <CDC_Device_SendByte+0x4a>
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <CDC_Device_putchar>:
     ca2:	fb 01       	movw	r30, r22
     ca4:	68 2f       	mov	r22, r24
     ca6:	84 85       	ldd	r24, Z+12	; 0x0c
     ca8:	95 85       	ldd	r25, Z+13	; 0x0d
     caa:	d4 df       	rcall	.-88     	; 0xc54 <CDC_Device_SendByte>
     cac:	88 23       	and	r24, r24
     cae:	19 f0       	breq	.+6      	; 0xcb6 <CDC_Device_putchar+0x14>
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	3f ef       	ldi	r19, 0xFF	; 255
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <CDC_Device_putchar+0x18>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	c9 01       	movw	r24, r18
     cbc:	08 95       	ret

00000cbe <CDC_Device_Flush>:
     cbe:	20 91 0d 02 	lds	r18, 0x020D
     cc2:	24 30       	cpi	r18, 0x04	; 4
     cc4:	51 f5       	brne	.+84     	; 0xd1a <CDC_Device_Flush+0x5c>
     cc6:	fc 01       	movw	r30, r24
     cc8:	44 89       	ldd	r20, Z+20	; 0x14
     cca:	55 89       	ldd	r21, Z+21	; 0x15
     ccc:	66 89       	ldd	r22, Z+22	; 0x16
     cce:	77 89       	ldd	r23, Z+23	; 0x17
     cd0:	45 2b       	or	r20, r21
     cd2:	46 2b       	or	r20, r22
     cd4:	47 2b       	or	r20, r23
     cd6:	09 f1       	breq	.+66     	; 0xd1a <CDC_Device_Flush+0x5c>
     cd8:	81 81       	ldd	r24, Z+1	; 0x01
     cda:	8f 70       	andi	r24, 0x0F	; 15
     cdc:	80 93 e9 00 	sts	0x00E9, r24
     ce0:	30 91 f3 00 	lds	r19, 0x00F3
     ce4:	20 91 f2 00 	lds	r18, 0x00F2
     ce8:	93 2f       	mov	r25, r19
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	82 2b       	or	r24, r18
     cee:	89 2b       	or	r24, r25
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <CDC_Device_Flush+0x38>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	08 95       	ret
     cf6:	90 91 e8 00 	lds	r25, 0x00E8
     cfa:	80 91 e8 00 	lds	r24, 0x00E8
     cfe:	8e 77       	andi	r24, 0x7E	; 126
     d00:	80 93 e8 00 	sts	0x00E8, r24
     d04:	95 fd       	sbrc	r25, 5
     d06:	f5 cf       	rjmp	.-22     	; 0xcf2 <CDC_Device_Flush+0x34>
     d08:	5d dc       	rcall	.-1862   	; 0x5c4 <Endpoint_WaitUntilReady>
     d0a:	81 11       	cpse	r24, r1
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <CDC_Device_Flush+0x5e>
     d0e:	90 91 e8 00 	lds	r25, 0x00E8
     d12:	9e 77       	andi	r25, 0x7E	; 126
     d14:	90 93 e8 00 	sts	0x00E8, r25
     d18:	08 95       	ret
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	08 95       	ret

00000d1e <CDC_Device_USBTask>:
     d1e:	20 91 0d 02 	lds	r18, 0x020D
     d22:	24 30       	cpi	r18, 0x04	; 4
     d24:	89 f4       	brne	.+34     	; 0xd48 <CDC_Device_USBTask+0x2a>
     d26:	fc 01       	movw	r30, r24
     d28:	44 89       	ldd	r20, Z+20	; 0x14
     d2a:	55 89       	ldd	r21, Z+21	; 0x15
     d2c:	66 89       	ldd	r22, Z+22	; 0x16
     d2e:	77 89       	ldd	r23, Z+23	; 0x17
     d30:	45 2b       	or	r20, r21
     d32:	46 2b       	or	r20, r22
     d34:	47 2b       	or	r20, r23
     d36:	41 f0       	breq	.+16     	; 0xd48 <CDC_Device_USBTask+0x2a>
     d38:	21 81       	ldd	r18, Z+1	; 0x01
     d3a:	2f 70       	andi	r18, 0x0F	; 15
     d3c:	20 93 e9 00 	sts	0x00E9, r18
     d40:	20 91 e8 00 	lds	r18, 0x00E8
     d44:	20 fd       	sbrc	r18, 0
     d46:	bb cf       	rjmp	.-138    	; 0xcbe <CDC_Device_Flush>
     d48:	08 95       	ret

00000d4a <CDC_Device_ReceiveByte>:
     d4a:	20 91 0d 02 	lds	r18, 0x020D
     d4e:	24 30       	cpi	r18, 0x04	; 4
     d50:	19 f0       	breq	.+6      	; 0xd58 <CDC_Device_ReceiveByte+0xe>
     d52:	2f ef       	ldi	r18, 0xFF	; 255
     d54:	3f ef       	ldi	r19, 0xFF	; 255
     d56:	2e c0       	rjmp	.+92     	; 0xdb4 <CDC_Device_ReceiveByte+0x6a>
     d58:	fc 01       	movw	r30, r24
     d5a:	44 89       	ldd	r20, Z+20	; 0x14
     d5c:	55 89       	ldd	r21, Z+21	; 0x15
     d5e:	66 89       	ldd	r22, Z+22	; 0x16
     d60:	77 89       	ldd	r23, Z+23	; 0x17
     d62:	45 2b       	or	r20, r21
     d64:	46 2b       	or	r20, r22
     d66:	47 2b       	or	r20, r23
     d68:	a1 f3       	breq	.-24     	; 0xd52 <CDC_Device_ReceiveByte+0x8>
     d6a:	86 81       	ldd	r24, Z+6	; 0x06
     d6c:	8f 70       	andi	r24, 0x0F	; 15
     d6e:	80 93 e9 00 	sts	0x00E9, r24
     d72:	80 91 e8 00 	lds	r24, 0x00E8
     d76:	82 ff       	sbrs	r24, 2
     d78:	ec cf       	rjmp	.-40     	; 0xd52 <CDC_Device_ReceiveByte+0x8>
     d7a:	30 91 f3 00 	lds	r19, 0x00F3
     d7e:	20 91 f2 00 	lds	r18, 0x00F2
     d82:	93 2f       	mov	r25, r19
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	82 2b       	or	r24, r18
     d88:	89 2b       	or	r24, r25
     d8a:	21 f0       	breq	.+8      	; 0xd94 <CDC_Device_ReceiveByte+0x4a>
     d8c:	20 91 f1 00 	lds	r18, 0x00F1
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <CDC_Device_ReceiveByte+0x4e>
     d94:	2f ef       	ldi	r18, 0xFF	; 255
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	50 91 f3 00 	lds	r21, 0x00F3
     d9c:	40 91 f2 00 	lds	r20, 0x00F2
     da0:	95 2f       	mov	r25, r21
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	84 2b       	or	r24, r20
     da6:	89 2b       	or	r24, r25
     da8:	29 f4       	brne	.+10     	; 0xdb4 <CDC_Device_ReceiveByte+0x6a>
     daa:	80 91 e8 00 	lds	r24, 0x00E8
     dae:	8b 77       	andi	r24, 0x7B	; 123
     db0:	80 93 e8 00 	sts	0x00E8, r24
     db4:	c9 01       	movw	r24, r18
     db6:	08 95       	ret

00000db8 <CDC_Device_getchar>:
     db8:	fc 01       	movw	r30, r24
     dba:	84 85       	ldd	r24, Z+12	; 0x0c
     dbc:	95 85       	ldd	r25, Z+13	; 0x0d
     dbe:	c5 df       	rcall	.-118    	; 0xd4a <CDC_Device_ReceiveByte>
     dc0:	9c 01       	movw	r18, r24
     dc2:	97 ff       	sbrs	r25, 7
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <CDC_Device_getchar+0x12>
     dc6:	2e ef       	ldi	r18, 0xFE	; 254
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	c9 01       	movw	r24, r18
     dcc:	08 95       	ret

00000dce <CDC_Device_CreateStream>:
     dce:	fb 01       	movw	r30, r22
     dd0:	2e e0       	ldi	r18, 0x0E	; 14
     dd2:	db 01       	movw	r26, r22
     dd4:	1d 92       	st	X+, r1
     dd6:	2a 95       	dec	r18
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <CDC_Device_CreateStream+0x6>
     dda:	23 e0       	ldi	r18, 0x03	; 3
     ddc:	23 83       	std	Z+3, r18	; 0x03
     dde:	21 e5       	ldi	r18, 0x51	; 81
     de0:	36 e0       	ldi	r19, 0x06	; 6
     de2:	31 87       	std	Z+9, r19	; 0x09
     de4:	20 87       	std	Z+8, r18	; 0x08
     de6:	2c ed       	ldi	r18, 0xDC	; 220
     de8:	36 e0       	ldi	r19, 0x06	; 6
     dea:	33 87       	std	Z+11, r19	; 0x0b
     dec:	22 87       	std	Z+10, r18	; 0x0a
     dee:	95 87       	std	Z+13, r25	; 0x0d
     df0:	84 87       	std	Z+12, r24	; 0x0c
     df2:	08 95       	ret

00000df4 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     df4:	08 95       	ret

00000df6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dfc:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e00:	83 ff       	sbrs	r24, 3
     e02:	a7 c0       	rjmp	.+334    	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e04:	88 81       	ld	r24, Y
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	20 91 12 02 	lds	r18, 0x0212
     e0c:	30 91 13 02 	lds	r19, 0x0213
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	09 f0       	breq	.+2      	; 0xe18 <CDC_Device_ProcessControlRequest+0x22>
     e16:	9d c0       	rjmp	.+314    	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
     e18:	80 91 0f 02 	lds	r24, 0x020F
     e1c:	81 32       	cpi	r24, 0x21	; 33
     e1e:	61 f0       	breq	.+24     	; 0xe38 <CDC_Device_ProcessControlRequest+0x42>
     e20:	20 f4       	brcc	.+8      	; 0xe2a <CDC_Device_ProcessControlRequest+0x34>
     e22:	80 32       	cpi	r24, 0x20	; 32
     e24:	09 f0       	breq	.+2      	; 0xe28 <CDC_Device_ProcessControlRequest+0x32>
     e26:	95 c0       	rjmp	.+298    	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
     e28:	3d c0       	rjmp	.+122    	; 0xea4 <CDC_Device_ProcessControlRequest+0xae>
     e2a:	82 32       	cpi	r24, 0x22	; 34
     e2c:	09 f4       	brne	.+2      	; 0xe30 <CDC_Device_ProcessControlRequest+0x3a>
     e2e:	6d c0       	rjmp	.+218    	; 0xf0a <CDC_Device_ProcessControlRequest+0x114>
     e30:	83 32       	cpi	r24, 0x23	; 35
     e32:	09 f0       	breq	.+2      	; 0xe36 <CDC_Device_ProcessControlRequest+0x40>
     e34:	8e c0       	rjmp	.+284    	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
     e36:	7d c0       	rjmp	.+250    	; 0xf32 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e38:	80 91 0e 02 	lds	r24, 0x020E
     e3c:	81 3a       	cpi	r24, 0xA1	; 161
     e3e:	09 f0       	breq	.+2      	; 0xe42 <CDC_Device_ProcessControlRequest+0x4c>
     e40:	88 c0       	rjmp	.+272    	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e42:	80 91 e8 00 	lds	r24, 0x00E8
     e46:	87 7f       	andi	r24, 0xF7	; 247
     e48:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e4c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     e50:	80 ff       	sbrs	r24, 0
     e52:	fc cf       	rjmp	.-8      	; 0xe4c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e54:	4c 89       	ldd	r20, Y+20	; 0x14
     e56:	5d 89       	ldd	r21, Y+21	; 0x15
     e58:	6e 89       	ldd	r22, Y+22	; 0x16
     e5a:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     e5c:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     e60:	bb 27       	eor	r27, r27
     e62:	a7 2f       	mov	r26, r23
     e64:	96 2f       	mov	r25, r22
     e66:	85 2f       	mov	r24, r21
     e68:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     e6c:	cb 01       	movw	r24, r22
     e6e:	aa 27       	eor	r26, r26
     e70:	bb 27       	eor	r27, r27
     e72:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     e76:	47 2f       	mov	r20, r23
     e78:	55 27       	eor	r21, r21
     e7a:	66 27       	eor	r22, r22
     e7c:	77 27       	eor	r23, r23
     e7e:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     e82:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e84:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     e88:	89 8d       	ldd	r24, Y+25	; 0x19
     e8a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     e8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e90:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e94:	80 91 e8 00 	lds	r24, 0x00E8
     e98:	8e 77       	andi	r24, 0x7E	; 126
     e9a:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ea2:	6f cb       	rjmp	.-2338   	; 0x582 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ea4:	80 91 0e 02 	lds	r24, 0x020E
     ea8:	81 32       	cpi	r24, 0x21	; 33
     eaa:	09 f0       	breq	.+2      	; 0xeae <CDC_Device_ProcessControlRequest+0xb8>
     eac:	52 c0       	rjmp	.+164    	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eae:	80 91 e8 00 	lds	r24, 0x00E8
     eb2:	87 7f       	andi	r24, 0xF7	; 247
     eb4:	80 93 e8 00 	sts	0x00E8, r24
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     eba:	80 91 0d 02 	lds	r24, 0x020D
     ebe:	88 23       	and	r24, r24
     ec0:	09 f4       	brne	.+2      	; 0xec4 <CDC_Device_ProcessControlRequest+0xce>
     ec2:	47 c0       	rjmp	.+142    	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ec4:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     ec8:	82 ff       	sbrs	r24, 2
     eca:	f7 cf       	rjmp	.-18     	; 0xeba <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     ecc:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     ed0:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     ed4:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     ed8:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     edc:	3c 8b       	std	Y+20, r19	; 0x14
     ede:	2d 8b       	std	Y+21, r18	; 0x15
     ee0:	9e 8b       	std	Y+22, r25	; 0x16
     ee2:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ee4:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     ee8:	88 8f       	std	Y+24, r24	; 0x18
     eea:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     eee:	89 8f       	std	Y+25, r24	; 0x19
     ef0:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     ef4:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ef6:	80 91 e8 00 	lds	r24, 0x00E8
     efa:	8b 77       	andi	r24, 0x7B	; 123
     efc:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f00:	40 db       	rcall	.-2432   	; 0x582 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f02:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f08:	75 cf       	rjmp	.-278    	; 0xdf4 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f0a:	80 91 0e 02 	lds	r24, 0x020E
     f0e:	81 32       	cpi	r24, 0x21	; 33
     f10:	01 f5       	brne	.+64     	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f12:	80 91 e8 00 	lds	r24, 0x00E8
     f16:	87 7f       	andi	r24, 0xF7	; 247
     f18:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f1c:	32 db       	rcall	.-2460   	; 0x582 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f1e:	80 91 10 02 	lds	r24, 0x0210
     f22:	90 91 11 02 	lds	r25, 0x0211
     f26:	99 8b       	std	Y+17, r25	; 0x11
     f28:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f2a:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f30:	34 c9       	rjmp	.-3480   	; 0x19a <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f32:	80 91 0e 02 	lds	r24, 0x020E
     f36:	81 32       	cpi	r24, 0x21	; 33
     f38:	61 f4       	brne	.+24     	; 0xf52 <CDC_Device_ProcessControlRequest+0x15c>
     f3a:	80 91 e8 00 	lds	r24, 0x00E8
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f44:	1e db       	rcall	.-2500   	; 0x582 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f46:	60 91 10 02 	lds	r22, 0x0210
     f4a:	ce 01       	movw	r24, r28
			}

			break;
	}
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f50:	51 cf       	rjmp	.-350    	; 0xdf4 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <_Z10MATCH_MARKii>:

//+========================================================
// Due to sensor lag, when received, Marks tend to be 100us too long
//
int  MATCH_MARK (int measured_ticks,  int desired_us)
{
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
	DBG_PRINT("Testing mark (actual vs desired): %dus vs %dus: %d <= %d <= %d", 
		measured_ticks * USECPERTICK, desired_us, 
		TICKS_LOW(desired_us + MARK_EXCESS) * USECPERTICK, measured_ticks * USECPERTICK, TICKS_HIGH(desired_us + MARK_EXCESS) * USECPERTICK);

	bool passed = ((measured_ticks >= TICKS_LOW (desired_us + MARK_EXCESS))
				&& (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
     f66:	6c 59       	subi	r22, 0x9C	; 156
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	88 27       	eor	r24, r24
     f6c:	77 fd       	sbrc	r23, 7
     f6e:	80 95       	com	r24
     f70:	98 2f       	mov	r25, r24
     f72:	2d d4       	rcall	.+2138   	; 0x17ce <__floatsisf>
     f74:	6b 01       	movw	r12, r22
     f76:	7c 01       	movw	r14, r24
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e4       	ldi	r20, 0x40	; 64
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	b2 d4       	rcall	.+2404   	; 0x18e6 <__mulsf3>
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	48 e4       	ldi	r20, 0x48	; 72
     f88:	52 e4       	ldi	r21, 0x42	; 66
     f8a:	86 d3       	rcall	.+1804   	; 0x1698 <__divsf3>
     f8c:	ed d3       	rcall	.+2010   	; 0x1768 <__fixsfsi>
     f8e:	c6 17       	cp	r28, r22
     f90:	d7 07       	cpc	r29, r23
     f92:	b4 f0       	brlt	.+44     	; 0xfc0 <_Z10MATCH_MARKii+0x68>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 ea       	ldi	r20, 0xA0	; 160
     f9a:	5f e3       	ldi	r21, 0x3F	; 63
     f9c:	c7 01       	movw	r24, r14
     f9e:	b6 01       	movw	r22, r12
     fa0:	a2 d4       	rcall	.+2372   	; 0x18e6 <__mulsf3>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	48 e4       	ldi	r20, 0x48	; 72
     fa8:	52 e4       	ldi	r21, 0x42	; 66
     faa:	76 d3       	rcall	.+1772   	; 0x1698 <__divsf3>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e8       	ldi	r20, 0x80	; 128
     fb2:	5f e3       	ldi	r21, 0x3F	; 63
     fb4:	0d d3       	rcall	.+1562   	; 0x15d0 <__addsf3>
     fb6:	d8 d3       	rcall	.+1968   	; 0x1768 <__fixsfsi>
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	6c 17       	cp	r22, r28
     fbc:	7d 07       	cpc	r23, r29
     fbe:	0c f4       	brge	.+2      	; 0xfc2 <_Z10MATCH_MARKii+0x6a>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
	if (passed)
		DBG_PRINTLN("?; passed");
	else
		DBG_PRINTLN("?; FAILED"); 
	return passed;
}
     fc2:	82 2f       	mov	r24, r18
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	08 95       	ret

00000fd4 <_Z11MATCH_SPACEii>:

//+========================================================
// Due to sensor lag, when received, Spaces tend to be 100us too short
//
int  MATCH_SPACE (int measured_ticks,  int desired_us)
{
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
	DBG_PRINT("Testing space (actual vs desired): %dus vs %dus: %d <= %d <= %d", 
		measured_ticks * USECPERTICK, desired_us, 
		TICKS_LOW(desired_us - MARK_EXCESS) * USECPERTICK, measured_ticks * USECPERTICK, TICKS_HIGH(desired_us - MARK_EXCESS) * USECPERTICK);

	bool passed = ((measured_ticks >= TICKS_LOW (desired_us - MARK_EXCESS))
				&& (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
     fe2:	64 56       	subi	r22, 0x64	; 100
     fe4:	71 09       	sbc	r23, r1
     fe6:	88 27       	eor	r24, r24
     fe8:	77 fd       	sbrc	r23, 7
     fea:	80 95       	com	r24
     fec:	98 2f       	mov	r25, r24
     fee:	ef d3       	rcall	.+2014   	; 0x17ce <__floatsisf>
     ff0:	6b 01       	movw	r12, r22
     ff2:	7c 01       	movw	r14, r24
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e4       	ldi	r20, 0x40	; 64
     ffa:	5f e3       	ldi	r21, 0x3F	; 63
     ffc:	74 d4       	rcall	.+2280   	; 0x18e6 <__mulsf3>
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	48 e4       	ldi	r20, 0x48	; 72
    1004:	52 e4       	ldi	r21, 0x42	; 66
    1006:	48 d3       	rcall	.+1680   	; 0x1698 <__divsf3>
    1008:	af d3       	rcall	.+1886   	; 0x1768 <__fixsfsi>
    100a:	c6 17       	cp	r28, r22
    100c:	d7 07       	cpc	r29, r23
    100e:	b4 f0       	brlt	.+44     	; 0x103c <_Z11MATCH_SPACEii+0x68>
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 ea       	ldi	r20, 0xA0	; 160
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	c7 01       	movw	r24, r14
    101a:	b6 01       	movw	r22, r12
    101c:	64 d4       	rcall	.+2248   	; 0x18e6 <__mulsf3>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	48 e4       	ldi	r20, 0x48	; 72
    1024:	52 e4       	ldi	r21, 0x42	; 66
    1026:	38 d3       	rcall	.+1648   	; 0x1698 <__divsf3>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e8       	ldi	r20, 0x80	; 128
    102e:	5f e3       	ldi	r21, 0x3F	; 63
    1030:	cf d2       	rcall	.+1438   	; 0x15d0 <__addsf3>
    1032:	9a d3       	rcall	.+1844   	; 0x1768 <__fixsfsi>
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	6c 17       	cp	r22, r28
    1038:	7d 07       	cpc	r23, r29
    103a:	0c f4       	brge	.+2      	; 0x103e <_Z11MATCH_SPACEii+0x6a>
    103c:	20 e0       	ldi	r18, 0x00	; 0
	if (passed)
		DBG_PRINTLN("?; passed");
	else
		DBG_PRINTLN("?; FAILED"); 
	return passed;
}
    103e:	82 2f       	mov	r24, r18
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	08 95       	ret

00001050 <__vector_41>:
#ifdef IR_TIMER_USE_ESP32
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
	TIMER_RESET;

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	uint8_t  irdata = (IR_RECEIVE_SIGNAL == 0) ? SPACE : MARK;
    1064:	2c b1       	in	r18, 0x0c	; 12
    1066:	26 fb       	bst	r18, 6
    1068:	22 27       	eor	r18, r18
    106a:	20 f9       	bld	r18, 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	28 27       	eor	r18, r24

	irparams.timer++;  // One more 50uS tick
    1070:	80 91 28 01 	lds	r24, 0x0128
    1074:	90 91 29 01 	lds	r25, 0x0129
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	90 93 29 01 	sts	0x0129, r25
    107e:	80 93 28 01 	sts	0x0128, r24
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
    1082:	80 91 27 01 	lds	r24, 0x0127
    1086:	85 36       	cpi	r24, 0x65	; 101
    1088:	18 f0       	brcs	.+6      	; 0x1090 <__vector_41+0x40>
    108a:	86 e0       	ldi	r24, 0x06	; 6
    108c:	80 93 26 01 	sts	0x0126, r24

	switch(irparams.rcvstate) {
    1090:	80 91 26 01 	lds	r24, 0x0126
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	b9 f1       	breq	.+110    	; 0x1106 <__vector_41+0xb6>
    1098:	30 f4       	brcc	.+12     	; 0x10a6 <__vector_41+0x56>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	59 f0       	breq	.+22     	; 0x10b4 <__vector_41+0x64>
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <__vector_41+0x54>
    10a2:	64 c0       	rjmp	.+200    	; 0x116c <__vector_41+0x11c>
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <__vector_41+0x82>
    10a6:	85 30       	cpi	r24, 0x05	; 5
    10a8:	09 f4       	brne	.+2      	; 0x10ac <__vector_41+0x5c>
    10aa:	53 c0       	rjmp	.+166    	; 0x1152 <__vector_41+0x102>
    10ac:	86 30       	cpi	r24, 0x06	; 6
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__vector_41+0x62>
    10b0:	5d c0       	rjmp	.+186    	; 0x116c <__vector_41+0x11c>
    10b2:	56 c0       	rjmp	.+172    	; 0x1160 <__vector_41+0x110>
		//......................................................................
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
    10b4:	21 11       	cpse	r18, r1
    10b6:	5e c0       	rjmp	.+188    	; 0x1174 <__vector_41+0x124>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
    10b8:	80 91 28 01 	lds	r24, 0x0128
    10bc:	90 91 29 01 	lds	r25, 0x0129
    10c0:	84 36       	cpi	r24, 0x64	; 100
    10c2:	91 05       	cpc	r25, r1
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <__vector_41+0x78>
    10c6:	47 c0       	rjmp	.+142    	; 0x1156 <__vector_41+0x106>
					irparams.timer = 0;

				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
    10c8:	10 92 f4 01 	sts	0x01F4, r1
					irparams.rawlen                    = 0;
    10cc:	10 92 27 01 	sts	0x0127, r1
    10d0:	1c c0       	rjmp	.+56     	; 0x110a <__vector_41+0xba>
				}
			}
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
    10d2:	21 30       	cpi	r18, 0x01	; 1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <__vector_41+0x88>
    10d6:	4c c0       	rjmp	.+152    	; 0x1170 <__vector_41+0x120>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    10d8:	20 91 27 01 	lds	r18, 0x0127
    10dc:	e2 2f       	mov	r30, r18
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 91 28 01 	lds	r24, 0x0128
    10e4:	90 91 29 01 	lds	r25, 0x0129
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	e6 5d       	subi	r30, 0xD6	; 214
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
    10f4:	2f 5f       	subi	r18, 0xFF	; 255
    10f6:	20 93 27 01 	sts	0x0127, r18
				irparams.timer                     = 0;
    10fa:	10 92 29 01 	sts	0x0129, r1
    10fe:	10 92 28 01 	sts	0x0128, r1
				irparams.rcvstate                  = STATE_SPACE;
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	23 c0       	rjmp	.+70     	; 0x114c <__vector_41+0xfc>
			}
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
    1106:	21 11       	cpse	r18, r1
    1108:	19 c0       	rjmp	.+50     	; 0x113c <__vector_41+0xec>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    110a:	20 91 27 01 	lds	r18, 0x0127
    110e:	e2 2f       	mov	r30, r18
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 91 28 01 	lds	r24, 0x0128
    1116:	90 91 29 01 	lds	r25, 0x0129
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	e6 5d       	subi	r30, 0xD6	; 214
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
    1126:	2f 5f       	subi	r18, 0xFF	; 255
    1128:	20 93 27 01 	sts	0x0127, r18
				irparams.timer                     = 0;
    112c:	10 92 29 01 	sts	0x0129, r1
    1130:	10 92 28 01 	sts	0x0128, r1
				irparams.rcvstate                  = STATE_MARK;
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	80 93 26 01 	sts	0x0126, r24
    113a:	1a c0       	rjmp	.+52     	; 0x1170 <__vector_41+0x120>

			} else if (irparams.timer > GAP_TICKS) {  // Space
    113c:	80 91 28 01 	lds	r24, 0x0128
    1140:	90 91 29 01 	lds	r25, 0x0129
    1144:	85 36       	cpi	r24, 0x65	; 101
    1146:	91 05       	cpc	r25, r1
    1148:	a8 f0       	brcs	.+42     	; 0x1174 <__vector_41+0x124>
					// A long Space, indicates gap between codes
					// Flag the current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting Space width
					irparams.rcvstate = STATE_STOP;
    114a:	85 e0       	ldi	r24, 0x05	; 5
    114c:	80 93 26 01 	sts	0x0126, r24
    1150:	11 c0       	rjmp	.+34     	; 0x1174 <__vector_41+0x124>
			}
			break;
		//......................................................................
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
    1152:	21 11       	cpse	r18, r1
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <__vector_41+0x124>
    1156:	10 92 29 01 	sts	0x0129, r1
    115a:	10 92 28 01 	sts	0x0128, r1
    115e:	08 c0       	rjmp	.+16     	; 0x1170 <__vector_41+0x120>
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	80 93 f4 01 	sts	0x01F4, r24
			irparams.rcvstate = STATE_STOP;
    1166:	85 e0       	ldi	r24, 0x05	; 5
    1168:	80 93 26 01 	sts	0x0126, r24
		 	break;
	}

	// If requested, flash LED while receiving IR data
#if IR_RECEIVE_BLINK_FLAG
	if (irdata == MARK)
    116c:	21 11       	cpse	r18, r1
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <__vector_41+0x124>
		IR_RECEIVE_BLINK_ON; // Turn user defined pin LED on
    1170:	47 9a       	sbi	0x08, 7	; 8
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <__vector_41+0x126>
	else
		IR_RECEIVE_BLINK_OFF; // Turn user defined pin LED on
    1174:	47 98       	cbi	0x08, 7	; 8
#endif
}
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <_Z19TIMER_CONFIG_NORMALv>:
// Return if receiving new IR signals
//
bool  IRrecv::isIdle ( )
{
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}
    118a:	10 92 c0 00 	sts	0x00C0, r1
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 93 c1 00 	sts	0x00C1, r24
    1194:	10 92 c2 00 	sts	0x00C2, r1
    1198:	10 92 c3 00 	sts	0x00C3, r1
    119c:	10 92 c4 00 	sts	0x00C4, r1
    11a0:	ef eb       	ldi	r30, 0xBF	; 191
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	80 83       	st	Z, r24
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	80 93 d1 00 	sts	0x00D1, r24
    11ae:	10 82       	st	Z, r1
    11b0:	10 92 bf 00 	sts	0x00BF, r1
    11b4:	10 92 be 00 	sts	0x00BE, r1
    11b8:	08 95       	ret

000011ba <_ZN6IRrecv10decodeMainEP14decode_results>:
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	eb 01       	movw	r28, r22
    11d4:	80 91 27 01 	lds	r24, 0x0127
    11d8:	86 31       	cpi	r24, 0x16	; 22
    11da:	10 f4       	brcc	.+4      	; 0x11e0 <_ZN6IRrecv10decodeMainEP14decode_results+0x26>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	5e c0       	rjmp	.+188    	; 0x129c <_ZN6IRrecv10decodeMainEP14decode_results+0xe2>
    11e0:	e8 85       	ldd	r30, Y+8	; 0x08
    11e2:	f9 85       	ldd	r31, Y+9	; 0x09
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	60 e6       	ldi	r22, 0x60	; 96
    11ea:	79 e0       	ldi	r23, 0x09	; 9
    11ec:	b5 de       	rcall	.-662    	; 0xf58 <_Z10MATCH_MARKii>
    11ee:	89 2b       	or	r24, r25
    11f0:	a9 f3       	breq	.-22     	; 0x11dc <_ZN6IRrecv10decodeMainEP14decode_results+0x22>
    11f2:	53 e0       	ldi	r21, 0x03	; 3
    11f4:	a5 2e       	mov	r10, r21
    11f6:	b1 2c       	mov	r11, r1
    11f8:	02 e0       	ldi	r16, 0x02	; 2
    11fa:	10 e0       	ldi	r17, 0x00	; 0
    11fc:	c1 2c       	mov	r12, r1
    11fe:	d1 2c       	mov	r13, r1
    1200:	76 01       	movw	r14, r12
    1202:	38 c0       	rjmp	.+112    	; 0x1274 <_ZN6IRrecv10decodeMainEP14decode_results+0xba>
    1204:	c8 01       	movw	r24, r16
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	e8 85       	ldd	r30, Y+8	; 0x08
    120c:	f9 85       	ldd	r31, Y+9	; 0x09
    120e:	e8 0f       	add	r30, r24
    1210:	f9 1f       	adc	r31, r25
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	68 e5       	ldi	r22, 0x58	; 88
    1218:	72 e0       	ldi	r23, 0x02	; 2
    121a:	dc de       	rcall	.-584    	; 0xfd4 <_Z11MATCH_SPACEii>
    121c:	89 2b       	or	r24, r25
    121e:	91 f1       	breq	.+100    	; 0x1284 <_ZN6IRrecv10decodeMainEP14decode_results+0xca>
    1220:	45 01       	movw	r8, r10
    1222:	88 0c       	add	r8, r8
    1224:	99 1c       	adc	r9, r9
    1226:	e8 85       	ldd	r30, Y+8	; 0x08
    1228:	f9 85       	ldd	r31, Y+9	; 0x09
    122a:	e8 0d       	add	r30, r8
    122c:	f9 1d       	adc	r31, r9
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	60 eb       	ldi	r22, 0xB0	; 176
    1234:	74 e0       	ldi	r23, 0x04	; 4
    1236:	90 de       	rcall	.-736    	; 0xf58 <_Z10MATCH_MARKii>
    1238:	89 2b       	or	r24, r25
    123a:	39 f0       	breq	.+14     	; 0x124a <_ZN6IRrecv10decodeMainEP14decode_results+0x90>
    123c:	cc 0c       	add	r12, r12
    123e:	dd 1c       	adc	r13, r13
    1240:	ee 1c       	adc	r14, r14
    1242:	ff 1c       	adc	r15, r15
    1244:	68 94       	set
    1246:	c0 f8       	bld	r12, 0
    1248:	10 c0       	rjmp	.+32     	; 0x126a <_ZN6IRrecv10decodeMainEP14decode_results+0xb0>
    124a:	e8 85       	ldd	r30, Y+8	; 0x08
    124c:	f9 85       	ldd	r31, Y+9	; 0x09
    124e:	e8 0d       	add	r30, r8
    1250:	f9 1d       	adc	r31, r9
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	68 e5       	ldi	r22, 0x58	; 88
    1258:	72 e0       	ldi	r23, 0x02	; 2
    125a:	7e de       	rcall	.-772    	; 0xf58 <_Z10MATCH_MARKii>
    125c:	89 2b       	or	r24, r25
    125e:	09 f4       	brne	.+2      	; 0x1262 <_ZN6IRrecv10decodeMainEP14decode_results+0xa8>
    1260:	bd cf       	rjmp	.-134    	; 0x11dc <_ZN6IRrecv10decodeMainEP14decode_results+0x22>
    1262:	cc 0c       	add	r12, r12
    1264:	dd 1c       	adc	r13, r13
    1266:	ee 1c       	adc	r14, r14
    1268:	ff 1c       	adc	r15, r15
    126a:	0e 5f       	subi	r16, 0xFE	; 254
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	a8 0e       	add	r10, r24
    1272:	b1 1c       	adc	r11, r1
    1274:	80 91 27 01 	lds	r24, 0x0127
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a8 16       	cp	r10, r24
    127c:	b9 06       	cpc	r11, r25
    127e:	0c f4       	brge	.+2      	; 0x1282 <_ZN6IRrecv10decodeMainEP14decode_results+0xc8>
    1280:	c1 cf       	rjmp	.-126    	; 0x1204 <_ZN6IRrecv10decodeMainEP14decode_results+0x4a>
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <_ZN6IRrecv10decodeMainEP14decode_results+0xcc>
    1284:	85 01       	movw	r16, r10
    1286:	01 50       	subi	r16, 0x01	; 1
    1288:	11 09       	sbc	r17, r1
    128a:	15 95       	asr	r17
    128c:	07 95       	ror	r16
    128e:	1f 83       	std	Y+7, r17	; 0x07
    1290:	0e 83       	std	Y+6, r16	; 0x06
    1292:	ca 82       	std	Y+2, r12	; 0x02
    1294:	db 82       	std	Y+3, r13	; 0x03
    1296:	ec 82       	std	Y+4, r14	; 0x04
    1298:	fd 82       	std	Y+5, r15	; 0x05
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	9f 90       	pop	r9
    12b2:	8f 90       	pop	r8
    12b4:	08 95       	ret

000012b6 <_ZN6IRrecvC1Ev>:
    12b6:	08 95       	ret

000012b8 <_ZN6IRrecv10enableIRInEv>:
    12b8:	f8 94       	cli
    12ba:	67 df       	rcall	.-306    	; 0x118a <_Z19TIMER_CONFIG_NORMALv>
    12bc:	84 e0       	ldi	r24, 0x04	; 4
    12be:	80 93 72 00 	sts	0x0072, r24
    12c2:	78 94       	sei
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	80 93 26 01 	sts	0x0126, r24
    12ca:	10 92 27 01 	sts	0x0127, r1
    12ce:	08 95       	ret

000012d0 <_ZN6IRrecv6resumeEv>:
//+=============================================================================
// Restart the ISR state machine
//
void  IRrecv::resume ( )
{
	irparams.rcvstate = STATE_IDLE;
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	80 93 26 01 	sts	0x0126, r24
	irparams.rawlen = 0;
    12d6:	10 92 27 01 	sts	0x0127, r1
    12da:	08 95       	ret

000012dc <_ZN6IRrecv6decodeEP14decode_results>:
// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
//
bool  IRrecv::decode (decode_results *results)
{
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	fb 01       	movw	r30, r22
	results->rawbuf   = irparams.rawbuf;
    12e4:	8a e2       	ldi	r24, 0x2A	; 42
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	91 87       	std	Z+9, r25	; 0x09
    12ea:	80 87       	std	Z+8, r24	; 0x08
	results->rawlen   = irparams.rawlen;
    12ec:	80 91 27 01 	lds	r24, 0x0127
    12f0:	82 87       	std	Z+10, r24	; 0x0a
    12f2:	13 86       	std	Z+11, r1	; 0x0b

	results->overflow = irparams.overflow;
    12f4:	80 91 f4 01 	lds	r24, 0x01F4
    12f8:	84 87       	std	Z+12, r24	; 0x0c
    12fa:	15 86       	std	Z+13, r1	; 0x0d

	if (irparams.rcvstate != STATE_STOP)  return false ;
    12fc:	80 91 26 01 	lds	r24, 0x0126
    1300:	85 30       	cpi	r24, 0x05	; 5
    1302:	31 f4       	brne	.+12     	; 0x1310 <_ZN6IRrecv6decodeEP14decode_results+0x34>

	if(!decodeMain(results)){
    1304:	ce 01       	movw	r24, r28
    1306:	59 df       	rcall	.-334    	; 0x11ba <_ZN6IRrecv10decodeMainEP14decode_results>
    1308:	81 11       	cpse	r24, r1
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <_ZN6IRrecv6decodeEP14decode_results+0x38>
		// Throw away and start over
		resume();
    130c:	ce 01       	movw	r24, r28
    130e:	e0 df       	rcall	.-64     	; 0x12d0 <_ZN6IRrecv6resumeEv>
	results->rawbuf   = irparams.rawbuf;
	results->rawlen   = irparams.rawlen;

	results->overflow = irparams.overflow;

	if (irparams.rcvstate != STATE_STOP)  return false ;
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <_ZN6IRrecv6decodeEP14decode_results+0x3a>
	if(!decodeMain(results)){
		// Throw away and start over
		resume();
		return false;
	}else{
		return true;
    1314:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret

0000131c <IrReceiveSetup>:

// ------------------------------------------------------------

extern "C" void IrSend(int data)
{
    IrRawSend(data, IR_SEND_BITS);
    131c:	6e 98       	cbi	0x0d, 6	; 13
    131e:	86 ef       	ldi	r24, 0xF6	; 246
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	ca cf       	rjmp	.-108    	; 0x12b8 <_ZN6IRrecv10enableIRInEv>

00001324 <IrRawRecive>:
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	2e 97       	sbiw	r28, 0x0e	; 14
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	8c 01       	movw	r16, r24
    133e:	be 01       	movw	r22, r28
    1340:	6f 5f       	subi	r22, 0xFF	; 255
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	86 ef       	ldi	r24, 0xF6	; 246
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	c9 df       	rcall	.-110    	; 0x12dc <_ZN6IRrecv6decodeEP14decode_results>
    134a:	88 23       	and	r24, r24
    134c:	99 f0       	breq	.+38     	; 0x1374 <IrRawRecive+0x50>
    134e:	4b 81       	ldd	r20, Y+3	; 0x03
    1350:	5c 81       	ldd	r21, Y+4	; 0x04
    1352:	6d 81       	ldd	r22, Y+5	; 0x05
    1354:	7e 81       	ldd	r23, Y+6	; 0x06
    1356:	76 95       	lsr	r23
    1358:	67 95       	ror	r22
    135a:	57 95       	ror	r21
    135c:	47 95       	ror	r20
    135e:	f8 01       	movw	r30, r16
    1360:	40 83       	st	Z, r20
    1362:	51 83       	std	Z+1, r21	; 0x01
    1364:	62 83       	std	Z+2, r22	; 0x02
    1366:	73 83       	std	Z+3, r23	; 0x03
    1368:	86 ef       	ldi	r24, 0xF6	; 246
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	b1 df       	rcall	.-158    	; 0x12d0 <_ZN6IRrecv6resumeEv>
    136e:	21 e0       	ldi	r18, 0x01	; 1
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <IrRawRecive+0x54>
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	c9 01       	movw	r24, r18
    137a:	2e 96       	adiw	r28, 0x0e	; 14
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <IrReceive>:
}

extern "C" int IrReceive()
{
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	00 d0       	rcall	.+0      	; 0x1396 <IrReceive+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <IrReceive+0x8>
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    unsigned long data;
    if(IrRawRecive(&data)){
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	c1 df       	rcall	.-126    	; 0x1324 <IrRawRecive>
    13a2:	89 2b       	or	r24, r25
    13a4:	b9 f0       	breq	.+46     	; 0x13d4 <IrReceive+0x44>
        for(i = 0; i < 16; i++)
            str[i] = (data & _BV(i)) ? '1' : '0';
        str[16] = '\0';
        fprintf(&USBSerialStream, "received : %s\r\n", str);	
#endif
        if(data & _BV(IR_SEND_BITS-1)){
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	ab 81       	ldd	r26, Y+3	; 0x03
    13ac:	bc 81       	ldd	r27, Y+4	; 0x04
    13ae:	91 ff       	sbrs	r25, 1
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <IrReceive+0x40>
            data = ~data & ((1UL << IR_SEND_BITS) - 1);
    13b2:	80 95       	com	r24
    13b4:	90 95       	com	r25
    13b6:	a0 95       	com	r26
    13b8:	b0 95       	com	r27
    13ba:	93 70       	andi	r25, 0x03	; 3
    13bc:	aa 27       	eor	r26, r26
    13be:	bb 27       	eor	r27, r27
            data += 1;
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	a1 1d       	adc	r26, r1
    13c4:	b1 1d       	adc	r27, r1
            return -(int)data;
    13c6:	22 27       	eor	r18, r18
    13c8:	33 27       	eor	r19, r19
    13ca:	28 1b       	sub	r18, r24
    13cc:	39 0b       	sbc	r19, r25
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <IrReceive+0x48>
        }else{
            return (int)data;
    13d0:	9c 01       	movw	r18, r24
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <IrReceive+0x48>
        }        
    }else{
        return IR_CODE_INVALID;
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	34 e0       	ldi	r19, 0x04	; 4
    }
}
    13d8:	c9 01       	movw	r24, r18
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <_GLOBAL__sub_I_IrSendSetup>:
#include "IRremote.h"
#include "GrapCommon.h"

static IRrecv recv;
    13e8:	86 ef       	ldi	r24, 0xF6	; 246
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	64 cf       	rjmp	.-312    	; 0x12b6 <_ZN6IRrecvC1Ev>

000013ee <SendShiftReg>:
#endif
}

void SendShiftReg(uint8_t data)
{
    SPDR = ~data;    // start transmission
    13ee:	80 95       	com	r24
    13f0:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & _BV(SPIF)) == 0);    // wait until complete
    13f2:	0d b4       	in	r0, 0x2d	; 45
    13f4:	07 fe       	sbrs	r0, 7
    13f6:	fd cf       	rjmp	.-6      	; 0x13f2 <SendShiftReg+0x4>
}
    13f8:	08 95       	ret

000013fa <Led7Seg_SetDisplayNumber>:

void Led7Seg_SetDisplayNumber(int16_t val)
{
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	9c 01       	movw	r18, r24
    1400:	37 ff       	sbrs	r19, 7
    1402:	04 c0       	rjmp	.+8      	; 0x140c <Led7Seg_SetDisplayNumber+0x12>
    1404:	88 27       	eor	r24, r24
    1406:	99 27       	eor	r25, r25
    1408:	82 1b       	sub	r24, r18
    140a:	93 0b       	sbc	r25, r19
    140c:	e0 e0       	ldi	r30, 0x00	; 0
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    if(val < 0){
        absval = -val;
    }

    for(i = 0; i < NUM_DIGITS; i++){
        int n = absval % 10;
    1410:	ca e0       	ldi	r28, 0x0A	; 10
    1412:	d0 e0       	ldi	r29, 0x00	; 0
    1414:	be 01       	movw	r22, r28
    1416:	de d2       	rcall	.+1468   	; 0x19d4 <__divmodhi4>
        g_DisplayPatterns[i] = g_LedDigitPatterns[n];
    1418:	dc 01       	movw	r26, r24
    141a:	a5 5e       	subi	r26, 0xE5	; 229
    141c:	be 4f       	sbci	r27, 0xFE	; 254
    141e:	8c 91       	ld	r24, X
    1420:	df 01       	movw	r26, r30
    1422:	aa 5e       	subi	r26, 0xEA	; 234
    1424:	bd 4f       	sbci	r27, 0xFD	; 253
    1426:	8c 93       	st	X, r24
        absval /= 10;
    1428:	cb 01       	movw	r24, r22
    142a:	31 96       	adiw	r30, 0x01	; 1
        if(absval == 0){
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	61 f4       	brne	.+24     	; 0x1448 <Led7Seg_SetDisplayNumber+0x4e>
            for(i++; i < NUM_DIGITS; i++) g_DisplayPatterns[i] = 0;
    1430:	05 c0       	rjmp	.+10     	; 0x143c <Led7Seg_SetDisplayNumber+0x42>
    1432:	df 01       	movw	r26, r30
    1434:	aa 5e       	subi	r26, 0xEA	; 234
    1436:	bd 4f       	sbci	r27, 0xFD	; 253
    1438:	1c 92       	st	X, r1
    143a:	31 96       	adiw	r30, 0x01	; 1
    143c:	e4 30       	cpi	r30, 0x04	; 4
    143e:	f1 05       	cpc	r31, r1
    1440:	c1 f7       	brne	.-16     	; 0x1432 <Led7Seg_SetDisplayNumber+0x38>
            break;
        }
    }

    if(val < 0)
    1442:	37 ff       	sbrs	r19, 7
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <Led7Seg_SetDisplayNumber+0x5c>
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <Led7Seg_SetDisplayNumber+0x56>

    if(val < 0){
        absval = -val;
    }

    for(i = 0; i < NUM_DIGITS; i++){
    1448:	e4 30       	cpi	r30, 0x04	; 4
    144a:	f1 05       	cpc	r31, r1
    144c:	19 f7       	brne	.-58     	; 0x1414 <Led7Seg_SetDisplayNumber+0x1a>
    144e:	f9 cf       	rjmp	.-14     	; 0x1442 <Led7Seg_SetDisplayNumber+0x48>
            break;
        }
    }

    if(val < 0)
        g_DisplayPatterns[NUM_DIGITS - 1] = g_MinusMarkPattern;
    1450:	80 e4       	ldi	r24, 0x40	; 64
    1452:	80 93 19 02 	sts	0x0219, r24
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <__vector_23>:

//+=============================================================================
// Interrupt Service Routine - Fires every 1ms
//
ISR (TIMER0_OVF_vect)
{
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31
    SendShiftReg(1 << g_CurrentDigit);
    147e:	20 91 f7 01 	lds	r18, 0x01F7
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	01 c0       	rjmp	.+2      	; 0x148a <__vector_23+0x2e>
    1488:	88 0f       	add	r24, r24
    148a:	2a 95       	dec	r18
    148c:	ea f7       	brpl	.-6      	; 0x1488 <__vector_23+0x2c>
    148e:	af df       	rcall	.-162    	; 0x13ee <SendShiftReg>
    SendShiftReg(g_DisplayPatterns[g_CurrentDigit]);
    1490:	e0 91 f7 01 	lds	r30, 0x01F7
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	ea 5e       	subi	r30, 0xEA	; 234
    1498:	fd 4f       	sbci	r31, 0xFD	; 253
    149a:	80 81       	ld	r24, Z
    149c:	a8 df       	rcall	.-176    	; 0x13ee <SendShiftReg>

    // Send RCK
    LED7SEG_RCK_0;
    149e:	28 98       	cbi	0x05, 0	; 5
    LED7SEG_RCK_1;
    14a0:	28 9a       	sbi	0x05, 0	; 5

    g_CurrentDigit++;
    14a2:	80 91 f7 01 	lds	r24, 0x01F7
    14a6:	8f 5f       	subi	r24, 0xFF	; 255
    14a8:	80 93 f7 01 	sts	0x01F7, r24
    if(g_CurrentDigit == NUM_DIGITS) g_CurrentDigit = 0;
    14ac:	80 91 f7 01 	lds	r24, 0x01F7
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <__vector_23+0x5c>
    14b4:	10 92 f7 01 	sts	0x01F7, r1
}
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	bf 91       	pop	r27
    14be:	af 91       	pop	r26
    14c0:	9f 91       	pop	r25
    14c2:	8f 91       	pop	r24
    14c4:	7f 91       	pop	r23
    14c6:	6f 91       	pop	r22
    14c8:	5f 91       	pop	r21
    14ca:	4f 91       	pop	r20
    14cc:	3f 91       	pop	r19
    14ce:	2f 91       	pop	r18
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <__vector_3>:

//+=============================================================================
// Interrupt Service Routine
//
ISR(INT2_vect)
{
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	2f 93       	push	r18
    14e6:	3f 93       	push	r19
    14e8:	4f 93       	push	r20
    14ea:	5f 93       	push	r21
    14ec:	6f 93       	push	r22
    14ee:	7f 93       	push	r23
    14f0:	8f 93       	push	r24
    14f2:	9f 93       	push	r25
    14f4:	af 93       	push	r26
    14f6:	bf 93       	push	r27
    14f8:	ef 93       	push	r30
    14fa:	ff 93       	push	r31
    if(bit_is_set(PIND, PORTD2)){
    14fc:	4a 9b       	sbis	0x09, 2	; 9
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <__vector_3+0x36>
        g_OldRot = bit_is_set(PIND, PORTD3) ? 'R' : 'L';
    1500:	4b 9b       	sbis	0x09, 3	; 9
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <__vector_3+0x2e>
    1504:	82 e5       	ldi	r24, 0x52	; 82
    1506:	01 c0       	rjmp	.+2      	; 0x150a <__vector_3+0x30>
    1508:	8c e4       	ldi	r24, 0x4C	; 76
    150a:	80 93 fa 01 	sts	0x01FA, r24
    150e:	20 c0       	rjmp	.+64     	; 0x1550 <__vector_3+0x76>
    }else{
        if(bit_is_set(PIND, PORTD3)){
    1510:	4b 9b       	sbis	0x09, 3	; 9
    1512:	0a c0       	rjmp	.+20     	; 0x1528 <__vector_3+0x4e>
            if(g_OldRot == 'L'){
    1514:	80 91 fa 01 	lds	r24, 0x01FA
    1518:	8c 34       	cpi	r24, 0x4C	; 76
    151a:	c1 f4       	brne	.+48     	; 0x154c <__vector_3+0x72>
                g_Value--;
    151c:	80 91 f8 01 	lds	r24, 0x01F8
    1520:	90 91 f9 01 	lds	r25, 0x01F9
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	09 c0       	rjmp	.+18     	; 0x153a <__vector_3+0x60>
                Led7Seg_SetDisplayNumber(g_Value);
            }
        }else{
            if(g_OldRot == 'R'){
    1528:	80 91 fa 01 	lds	r24, 0x01FA
    152c:	82 35       	cpi	r24, 0x52	; 82
    152e:	71 f4       	brne	.+28     	; 0x154c <__vector_3+0x72>
                g_Value++;
    1530:	80 91 f8 01 	lds	r24, 0x01F8
    1534:	90 91 f9 01 	lds	r25, 0x01F9
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	90 93 f9 01 	sts	0x01F9, r25
    153e:	80 93 f8 01 	sts	0x01F8, r24
                Led7Seg_SetDisplayNumber(g_Value);
    1542:	80 91 f8 01 	lds	r24, 0x01F8
    1546:	90 91 f9 01 	lds	r25, 0x01F9
    154a:	57 df       	rcall	.-338    	; 0x13fa <Led7Seg_SetDisplayNumber>
            }
        }
        g_OldRot = 0;
    154c:	10 92 fa 01 	sts	0x01FA, r1
    }
}
    1550:	ff 91       	pop	r31
    1552:	ef 91       	pop	r30
    1554:	bf 91       	pop	r27
    1556:	af 91       	pop	r26
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	7f 91       	pop	r23
    155e:	6f 91       	pop	r22
    1560:	5f 91       	pop	r21
    1562:	4f 91       	pop	r20
    1564:	3f 91       	pop	r19
    1566:	2f 91       	pop	r18
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <MotorPwm>:
	MotorPwm(0);
}

void MotorPwm(int16_t x)
{
	if(x >= 0)
    1572:	97 fd       	sbrc	r25, 7
    1574:	02 c0       	rjmp	.+4      	; 0x157a <MotorPwm+0x8>
		MOTOR_INV_0;
    1576:	2a 98       	cbi	0x05, 2	; 5
    1578:	01 c0       	rjmp	.+2      	; 0x157c <MotorPwm+0xa>
	else
		MOTOR_INV_1;
    157a:	2a 9a       	sbi	0x05, 2	; 5
	
	const uint8_t pwmval = (x >= 0) ? x : -x;
    157c:	9c 01       	movw	r18, r24
    157e:	97 ff       	sbrs	r25, 7
    1580:	04 c0       	rjmp	.+8      	; 0x158a <MotorPwm+0x18>
    1582:	22 27       	eor	r18, r18
    1584:	33 27       	eor	r19, r19
    1586:	28 1b       	sub	r18, r24
    1588:	39 0b       	sbc	r19, r25
		}else{
			LEDR_OFF;
			LEDB_ON;
		}
	}
}
    158a:	a9 01       	movw	r20, r18
    158c:	55 27       	eor	r21, r21
		MOTOR_INV_0;
	else
		MOTOR_INV_1;
	
	const uint8_t pwmval = (x >= 0) ? x : -x;
	OCR1A = pwmval;
    158e:	50 93 89 00 	sts	0x0089, r21
    1592:	40 93 88 00 	sts	0x0088, r20

    if(pwmval == 0){
    1596:	21 11       	cpse	r18, r1
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <MotorPwm+0x2e>
        MOTOR_DISABLE;
    159a:	2c 98       	cbi	0x05, 4	; 5
		LEDR_OFF;
    159c:	8c 98       	cbi	0x11, 4	; 17
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <MotorPwm+0x36>
		LEDB_OFF;
	}else{
        MOTOR_ENABLE;
    15a0:	2c 9a       	sbi	0x05, 4	; 5
		if(x >= 0){
    15a2:	97 fd       	sbrc	r25, 7
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <MotorPwm+0x3a>
			LEDR_ON;
    15a6:	8c 9a       	sbi	0x11, 4	; 17
			LEDB_OFF;
    15a8:	8e 98       	cbi	0x11, 6	; 17
    15aa:	08 95       	ret
		}else{
			LEDR_OFF;
    15ac:	8c 98       	cbi	0x11, 4	; 17
			LEDB_ON;
    15ae:	8e 9a       	sbi	0x11, 6	; 17
    15b0:	08 95       	ret

000015b2 <InitMotor>:
#include "GrapCommon.h"

void InitMotor()
{
	// Motor PWM (OC1A) ------------------------------------------------------------
	TCCR1A = _BV(WGM10) | _BV(WGM12) | _BV(COM1A1);	// Fast PWM, 8-bit, Clear on compare match, set at TOP(=0xFF)
    15b2:	89 e8       	ldi	r24, 0x89	; 137
    15b4:	80 93 80 00 	sts	0x0080, r24
	//TCCR1B = _BV(CS12) | _BV(CS10);	// Prescaler 1/1024
	TCCR1B = _BV(CS12);	// Prescaler 1/256
    15b8:	84 e0       	ldi	r24, 0x04	; 4
    15ba:	80 93 81 00 	sts	0x0081, r24
	//TCCR1B = _BV(CS11) | _BV(CS10);	// Prescaler 1/64
	//TCCR1B = _BV(CS11);	// Prescaler 1/8
	TCCR1C = 0;
    15be:	10 92 82 00 	sts	0x0082, r1

	sbi(DDRB, 5);	// PWM
    15c2:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB, 4);	// ENABLE
    15c4:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB, 2);	// INV
    15c6:	22 9a       	sbi	0x04, 2	; 4

	MotorPwm(0);
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	d2 cf       	rjmp	.-92     	; 0x1572 <MotorPwm>

000015ce <__subsf3>:
    15ce:	50 58       	subi	r21, 0x80	; 128

000015d0 <__addsf3>:
    15d0:	bb 27       	eor	r27, r27
    15d2:	aa 27       	eor	r26, r26
    15d4:	0e d0       	rcall	.+28     	; 0x15f2 <__addsf3x>
    15d6:	4d c1       	rjmp	.+666    	; 0x1872 <__fp_round>
    15d8:	3e d1       	rcall	.+636    	; 0x1856 <__fp_pscA>
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__addsf3+0x18>
    15dc:	43 d1       	rcall	.+646    	; 0x1864 <__fp_pscB>
    15de:	20 f0       	brcs	.+8      	; 0x15e8 <__addsf3+0x18>
    15e0:	31 f4       	brne	.+12     	; 0x15ee <__addsf3+0x1e>
    15e2:	9f 3f       	cpi	r25, 0xFF	; 255
    15e4:	11 f4       	brne	.+4      	; 0x15ea <__addsf3+0x1a>
    15e6:	1e f4       	brtc	.+6      	; 0x15ee <__addsf3+0x1e>
    15e8:	33 c1       	rjmp	.+614    	; 0x1850 <__fp_nan>
    15ea:	0e f4       	brtc	.+2      	; 0x15ee <__addsf3+0x1e>
    15ec:	e0 95       	com	r30
    15ee:	e7 fb       	bst	r30, 7
    15f0:	29 c1       	rjmp	.+594    	; 0x1844 <__fp_inf>

000015f2 <__addsf3x>:
    15f2:	e9 2f       	mov	r30, r25
    15f4:	4f d1       	rcall	.+670    	; 0x1894 <__fp_split3>
    15f6:	80 f3       	brcs	.-32     	; 0x15d8 <__addsf3+0x8>
    15f8:	ba 17       	cp	r27, r26
    15fa:	62 07       	cpc	r22, r18
    15fc:	73 07       	cpc	r23, r19
    15fe:	84 07       	cpc	r24, r20
    1600:	95 07       	cpc	r25, r21
    1602:	18 f0       	brcs	.+6      	; 0x160a <__addsf3x+0x18>
    1604:	71 f4       	brne	.+28     	; 0x1622 <__addsf3x+0x30>
    1606:	9e f5       	brtc	.+102    	; 0x166e <__addsf3x+0x7c>
    1608:	67 c1       	rjmp	.+718    	; 0x18d8 <__fp_zero>
    160a:	0e f4       	brtc	.+2      	; 0x160e <__addsf3x+0x1c>
    160c:	e0 95       	com	r30
    160e:	0b 2e       	mov	r0, r27
    1610:	ba 2f       	mov	r27, r26
    1612:	a0 2d       	mov	r26, r0
    1614:	0b 01       	movw	r0, r22
    1616:	b9 01       	movw	r22, r18
    1618:	90 01       	movw	r18, r0
    161a:	0c 01       	movw	r0, r24
    161c:	ca 01       	movw	r24, r20
    161e:	a0 01       	movw	r20, r0
    1620:	11 24       	eor	r1, r1
    1622:	ff 27       	eor	r31, r31
    1624:	59 1b       	sub	r21, r25
    1626:	99 f0       	breq	.+38     	; 0x164e <__addsf3x+0x5c>
    1628:	59 3f       	cpi	r21, 0xF9	; 249
    162a:	50 f4       	brcc	.+20     	; 0x1640 <__addsf3x+0x4e>
    162c:	50 3e       	cpi	r21, 0xE0	; 224
    162e:	68 f1       	brcs	.+90     	; 0x168a <__addsf3x+0x98>
    1630:	1a 16       	cp	r1, r26
    1632:	f0 40       	sbci	r31, 0x00	; 0
    1634:	a2 2f       	mov	r26, r18
    1636:	23 2f       	mov	r18, r19
    1638:	34 2f       	mov	r19, r20
    163a:	44 27       	eor	r20, r20
    163c:	58 5f       	subi	r21, 0xF8	; 248
    163e:	f3 cf       	rjmp	.-26     	; 0x1626 <__addsf3x+0x34>
    1640:	46 95       	lsr	r20
    1642:	37 95       	ror	r19
    1644:	27 95       	ror	r18
    1646:	a7 95       	ror	r26
    1648:	f0 40       	sbci	r31, 0x00	; 0
    164a:	53 95       	inc	r21
    164c:	c9 f7       	brne	.-14     	; 0x1640 <__addsf3x+0x4e>
    164e:	7e f4       	brtc	.+30     	; 0x166e <__addsf3x+0x7c>
    1650:	1f 16       	cp	r1, r31
    1652:	ba 0b       	sbc	r27, r26
    1654:	62 0b       	sbc	r22, r18
    1656:	73 0b       	sbc	r23, r19
    1658:	84 0b       	sbc	r24, r20
    165a:	ba f0       	brmi	.+46     	; 0x168a <__addsf3x+0x98>
    165c:	91 50       	subi	r25, 0x01	; 1
    165e:	a1 f0       	breq	.+40     	; 0x1688 <__addsf3x+0x96>
    1660:	ff 0f       	add	r31, r31
    1662:	bb 1f       	adc	r27, r27
    1664:	66 1f       	adc	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	88 1f       	adc	r24, r24
    166a:	c2 f7       	brpl	.-16     	; 0x165c <__addsf3x+0x6a>
    166c:	0e c0       	rjmp	.+28     	; 0x168a <__addsf3x+0x98>
    166e:	ba 0f       	add	r27, r26
    1670:	62 1f       	adc	r22, r18
    1672:	73 1f       	adc	r23, r19
    1674:	84 1f       	adc	r24, r20
    1676:	48 f4       	brcc	.+18     	; 0x168a <__addsf3x+0x98>
    1678:	87 95       	ror	r24
    167a:	77 95       	ror	r23
    167c:	67 95       	ror	r22
    167e:	b7 95       	ror	r27
    1680:	f7 95       	ror	r31
    1682:	9e 3f       	cpi	r25, 0xFE	; 254
    1684:	08 f0       	brcs	.+2      	; 0x1688 <__addsf3x+0x96>
    1686:	b3 cf       	rjmp	.-154    	; 0x15ee <__addsf3+0x1e>
    1688:	93 95       	inc	r25
    168a:	88 0f       	add	r24, r24
    168c:	08 f0       	brcs	.+2      	; 0x1690 <__addsf3x+0x9e>
    168e:	99 27       	eor	r25, r25
    1690:	ee 0f       	add	r30, r30
    1692:	97 95       	ror	r25
    1694:	87 95       	ror	r24
    1696:	08 95       	ret

00001698 <__divsf3>:
    1698:	0c d0       	rcall	.+24     	; 0x16b2 <__divsf3x>
    169a:	eb c0       	rjmp	.+470    	; 0x1872 <__fp_round>
    169c:	e3 d0       	rcall	.+454    	; 0x1864 <__fp_pscB>
    169e:	40 f0       	brcs	.+16     	; 0x16b0 <__divsf3+0x18>
    16a0:	da d0       	rcall	.+436    	; 0x1856 <__fp_pscA>
    16a2:	30 f0       	brcs	.+12     	; 0x16b0 <__divsf3+0x18>
    16a4:	21 f4       	brne	.+8      	; 0x16ae <__divsf3+0x16>
    16a6:	5f 3f       	cpi	r21, 0xFF	; 255
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <__divsf3+0x18>
    16aa:	cc c0       	rjmp	.+408    	; 0x1844 <__fp_inf>
    16ac:	51 11       	cpse	r21, r1
    16ae:	15 c1       	rjmp	.+554    	; 0x18da <__fp_szero>
    16b0:	cf c0       	rjmp	.+414    	; 0x1850 <__fp_nan>

000016b2 <__divsf3x>:
    16b2:	f0 d0       	rcall	.+480    	; 0x1894 <__fp_split3>
    16b4:	98 f3       	brcs	.-26     	; 0x169c <__divsf3+0x4>

000016b6 <__divsf3_pse>:
    16b6:	99 23       	and	r25, r25
    16b8:	c9 f3       	breq	.-14     	; 0x16ac <__divsf3+0x14>
    16ba:	55 23       	and	r21, r21
    16bc:	b1 f3       	breq	.-20     	; 0x16aa <__divsf3+0x12>
    16be:	95 1b       	sub	r25, r21
    16c0:	55 0b       	sbc	r21, r21
    16c2:	bb 27       	eor	r27, r27
    16c4:	aa 27       	eor	r26, r26
    16c6:	62 17       	cp	r22, r18
    16c8:	73 07       	cpc	r23, r19
    16ca:	84 07       	cpc	r24, r20
    16cc:	38 f0       	brcs	.+14     	; 0x16dc <__divsf3_pse+0x26>
    16ce:	9f 5f       	subi	r25, 0xFF	; 255
    16d0:	5f 4f       	sbci	r21, 0xFF	; 255
    16d2:	22 0f       	add	r18, r18
    16d4:	33 1f       	adc	r19, r19
    16d6:	44 1f       	adc	r20, r20
    16d8:	aa 1f       	adc	r26, r26
    16da:	a9 f3       	breq	.-22     	; 0x16c6 <__divsf3_pse+0x10>
    16dc:	33 d0       	rcall	.+102    	; 0x1744 <__divsf3_pse+0x8e>
    16de:	0e 2e       	mov	r0, r30
    16e0:	3a f0       	brmi	.+14     	; 0x16f0 <__divsf3_pse+0x3a>
    16e2:	e0 e8       	ldi	r30, 0x80	; 128
    16e4:	30 d0       	rcall	.+96     	; 0x1746 <__divsf3_pse+0x90>
    16e6:	91 50       	subi	r25, 0x01	; 1
    16e8:	50 40       	sbci	r21, 0x00	; 0
    16ea:	e6 95       	lsr	r30
    16ec:	00 1c       	adc	r0, r0
    16ee:	ca f7       	brpl	.-14     	; 0x16e2 <__divsf3_pse+0x2c>
    16f0:	29 d0       	rcall	.+82     	; 0x1744 <__divsf3_pse+0x8e>
    16f2:	fe 2f       	mov	r31, r30
    16f4:	27 d0       	rcall	.+78     	; 0x1744 <__divsf3_pse+0x8e>
    16f6:	66 0f       	add	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	88 1f       	adc	r24, r24
    16fc:	bb 1f       	adc	r27, r27
    16fe:	26 17       	cp	r18, r22
    1700:	37 07       	cpc	r19, r23
    1702:	48 07       	cpc	r20, r24
    1704:	ab 07       	cpc	r26, r27
    1706:	b0 e8       	ldi	r27, 0x80	; 128
    1708:	09 f0       	breq	.+2      	; 0x170c <__divsf3_pse+0x56>
    170a:	bb 0b       	sbc	r27, r27
    170c:	80 2d       	mov	r24, r0
    170e:	bf 01       	movw	r22, r30
    1710:	ff 27       	eor	r31, r31
    1712:	93 58       	subi	r25, 0x83	; 131
    1714:	5f 4f       	sbci	r21, 0xFF	; 255
    1716:	2a f0       	brmi	.+10     	; 0x1722 <__divsf3_pse+0x6c>
    1718:	9e 3f       	cpi	r25, 0xFE	; 254
    171a:	51 05       	cpc	r21, r1
    171c:	68 f0       	brcs	.+26     	; 0x1738 <__divsf3_pse+0x82>
    171e:	92 c0       	rjmp	.+292    	; 0x1844 <__fp_inf>
    1720:	dc c0       	rjmp	.+440    	; 0x18da <__fp_szero>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	ec f3       	brlt	.-6      	; 0x1720 <__divsf3_pse+0x6a>
    1726:	98 3e       	cpi	r25, 0xE8	; 232
    1728:	dc f3       	brlt	.-10     	; 0x1720 <__divsf3_pse+0x6a>
    172a:	86 95       	lsr	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	b7 95       	ror	r27
    1732:	f7 95       	ror	r31
    1734:	9f 5f       	subi	r25, 0xFF	; 255
    1736:	c9 f7       	brne	.-14     	; 0x172a <__divsf3_pse+0x74>
    1738:	88 0f       	add	r24, r24
    173a:	91 1d       	adc	r25, r1
    173c:	96 95       	lsr	r25
    173e:	87 95       	ror	r24
    1740:	97 f9       	bld	r25, 7
    1742:	08 95       	ret
    1744:	e1 e0       	ldi	r30, 0x01	; 1
    1746:	66 0f       	add	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	bb 1f       	adc	r27, r27
    174e:	62 17       	cp	r22, r18
    1750:	73 07       	cpc	r23, r19
    1752:	84 07       	cpc	r24, r20
    1754:	ba 07       	cpc	r27, r26
    1756:	20 f0       	brcs	.+8      	; 0x1760 <__divsf3_pse+0xaa>
    1758:	62 1b       	sub	r22, r18
    175a:	73 0b       	sbc	r23, r19
    175c:	84 0b       	sbc	r24, r20
    175e:	ba 0b       	sbc	r27, r26
    1760:	ee 1f       	adc	r30, r30
    1762:	88 f7       	brcc	.-30     	; 0x1746 <__divsf3_pse+0x90>
    1764:	e0 95       	com	r30
    1766:	08 95       	ret

00001768 <__fixsfsi>:
    1768:	04 d0       	rcall	.+8      	; 0x1772 <__fixunssfsi>
    176a:	68 94       	set
    176c:	b1 11       	cpse	r27, r1
    176e:	b5 c0       	rjmp	.+362    	; 0x18da <__fp_szero>
    1770:	08 95       	ret

00001772 <__fixunssfsi>:
    1772:	98 d0       	rcall	.+304    	; 0x18a4 <__fp_splitA>
    1774:	88 f0       	brcs	.+34     	; 0x1798 <__fixunssfsi+0x26>
    1776:	9f 57       	subi	r25, 0x7F	; 127
    1778:	90 f0       	brcs	.+36     	; 0x179e <__fixunssfsi+0x2c>
    177a:	b9 2f       	mov	r27, r25
    177c:	99 27       	eor	r25, r25
    177e:	b7 51       	subi	r27, 0x17	; 23
    1780:	a0 f0       	brcs	.+40     	; 0x17aa <__fixunssfsi+0x38>
    1782:	d1 f0       	breq	.+52     	; 0x17b8 <__fixunssfsi+0x46>
    1784:	66 0f       	add	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	1a f0       	brmi	.+6      	; 0x1794 <__fixunssfsi+0x22>
    178e:	ba 95       	dec	r27
    1790:	c9 f7       	brne	.-14     	; 0x1784 <__fixunssfsi+0x12>
    1792:	12 c0       	rjmp	.+36     	; 0x17b8 <__fixunssfsi+0x46>
    1794:	b1 30       	cpi	r27, 0x01	; 1
    1796:	81 f0       	breq	.+32     	; 0x17b8 <__fixunssfsi+0x46>
    1798:	9f d0       	rcall	.+318    	; 0x18d8 <__fp_zero>
    179a:	b1 e0       	ldi	r27, 0x01	; 1
    179c:	08 95       	ret
    179e:	9c c0       	rjmp	.+312    	; 0x18d8 <__fp_zero>
    17a0:	67 2f       	mov	r22, r23
    17a2:	78 2f       	mov	r23, r24
    17a4:	88 27       	eor	r24, r24
    17a6:	b8 5f       	subi	r27, 0xF8	; 248
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <__fixunssfsi+0x46>
    17aa:	b9 3f       	cpi	r27, 0xF9	; 249
    17ac:	cc f3       	brlt	.-14     	; 0x17a0 <__fixunssfsi+0x2e>
    17ae:	86 95       	lsr	r24
    17b0:	77 95       	ror	r23
    17b2:	67 95       	ror	r22
    17b4:	b3 95       	inc	r27
    17b6:	d9 f7       	brne	.-10     	; 0x17ae <__fixunssfsi+0x3c>
    17b8:	3e f4       	brtc	.+14     	; 0x17c8 <__fixunssfsi+0x56>
    17ba:	90 95       	com	r25
    17bc:	80 95       	com	r24
    17be:	70 95       	com	r23
    17c0:	61 95       	neg	r22
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	8f 4f       	sbci	r24, 0xFF	; 255
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	08 95       	ret

000017ca <__floatunsisf>:
    17ca:	e8 94       	clt
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <__floatsisf+0x12>

000017ce <__floatsisf>:
    17ce:	97 fb       	bst	r25, 7
    17d0:	3e f4       	brtc	.+14     	; 0x17e0 <__floatsisf+0x12>
    17d2:	90 95       	com	r25
    17d4:	80 95       	com	r24
    17d6:	70 95       	com	r23
    17d8:	61 95       	neg	r22
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	8f 4f       	sbci	r24, 0xFF	; 255
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	99 23       	and	r25, r25
    17e2:	a9 f0       	breq	.+42     	; 0x180e <__floatsisf+0x40>
    17e4:	f9 2f       	mov	r31, r25
    17e6:	96 e9       	ldi	r25, 0x96	; 150
    17e8:	bb 27       	eor	r27, r27
    17ea:	93 95       	inc	r25
    17ec:	f6 95       	lsr	r31
    17ee:	87 95       	ror	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	b7 95       	ror	r27
    17f6:	f1 11       	cpse	r31, r1
    17f8:	f8 cf       	rjmp	.-16     	; 0x17ea <__floatsisf+0x1c>
    17fa:	fa f4       	brpl	.+62     	; 0x183a <__floatsisf+0x6c>
    17fc:	bb 0f       	add	r27, r27
    17fe:	11 f4       	brne	.+4      	; 0x1804 <__floatsisf+0x36>
    1800:	60 ff       	sbrs	r22, 0
    1802:	1b c0       	rjmp	.+54     	; 0x183a <__floatsisf+0x6c>
    1804:	6f 5f       	subi	r22, 0xFF	; 255
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	8f 4f       	sbci	r24, 0xFF	; 255
    180a:	9f 4f       	sbci	r25, 0xFF	; 255
    180c:	16 c0       	rjmp	.+44     	; 0x183a <__floatsisf+0x6c>
    180e:	88 23       	and	r24, r24
    1810:	11 f0       	breq	.+4      	; 0x1816 <__floatsisf+0x48>
    1812:	96 e9       	ldi	r25, 0x96	; 150
    1814:	11 c0       	rjmp	.+34     	; 0x1838 <__floatsisf+0x6a>
    1816:	77 23       	and	r23, r23
    1818:	21 f0       	breq	.+8      	; 0x1822 <__floatsisf+0x54>
    181a:	9e e8       	ldi	r25, 0x8E	; 142
    181c:	87 2f       	mov	r24, r23
    181e:	76 2f       	mov	r23, r22
    1820:	05 c0       	rjmp	.+10     	; 0x182c <__floatsisf+0x5e>
    1822:	66 23       	and	r22, r22
    1824:	71 f0       	breq	.+28     	; 0x1842 <__floatsisf+0x74>
    1826:	96 e8       	ldi	r25, 0x86	; 134
    1828:	86 2f       	mov	r24, r22
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	2a f0       	brmi	.+10     	; 0x183a <__floatsisf+0x6c>
    1830:	9a 95       	dec	r25
    1832:	66 0f       	add	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	da f7       	brpl	.-10     	; 0x1830 <__floatsisf+0x62>
    183a:	88 0f       	add	r24, r24
    183c:	96 95       	lsr	r25
    183e:	87 95       	ror	r24
    1840:	97 f9       	bld	r25, 7
    1842:	08 95       	ret

00001844 <__fp_inf>:
    1844:	97 f9       	bld	r25, 7
    1846:	9f 67       	ori	r25, 0x7F	; 127
    1848:	80 e8       	ldi	r24, 0x80	; 128
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	08 95       	ret

00001850 <__fp_nan>:
    1850:	9f ef       	ldi	r25, 0xFF	; 255
    1852:	80 ec       	ldi	r24, 0xC0	; 192
    1854:	08 95       	ret

00001856 <__fp_pscA>:
    1856:	00 24       	eor	r0, r0
    1858:	0a 94       	dec	r0
    185a:	16 16       	cp	r1, r22
    185c:	17 06       	cpc	r1, r23
    185e:	18 06       	cpc	r1, r24
    1860:	09 06       	cpc	r0, r25
    1862:	08 95       	ret

00001864 <__fp_pscB>:
    1864:	00 24       	eor	r0, r0
    1866:	0a 94       	dec	r0
    1868:	12 16       	cp	r1, r18
    186a:	13 06       	cpc	r1, r19
    186c:	14 06       	cpc	r1, r20
    186e:	05 06       	cpc	r0, r21
    1870:	08 95       	ret

00001872 <__fp_round>:
    1872:	09 2e       	mov	r0, r25
    1874:	03 94       	inc	r0
    1876:	00 0c       	add	r0, r0
    1878:	11 f4       	brne	.+4      	; 0x187e <__fp_round+0xc>
    187a:	88 23       	and	r24, r24
    187c:	52 f0       	brmi	.+20     	; 0x1892 <__fp_round+0x20>
    187e:	bb 0f       	add	r27, r27
    1880:	40 f4       	brcc	.+16     	; 0x1892 <__fp_round+0x20>
    1882:	bf 2b       	or	r27, r31
    1884:	11 f4       	brne	.+4      	; 0x188a <__fp_round+0x18>
    1886:	60 ff       	sbrs	r22, 0
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <__fp_round+0x20>
    188a:	6f 5f       	subi	r22, 0xFF	; 255
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	08 95       	ret

00001894 <__fp_split3>:
    1894:	57 fd       	sbrc	r21, 7
    1896:	90 58       	subi	r25, 0x80	; 128
    1898:	44 0f       	add	r20, r20
    189a:	55 1f       	adc	r21, r21
    189c:	59 f0       	breq	.+22     	; 0x18b4 <__fp_splitA+0x10>
    189e:	5f 3f       	cpi	r21, 0xFF	; 255
    18a0:	71 f0       	breq	.+28     	; 0x18be <__fp_splitA+0x1a>
    18a2:	47 95       	ror	r20

000018a4 <__fp_splitA>:
    18a4:	88 0f       	add	r24, r24
    18a6:	97 fb       	bst	r25, 7
    18a8:	99 1f       	adc	r25, r25
    18aa:	61 f0       	breq	.+24     	; 0x18c4 <__fp_splitA+0x20>
    18ac:	9f 3f       	cpi	r25, 0xFF	; 255
    18ae:	79 f0       	breq	.+30     	; 0x18ce <__fp_splitA+0x2a>
    18b0:	87 95       	ror	r24
    18b2:	08 95       	ret
    18b4:	12 16       	cp	r1, r18
    18b6:	13 06       	cpc	r1, r19
    18b8:	14 06       	cpc	r1, r20
    18ba:	55 1f       	adc	r21, r21
    18bc:	f2 cf       	rjmp	.-28     	; 0x18a2 <__fp_split3+0xe>
    18be:	46 95       	lsr	r20
    18c0:	f1 df       	rcall	.-30     	; 0x18a4 <__fp_splitA>
    18c2:	08 c0       	rjmp	.+16     	; 0x18d4 <__fp_splitA+0x30>
    18c4:	16 16       	cp	r1, r22
    18c6:	17 06       	cpc	r1, r23
    18c8:	18 06       	cpc	r1, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	f1 cf       	rjmp	.-30     	; 0x18b0 <__fp_splitA+0xc>
    18ce:	86 95       	lsr	r24
    18d0:	71 05       	cpc	r23, r1
    18d2:	61 05       	cpc	r22, r1
    18d4:	08 94       	sec
    18d6:	08 95       	ret

000018d8 <__fp_zero>:
    18d8:	e8 94       	clt

000018da <__fp_szero>:
    18da:	bb 27       	eor	r27, r27
    18dc:	66 27       	eor	r22, r22
    18de:	77 27       	eor	r23, r23
    18e0:	cb 01       	movw	r24, r22
    18e2:	97 f9       	bld	r25, 7
    18e4:	08 95       	ret

000018e6 <__mulsf3>:
    18e6:	0b d0       	rcall	.+22     	; 0x18fe <__mulsf3x>
    18e8:	c4 cf       	rjmp	.-120    	; 0x1872 <__fp_round>
    18ea:	b5 df       	rcall	.-150    	; 0x1856 <__fp_pscA>
    18ec:	28 f0       	brcs	.+10     	; 0x18f8 <__mulsf3+0x12>
    18ee:	ba df       	rcall	.-140    	; 0x1864 <__fp_pscB>
    18f0:	18 f0       	brcs	.+6      	; 0x18f8 <__mulsf3+0x12>
    18f2:	95 23       	and	r25, r21
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <__mulsf3+0x12>
    18f6:	a6 cf       	rjmp	.-180    	; 0x1844 <__fp_inf>
    18f8:	ab cf       	rjmp	.-170    	; 0x1850 <__fp_nan>
    18fa:	11 24       	eor	r1, r1
    18fc:	ee cf       	rjmp	.-36     	; 0x18da <__fp_szero>

000018fe <__mulsf3x>:
    18fe:	ca df       	rcall	.-108    	; 0x1894 <__fp_split3>
    1900:	a0 f3       	brcs	.-24     	; 0x18ea <__mulsf3+0x4>

00001902 <__mulsf3_pse>:
    1902:	95 9f       	mul	r25, r21
    1904:	d1 f3       	breq	.-12     	; 0x18fa <__mulsf3+0x14>
    1906:	95 0f       	add	r25, r21
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	55 1f       	adc	r21, r21
    190c:	62 9f       	mul	r22, r18
    190e:	f0 01       	movw	r30, r0
    1910:	72 9f       	mul	r23, r18
    1912:	bb 27       	eor	r27, r27
    1914:	f0 0d       	add	r31, r0
    1916:	b1 1d       	adc	r27, r1
    1918:	63 9f       	mul	r22, r19
    191a:	aa 27       	eor	r26, r26
    191c:	f0 0d       	add	r31, r0
    191e:	b1 1d       	adc	r27, r1
    1920:	aa 1f       	adc	r26, r26
    1922:	64 9f       	mul	r22, r20
    1924:	66 27       	eor	r22, r22
    1926:	b0 0d       	add	r27, r0
    1928:	a1 1d       	adc	r26, r1
    192a:	66 1f       	adc	r22, r22
    192c:	82 9f       	mul	r24, r18
    192e:	22 27       	eor	r18, r18
    1930:	b0 0d       	add	r27, r0
    1932:	a1 1d       	adc	r26, r1
    1934:	62 1f       	adc	r22, r18
    1936:	73 9f       	mul	r23, r19
    1938:	b0 0d       	add	r27, r0
    193a:	a1 1d       	adc	r26, r1
    193c:	62 1f       	adc	r22, r18
    193e:	83 9f       	mul	r24, r19
    1940:	a0 0d       	add	r26, r0
    1942:	61 1d       	adc	r22, r1
    1944:	22 1f       	adc	r18, r18
    1946:	74 9f       	mul	r23, r20
    1948:	33 27       	eor	r19, r19
    194a:	a0 0d       	add	r26, r0
    194c:	61 1d       	adc	r22, r1
    194e:	23 1f       	adc	r18, r19
    1950:	84 9f       	mul	r24, r20
    1952:	60 0d       	add	r22, r0
    1954:	21 1d       	adc	r18, r1
    1956:	82 2f       	mov	r24, r18
    1958:	76 2f       	mov	r23, r22
    195a:	6a 2f       	mov	r22, r26
    195c:	11 24       	eor	r1, r1
    195e:	9f 57       	subi	r25, 0x7F	; 127
    1960:	50 40       	sbci	r21, 0x00	; 0
    1962:	8a f0       	brmi	.+34     	; 0x1986 <__mulsf3_pse+0x84>
    1964:	e1 f0       	breq	.+56     	; 0x199e <__mulsf3_pse+0x9c>
    1966:	88 23       	and	r24, r24
    1968:	4a f0       	brmi	.+18     	; 0x197c <__mulsf3_pse+0x7a>
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	bb 1f       	adc	r27, r27
    1970:	66 1f       	adc	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	91 50       	subi	r25, 0x01	; 1
    1978:	50 40       	sbci	r21, 0x00	; 0
    197a:	a9 f7       	brne	.-22     	; 0x1966 <__mulsf3_pse+0x64>
    197c:	9e 3f       	cpi	r25, 0xFE	; 254
    197e:	51 05       	cpc	r21, r1
    1980:	70 f0       	brcs	.+28     	; 0x199e <__mulsf3_pse+0x9c>
    1982:	60 cf       	rjmp	.-320    	; 0x1844 <__fp_inf>
    1984:	aa cf       	rjmp	.-172    	; 0x18da <__fp_szero>
    1986:	5f 3f       	cpi	r21, 0xFF	; 255
    1988:	ec f3       	brlt	.-6      	; 0x1984 <__mulsf3_pse+0x82>
    198a:	98 3e       	cpi	r25, 0xE8	; 232
    198c:	dc f3       	brlt	.-10     	; 0x1984 <__mulsf3_pse+0x82>
    198e:	86 95       	lsr	r24
    1990:	77 95       	ror	r23
    1992:	67 95       	ror	r22
    1994:	b7 95       	ror	r27
    1996:	f7 95       	ror	r31
    1998:	e7 95       	ror	r30
    199a:	9f 5f       	subi	r25, 0xFF	; 255
    199c:	c1 f7       	brne	.-16     	; 0x198e <__mulsf3_pse+0x8c>
    199e:	fe 2b       	or	r31, r30
    19a0:	88 0f       	add	r24, r24
    19a2:	91 1d       	adc	r25, r1
    19a4:	96 95       	lsr	r25
    19a6:	87 95       	ror	r24
    19a8:	97 f9       	bld	r25, 7
    19aa:	08 95       	ret

000019ac <__udivmodhi4>:
    19ac:	aa 1b       	sub	r26, r26
    19ae:	bb 1b       	sub	r27, r27
    19b0:	51 e1       	ldi	r21, 0x11	; 17
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <__udivmodhi4_ep>

000019b4 <__udivmodhi4_loop>:
    19b4:	aa 1f       	adc	r26, r26
    19b6:	bb 1f       	adc	r27, r27
    19b8:	a6 17       	cp	r26, r22
    19ba:	b7 07       	cpc	r27, r23
    19bc:	10 f0       	brcs	.+4      	; 0x19c2 <__udivmodhi4_ep>
    19be:	a6 1b       	sub	r26, r22
    19c0:	b7 0b       	sbc	r27, r23

000019c2 <__udivmodhi4_ep>:
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	5a 95       	dec	r21
    19c8:	a9 f7       	brne	.-22     	; 0x19b4 <__udivmodhi4_loop>
    19ca:	80 95       	com	r24
    19cc:	90 95       	com	r25
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	08 95       	ret

000019d4 <__divmodhi4>:
    19d4:	97 fb       	bst	r25, 7
    19d6:	07 2e       	mov	r0, r23
    19d8:	16 f4       	brtc	.+4      	; 0x19de <__divmodhi4+0xa>
    19da:	00 94       	com	r0
    19dc:	06 d0       	rcall	.+12     	; 0x19ea <__divmodhi4_neg1>
    19de:	77 fd       	sbrc	r23, 7
    19e0:	08 d0       	rcall	.+16     	; 0x19f2 <__divmodhi4_neg2>
    19e2:	e4 df       	rcall	.-56     	; 0x19ac <__udivmodhi4>
    19e4:	07 fc       	sbrc	r0, 7
    19e6:	05 d0       	rcall	.+10     	; 0x19f2 <__divmodhi4_neg2>
    19e8:	3e f4       	brtc	.+14     	; 0x19f8 <__divmodhi4_exit>

000019ea <__divmodhi4_neg1>:
    19ea:	90 95       	com	r25
    19ec:	81 95       	neg	r24
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	08 95       	ret

000019f2 <__divmodhi4_neg2>:
    19f2:	70 95       	com	r23
    19f4:	61 95       	neg	r22
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255

000019f8 <__divmodhi4_exit>:
    19f8:	08 95       	ret

000019fa <__tablejump2__>:
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31

000019fe <__tablejump__>:
    19fe:	05 90       	lpm	r0, Z+
    1a00:	f4 91       	lpm	r31, Z
    1a02:	e0 2d       	mov	r30, r0
    1a04:	09 94       	ijmp

00001a06 <isupper>:
    1a06:	85 fd       	sbrc	r24, 5
    1a08:	33 c0       	rjmp	.+102    	; 0x1a70 <__ctype_isfalse>

00001a0a <isalpha>:
    1a0a:	80 62       	ori	r24, 0x20	; 32

00001a0c <islower>:
    1a0c:	91 11       	cpse	r25, r1
    1a0e:	30 c0       	rjmp	.+96     	; 0x1a70 <__ctype_isfalse>
    1a10:	81 56       	subi	r24, 0x61	; 97
    1a12:	8a 51       	subi	r24, 0x1A	; 26
    1a14:	e0 f7       	brcc	.-8      	; 0x1a0e <islower+0x2>
    1a16:	08 95       	ret

00001a18 <fputc>:
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	8c 01       	movw	r16, r24
    1a22:	eb 01       	movw	r28, r22
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	81 fd       	sbrc	r24, 1
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <fputc+0x18>
    1a2a:	0f ef       	ldi	r16, 0xFF	; 255
    1a2c:	1f ef       	ldi	r17, 0xFF	; 255
    1a2e:	1a c0       	rjmp	.+52     	; 0x1a64 <fputc+0x4c>
    1a30:	82 ff       	sbrs	r24, 2
    1a32:	0d c0       	rjmp	.+26     	; 0x1a4e <fputc+0x36>
    1a34:	2e 81       	ldd	r18, Y+6	; 0x06
    1a36:	3f 81       	ldd	r19, Y+7	; 0x07
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3c:	28 17       	cp	r18, r24
    1a3e:	39 07       	cpc	r19, r25
    1a40:	64 f4       	brge	.+24     	; 0x1a5a <fputc+0x42>
    1a42:	e8 81       	ld	r30, Y
    1a44:	f9 81       	ldd	r31, Y+1	; 0x01
    1a46:	01 93       	st	Z+, r16
    1a48:	f9 83       	std	Y+1, r31	; 0x01
    1a4a:	e8 83       	st	Y, r30
    1a4c:	06 c0       	rjmp	.+12     	; 0x1a5a <fputc+0x42>
    1a4e:	e8 85       	ldd	r30, Y+8	; 0x08
    1a50:	f9 85       	ldd	r31, Y+9	; 0x09
    1a52:	80 2f       	mov	r24, r16
    1a54:	09 95       	icall
    1a56:	89 2b       	or	r24, r25
    1a58:	41 f7       	brne	.-48     	; 0x1a2a <fputc+0x12>
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	9f 83       	std	Y+7, r25	; 0x07
    1a62:	8e 83       	std	Y+6, r24	; 0x06
    1a64:	c8 01       	movw	r24, r16
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	08 95       	ret

00001a70 <__ctype_isfalse>:
    1a70:	99 27       	eor	r25, r25
    1a72:	88 27       	eor	r24, r24

00001a74 <__ctype_istrue>:
    1a74:	08 95       	ret

00001a76 <_exit>:
    1a76:	f8 94       	cli

00001a78 <__stop_program>:
    1a78:	ff cf       	rjmp	.-2      	; 0x1a78 <__stop_program>
